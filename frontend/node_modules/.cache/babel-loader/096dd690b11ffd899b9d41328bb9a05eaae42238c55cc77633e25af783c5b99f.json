{"ast":null,"code":"var _jsxFileName = \"E:\\\\Cline\\\\allm\\\\frontend\\\\src\\\\components\\\\ChatWindow.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useCallback, useMemo } from 'react';\nimport { Box, Paper, TextField, IconButton, Typography, Avatar, Menu, MenuItem, Select, FormControl, CircularProgress, InputAdornment, Popover, Tooltip, ClickAwayListener } from '@mui/material';\nimport { Send as SendIcon, MoreVert as MoreIcon, VideoCall as VideoIcon, OpenInFull as ExpandIcon, Image as ImageIcon, EmojiEmotions as EmojiIcon, Stop as StopIcon, Add as AddIcon, NoteAdd as NoteAddIcon } from '@mui/icons-material';\nimport ReactMarkdown from 'react-markdown';\nimport { styled } from '@mui/material/styles';\nimport EmojiPicker from 'emoji-picker-react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledPaper = styled(Paper)(({\n  theme\n}) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  height: '100%',\n  flex: 1,\n  overflow: 'hidden',\n  backgroundColor: theme.palette.background.paper,\n  borderRadius: theme.spacing(3)\n}));\n_c = StyledPaper;\nconst ChatHeader = styled(Box)(({\n  theme\n}) => ({\n  padding: theme.spacing(2),\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  borderBottom: `1px solid ${theme.palette.divider}`\n}));\n_c2 = ChatHeader;\nconst MessageList = styled(Box)(({\n  theme\n}) => ({\n  flexGrow: 1,\n  overflow: 'auto',\n  padding: theme.spacing(2),\n  backgroundColor: theme.palette.background.default,\n  '&::-webkit-scrollbar': {\n    width: '4px'\n  },\n  '&::-webkit-scrollbar-track': {\n    background: 'transparent'\n  },\n  '&::-webkit-scrollbar-thumb': {\n    background: theme.palette.grey[600],\n    borderRadius: '4px'\n  }\n}));\n_c3 = MessageList;\nconst Message = styled(Box)(({\n  theme,\n  align\n}) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: align === 'right' ? 'flex-end' : 'flex-start',\n  marginBottom: theme.spacing(2)\n}));\n_c4 = Message;\nconst MessageContent = styled(Box)(({\n  theme,\n  align\n}) => ({\n  maxWidth: '70%',\n  padding: theme.spacing(1.5),\n  borderRadius: theme.spacing(2),\n  backgroundColor: align === 'right' ? theme.palette.primary.main : theme.palette.background.paper,\n  color: align === 'right' ? theme.palette.primary.contrastText : theme.palette.text.primary,\n  boxShadow: theme.shadows[1],\n  '& p': {\n    margin: 0\n  },\n  '& pre': {\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(1),\n    borderRadius: theme.spacing(1),\n    overflow: 'auto',\n    margin: theme.spacing(1, 0)\n  },\n  '& code': {\n    fontFamily: 'monospace',\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(0.25, 0.5),\n    borderRadius: theme.spacing(0.5)\n  }\n}));\n_c5 = MessageContent;\nconst ChatFooter = styled(Box)(({\n  theme\n}) => ({\n  padding: theme.spacing(2),\n  borderTop: `1px solid ${theme.palette.divider}`,\n  backgroundColor: theme.palette.background.paper\n}));\n_c6 = ChatFooter;\nconst InputContainer = styled(Box)(({\n  theme\n}) => ({\n  display: 'flex',\n  alignItems: 'center',\n  gap: theme.spacing(1),\n  backgroundColor: theme.palette.background.default,\n  borderRadius: theme.spacing(3),\n  padding: theme.spacing(1)\n}));\n_c7 = InputContainer;\nconst ErrorMessage = styled(Box)(({\n  theme\n}) => ({\n  padding: theme.spacing(1, 2),\n  backgroundColor: theme.palette.error.dark,\n  color: theme.palette.error.contrastText,\n  borderRadius: theme.spacing(1),\n  display: 'flex',\n  alignItems: 'center',\n  gap: theme.spacing(1),\n  marginBottom: theme.spacing(2)\n}));\n_c8 = ErrorMessage;\nconst ModelSelector = styled(FormControl)(({\n  theme\n}) => ({\n  '& .MuiSelect-select': {\n    paddingBottom: 0\n  },\n  '& .MuiInput-underline:before': {\n    borderBottomColor: 'transparent'\n  }\n}));\n_c9 = ModelSelector;\nconst ConversationSelector = styled(FormControl)(({\n  theme\n}) => ({\n  minWidth: 200,\n  '& .MuiSelect-select': {\n    fontSize: '0.875rem'\n  }\n}));\n_c10 = ConversationSelector;\nfunction ChatWindow({\n  position,\n  models,\n  streamingResponse,\n  isThinking,\n  setStreamingResponses,\n  setThinking,\n  serverUrl\n}) {\n  _s2();\n  var _s = $RefreshSig$(),\n    _models$find,\n    _models$find2;\n  // Move startNewConversation definition before any hooks that use it\n  const startNewConversation = useCallback(() => {\n    const newId = Date.now().toString();\n    const newConversation = {\n      id: newId,\n      name: 'New Conversation',\n      messages: [],\n      timestamp: new Date().toISOString()\n    };\n    setConversations(prev => [newConversation, ...prev]);\n    setCurrentConversationId(newId);\n  }, []); // Empty dependency array since it only uses setState functions\n\n  // Initialize state with timestamp-based ID\n  const [conversations, setConversations] = useState(() => {\n    const saved = localStorage.getItem(`conversations-${position}`);\n    const initialId = Date.now().toString();\n    return saved ? JSON.parse(saved) : [{\n      id: initialId,\n      name: 'New Conversation',\n      messages: [],\n      timestamp: new Date().toISOString()\n    }];\n  });\n  const [currentConversationId, setCurrentConversationId] = useState(() => {\n    const saved = localStorage.getItem(`conversations-${position}`);\n    if (saved) {\n      var _parsedConversations$;\n      const parsedConversations = JSON.parse(saved);\n      return ((_parsedConversations$ = parsedConversations[0]) === null || _parsedConversations$ === void 0 ? void 0 : _parsedConversations$.id) || Date.now().toString();\n    }\n    return Date.now().toString();\n  });\n\n  // Remove separate messages state and use conversation messages directly\n  const currentConversation = useMemo(() => conversations.find(c => c.id === currentConversationId) || conversations[0], [conversations, currentConversationId]);\n  const [inputValue, setInputValue] = useState('');\n  const [selectedModel, setSelectedModel] = useState(() => {\n    const savedModel = localStorage.getItem(`selectedModel-${position}`);\n    return savedModel || '';\n  });\n  const [menuAnchor, setMenuAnchor] = useState(null);\n  const [emojiAnchor, setEmojiAnchor] = useState(null);\n  const [uploadError, setUploadError] = useState('');\n\n  // Refs\n  const fileInputRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  const abortControllerRef = useRef(null);\n  const responseBuffer = useRef('');\n  const updateTimeoutRef = useRef(null);\n\n  // Add health check state\n  const [lastHealthCheck, setLastHealthCheck] = useState(() => {\n    return parseInt(localStorage.getItem('lastHealthCheck') || '0');\n  });\n\n  // Add loading state for model switching\n  const [isModelSwitching, setIsModelSwitching] = useState(false);\n\n  // Add model status tracking\n  const [modelStatus, setModelStatus] = useState({});\n  const lastNetworkCheck = useRef(0);\n  const networkCheckInterval = 60000; // 1 minute in milliseconds\n\n  // Cache models list with a longer interval\n  const [cachedModels, setCachedModels] = useState([]);\n  const modelListInterval = 60000; // 1 minute\n  const lastModelListCheck = useRef(0);\n\n  // Move handleModelChange definition before its usage\n  const handleModelChange = useCallback(async newModelId => {\n    if (selectedModel === newModelId || isModelSwitching) return;\n    setIsModelSwitching(true);\n    try {\n      // Only unload previous model if it's different\n      if (selectedModel && selectedModel !== newModelId) {\n        await unloadModel(selectedModel);\n      }\n      setSelectedModel(newModelId);\n      localStorage.setItem(`selectedModel-${position}`, newModelId);\n    } finally {\n      setIsModelSwitching(false);\n    }\n  }, [selectedModel, unloadModel, position, isModelSwitching]);\n\n  // Replace models prop usage with cached models\n  useEffect(() => {\n    const fetchModels = async () => {\n      const now = Date.now();\n      if (now - lastModelListCheck.current < modelListInterval) {\n        return; // Use cached models if checked recently\n      }\n      try {\n        const response = await fetch(`${serverUrl}/v1/models`, {\n          method: 'GET',\n          headers: {\n            'Cache-Control': 'no-cache'\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          setCachedModels(data.data || []);\n          lastModelListCheck.current = now;\n        }\n      } catch (error) {\n        console.warn('Failed to fetch models:', error);\n      }\n    };\n    fetchModels();\n  }, [serverUrl]);\n\n  // Update model selection logic to use cached models\n  useEffect(() => {\n    if (cachedModels.length > 0 && !selectedModel) {\n      const savedModel = localStorage.getItem(`selectedModel-${position}`);\n\n      // Only use saved model if it exists in current available models\n      if (savedModel && cachedModels.some(m => m.id === savedModel)) {\n        handleModelChange(savedModel);\n      } else {\n        // If no saved model or it's not available, select the first available model\n        handleModelChange(cachedModels[0].id);\n      }\n    }\n  }, [cachedModels, selectedModel, handleModelChange, position]);\n\n  // Modify unloadModel to prevent duplicate calls\n  const unloadModel = useCallback(async modelId => {\n    if (!modelId || isModelSwitching) return;\n    try {\n      await fetch(`${serverUrl}/v1/model/unload`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          model: modelId\n        })\n      });\n    } catch (error) {\n      console.warn('Failed to unload model:', error);\n    }\n  }, [serverUrl, isModelSwitching]);\n\n  // Modify health check to use a lightweight endpoint\n  const checkServerHealth = useCallback(async () => {\n    const now = Date.now();\n    if (now - lastNetworkCheck.current < networkCheckInterval) {\n      return true; // Return true if we checked recently\n    }\n    try {\n      const response = await fetch(`${serverUrl}/health`, {\n        method: 'HEAD',\n        signal: AbortSignal.timeout(5000)\n      });\n      if (response.ok) {\n        lastNetworkCheck.current = now;\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.warn('Health check failed:', error);\n      return false;\n    }\n  }, [serverUrl]);\n\n  // Update conversation messages\n  const updateConversationMessages = useCallback(newMessages => {\n    setConversations(prev => prev.map(conv => conv.id === currentConversationId ? {\n      ...conv,\n      messages: newMessages\n    } : conv));\n  }, [currentConversationId]);\n\n  // Move cleanupConversation before handleConversationChange\n  const cleanupConversation = useCallback(conversationId => {\n    // Abort any ongoing requests\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n    }\n\n    // Clear streaming responses\n    setStreamingResponses(prev => ({\n      ...prev,\n      [position]: ''\n    }));\n\n    // Clear thinking state\n    setThinking(prev => ({\n      ...prev,\n      [position]: false\n    }));\n\n    // Clear response buffer\n    responseBuffer.current = '';\n\n    // Clear any pending timeouts\n    if (updateTimeoutRef.current) {\n      clearTimeout(updateTimeoutRef.current);\n      updateTimeoutRef.current = null;\n    }\n  }, [position, setStreamingResponses, setThinking]);\n\n  // Handle conversation switch\n  const handleConversationChange = useCallback(newId => {\n    if (!conversations.some(conv => conv.id === newId)) {\n      var _conversations$;\n      console.warn('Invalid conversation ID, selecting first available conversation');\n      newId = ((_conversations$ = conversations[0]) === null || _conversations$ === void 0 ? void 0 : _conversations$.id) || Date.now().toString();\n    }\n\n    // Clean up the current conversation before switching\n    cleanupConversation(currentConversationId);\n    setCurrentConversationId(newId);\n  }, [conversations, currentConversationId, cleanupConversation]);\n\n  // Optimize streaming updates\n  const updateStreamingResponse = useCallback(newContent => {\n    responseBuffer.current = newContent;\n    if (updateTimeoutRef.current) {\n      clearTimeout(updateTimeoutRef.current);\n    }\n    updateTimeoutRef.current = setTimeout(() => {\n      setStreamingResponses(prev => ({\n        ...prev,\n        [position]: responseBuffer.current\n      }));\n    }, 1500); // 1.5 second debounce\n  }, [position, setStreamingResponses]);\n\n  // Optimize chat completion request\n  const handleSendMessage = async () => {\n    if (!inputValue.trim() || !selectedModel || isModelSwitching) return;\n\n    // Only check server health once per minute\n    const isServerHealthy = await checkServerHealth();\n    if (!isServerHealthy) {\n      const errorMessage = 'Cannot connect to server. Please check that LM Studio is running.';\n      updateConversationMessages([...currentConversation.messages, {\n        content: errorMessage,\n        timestamp: new Date().toISOString(),\n        role: 'error'\n      }]);\n      return;\n    }\n    setStreamingResponses(prev => ({\n      ...prev,\n      [position]: ''\n    }));\n    responseBuffer.current = '';\n    const newMessage = {\n      content: inputValue,\n      timestamp: new Date().toISOString(),\n      role: 'user'\n    };\n    const updatedMessages = [...currentConversation.messages, newMessage];\n    updateConversationMessages(updatedMessages);\n    setInputValue('');\n    setThinking(prev => ({\n      ...prev,\n      [position]: true\n    }));\n    try {\n      abortControllerRef.current = new AbortController();\n      const timeoutId = setTimeout(() => {\n        if (abortControllerRef.current) {\n          abortControllerRef.current.abort();\n        }\n      }, 180000);\n      const response = await fetch(`${serverUrl}/v1/chat/completions`, {\n        method: 'POST',\n        signal: abortControllerRef.current.signal,\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          model: selectedModel,\n          messages: updatedMessages.map(msg => ({\n            role: msg.role === 'error' ? 'assistant' : msg.role,\n            content: msg.content\n          })),\n          stream: true,\n          temperature: 0.7,\n          max_tokens: 2000,\n          options: {\n            load_model_only_when_needed: true,\n            unload_model_after_completion: false,\n            skip_embedding_model: true,\n            skip_model_load_test: true,\n            // Skip test loading\n            no_auto_model_selection: true // Prevent automatic model selection\n          }\n        })\n      });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        throw new Error(`Server returned ${response.status}: ${await response.text()}`);\n      }\n      if (response.body) {\n        const reader = response.body.getReader();\n        responseBuffer.current = '';\n        try {\n          const responseText = await processStreamingResponse(reader);\n          if (responseText) {\n            const updatedMessagesWithResponse = [...updatedMessages, {\n              content: responseText,\n              timestamp: new Date().toISOString(),\n              role: 'assistant'\n            }];\n            updateConversationMessages(updatedMessagesWithResponse);\n          }\n        } finally {\n          if (updateTimeoutRef.current) {\n            clearTimeout(updateTimeoutRef.current);\n            updateTimeoutRef.current = null;\n          }\n          setStreamingResponses(prev => ({\n            ...prev,\n            [position]: ''\n          }));\n          setThinking(prev => ({\n            ...prev,\n            [position]: false\n          }));\n          responseBuffer.current = '';\n          abortControllerRef.current = null;\n        }\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      let errorMessage = 'Unable to get response from LM Studio. ';\n      try {\n        var _errorData$error;\n        // Try to parse the error response\n        const errorData = error.message.includes('{') ? JSON.parse(error.message.substring(error.message.indexOf('{'))) : null;\n        if (errorData !== null && errorData !== void 0 && (_errorData$error = errorData.error) !== null && _errorData$error !== void 0 && _errorData$error.message) {\n          if (errorData.error.message.includes('Failed to load model')) {\n            errorMessage = `Model loading failed. Please ensure:\\n` + `1. The model file exists and is not corrupted\\n` + `2. You have sufficient RAM available\\n` + `3. Try restarting LM Studio\\n\\n` + `Technical details: ${errorData.error.message}`;\n          } else {\n            errorMessage += errorData.error.message;\n          }\n        } else if (error.name === 'AbortError') {\n          errorMessage += 'Request timed out. The model might be too slow or not responding.';\n        } else if (error.message === 'Failed to fetch') {\n          errorMessage += `Please check that:\\n1. LM Studio is still running\\n2. Local Server is active\\n3. Server address (${serverUrl}) is correct\\n4. Your internet connection is stable`;\n        } else {\n          errorMessage += error.message;\n        }\n      } catch (parseError) {\n        // If we can't parse the error, just use the original error message\n        errorMessage += error.message;\n      }\n      updateConversationMessages([...updatedMessages, {\n        content: errorMessage,\n        timestamp: new Date().toISOString(),\n        role: 'error'\n      }]);\n      setThinking(prev => ({\n        ...prev,\n        [position]: false\n      }));\n    }\n  };\n  useEffect(() => {\n    localStorage.setItem(`conversations-${position}`, JSON.stringify(conversations));\n  }, [conversations, position]);\n  const scrollToBottom = useCallback(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, []);\n  useEffect(() => {\n    const scrollTimer = setTimeout(() => {\n      scrollToBottom();\n    }, 1000); // Delay scroll to 1 second\n\n    return () => clearTimeout(scrollTimer);\n  }, [currentConversation.messages, streamingResponse, scrollToBottom]);\n  useEffect(() => {\n    setStreamingResponses(prev => ({\n      ...prev,\n      [position]: ''\n    }));\n  }, [currentConversationId, position, setStreamingResponses]);\n  const handleClearChat = useCallback(() => {\n    updateConversationMessages([]); // Clear messages in current conversation\n    setStreamingResponses(prev => ({\n      ...prev,\n      [position]: ''\n    }));\n    setThinking(prev => ({\n      ...prev,\n      [position]: false\n    }));\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n    }\n  }, [position, setStreamingResponses, setThinking, updateConversationMessages]);\n  const handleMenuAction = useCallback(action => {\n    switch (action) {\n      case 'new':\n        startNewConversation();\n        break;\n      case 'clear':\n        handleClearChat();\n        break;\n      case 'delete':\n        // Clean up the conversation before deleting\n        cleanupConversation(currentConversationId);\n        setConversations(prev => {\n          const updatedConversations = prev.filter(conv => conv.id !== currentConversationId);\n          if (updatedConversations.length === 0) {\n            const newId = Date.now().toString();\n            const newConversation = {\n              id: newId,\n              name: 'New Conversation',\n              messages: [],\n              timestamp: new Date().toISOString()\n            };\n            return [newConversation];\n          }\n          // Switch to the first conversation in the list\n          setCurrentConversationId(updatedConversations[0].id);\n          return updatedConversations;\n        });\n        break;\n      default:\n        break;\n    }\n    setMenuAnchor(null);\n  }, [currentConversationId, handleClearChat, startNewConversation, cleanupConversation]);\n  const handleStopResponse = () => {\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n      setThinking(prev => ({\n        ...prev,\n        [position]: false\n      }));\n      setStreamingResponses(prev => ({\n        ...prev,\n        [position]: ''\n      }));\n    }\n  };\n  const updateConversationName = (id, firstMessage) => {\n    if (!firstMessage) return;\n\n    // Extract first ~30 characters of the first message for the conversation name\n    const name = firstMessage.content.length > 30 ? firstMessage.content.substring(0, 30) + '...' : firstMessage.content;\n    setConversations(prev => prev.map(conv => conv.id === id ? {\n      ...conv,\n      name\n    } : conv));\n  };\n\n  // Batch updates for message list scrolling with longer delay\n  useEffect(() => {\n    const scrollTimer = setTimeout(() => {\n      scrollToBottom();\n    }, 1000); // Delay scroll to 1 second\n\n    return () => clearTimeout(scrollTimer);\n  }, [currentConversation.messages, streamingResponse, scrollToBottom]);\n\n  // Add rate limiting for streaming updates\n  const processStreamingChunk = useCallback(chunk => {\n    const lines = chunk.split('\\n');\n    let accumulatedContent = '';\n    for (const line of lines) {\n      if (!line.trim() || line.includes('[DONE]')) continue;\n      try {\n        var _data$choices$, _data$choices$$delta;\n        const jsonStr = line.replace(/^data: /, '');\n        const data = JSON.parse(jsonStr);\n        if (data.choices && (_data$choices$ = data.choices[0]) !== null && _data$choices$ !== void 0 && (_data$choices$$delta = _data$choices$.delta) !== null && _data$choices$$delta !== void 0 && _data$choices$$delta.content) {\n          accumulatedContent += data.choices[0].delta.content;\n        }\n      } catch (e) {\n        console.warn('Error parsing chunk:', e);\n        continue;\n      }\n    }\n    return accumulatedContent;\n  }, []);\n\n  // Clean up timeouts on unmount\n  useEffect(() => {\n    return () => {\n      if (updateTimeoutRef.current) {\n        clearTimeout(updateTimeoutRef.current);\n      }\n    };\n  }, []);\n  const handleKeyPress = event => {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      event.preventDefault();\n      handleSendMessage();\n    }\n  };\n  const processStreamingResponse = async (reader, responseText = '', maxIterations = 1000) => {\n    let iterations = 0;\n    let accumulatedContent = '';\n    let lastUpdateTime = Date.now();\n    const updateInterval = 1500; // Update every 1.5 seconds\n\n    try {\n      while (iterations < maxIterations) {\n        iterations++;\n        const {\n          done,\n          value\n        } = await reader.read();\n        if (done) break;\n        const chunk = new TextDecoder().decode(value);\n        const newContent = processStreamingChunk(chunk);\n        responseText += newContent;\n        accumulatedContent += newContent;\n\n        // Only update UI if enough time has passed\n        if (Date.now() - lastUpdateTime >= updateInterval) {\n          updateStreamingResponse(accumulatedContent);\n          accumulatedContent = '';\n          lastUpdateTime = Date.now();\n        }\n      }\n\n      // Final update for any remaining content\n      if (accumulatedContent) {\n        updateStreamingResponse(accumulatedContent);\n      }\n      return responseText;\n    } catch (error) {\n      console.error('Error processing stream:', error);\n      throw error;\n    }\n  };\n  const handleEmojiClick = emojiData => {\n    const emoji = emojiData.emoji;\n    const cursorPosition = document.querySelector('textarea').selectionStart;\n    const updatedText = inputValue.slice(0, cursorPosition) + emoji + inputValue.slice(cursorPosition);\n    setInputValue(updatedText);\n    setEmojiAnchor(null);\n  };\n  const handleFileUpload = async event => {\n    var _event$target$files;\n    const file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];\n    if (!file) return;\n\n    // Reset file input\n    event.target.value = '';\n\n    // Check file size (limit to 10MB)\n    if (file.size > 10 * 1024 * 1024) {\n      setUploadError('File size must be less than 10MB');\n      return;\n    }\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('model', selectedModel);\n      setThinking(prev => ({\n        ...prev,\n        [position]: true\n      }));\n      const response = await fetch(`${serverUrl}/v1/files`, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error(`Upload failed: ${response.statusText}`);\n      }\n      const data = await response.json();\n\n      // Add file message to chat\n      updateConversationMessages([...currentConversation.messages, {\n        content: `📎 Uploaded file: ${file.name}`,\n        timestamp: new Date().toISOString(),\n        role: 'user',\n        fileId: data.id\n      }]);\n    } catch (error) {\n      console.error('Upload error:', error);\n      setUploadError(error.message);\n      updateConversationMessages([...currentConversation.messages, {\n        content: `Failed to upload file: ${error.message}`,\n        timestamp: new Date().toISOString(),\n        role: 'error'\n      }]);\n    } finally {\n      setThinking(prev => ({\n        ...prev,\n        [position]: false\n      }));\n    }\n  };\n  const supportsFileUpload = () => {\n    var _currentModel$name, _currentModel$capabil;\n    if (!selectedModel || !models.length) return false;\n    const currentModel = models.find(m => m.id === selectedModel);\n    const modelName = (currentModel === null || currentModel === void 0 ? void 0 : (_currentModel$name = currentModel.name) === null || _currentModel$name === void 0 ? void 0 : _currentModel$name.toLowerCase()) || '';\n\n    // Enable file uploads for both deepseek and qwen models\n    if (modelName.includes('deepseek') || modelName.includes('qwen')) {\n      return true;\n    }\n    // Fallback to checking capabilities if model has them defined\n    return (currentModel === null || currentModel === void 0 ? void 0 : (_currentModel$capabil = currentModel.capabilities) === null || _currentModel$capabil === void 0 ? void 0 : _currentModel$capabil.includes('file_upload')) || false;\n  };\n  const getModelLetter = modelName => {\n    if (!modelName) return 'A';\n    return modelName.charAt(0).toUpperCase();\n  };\n  const getModelColor = modelName => {\n    if (!modelName) return 'primary.main';\n    const name = modelName.trim().toLowerCase();\n\n    // Use a consistent color scheme based on model name\n    const colors = {\n      hermes: '#00BFA5',\n      // Teal\n      nomic: '#4A90E2',\n      // Blue\n      llama: '#2E7D32',\n      // Green\n      mistral: '#ED6C02',\n      // Orange\n      openchat: '#1976D2',\n      // Light blue\n      qwen: '#9C27B0',\n      // Purple\n      gemma: '#FF4081',\n      // Pink\n      default: '#757575' // Grey\n    };\n\n    // Find the first matching model name in the colors object\n    const modelType = Object.keys(colors).find(key => name.includes(key));\n    return modelType ? colors[modelType] : colors.default;\n  };\n  const getModelImage = modelName => {\n    if (!modelName) return null;\n    const name = modelName.trim().toLowerCase();\n\n    // Map of model names to their image files\n    const modelImages = {\n      hermes: './Images/Hermes.jpg',\n      nomic: './Images/Nomic.png',\n      qwen: './Images/Qwen2.png',\n      starcoder: './Images/StarCoder.jpg',\n      gemma: './Images/Gemma.png'\n    };\n\n    // Find the first matching model name in the images object\n    const modelType = Object.keys(modelImages).find(key => name.includes(key));\n    return modelType ? modelImages[modelType] : null;\n  };\n\n  // Update MessageComponent to include menu\n  const MessageComponent = /*#__PURE__*/_s(/*#__PURE__*/React.memo(_s(({\n    message,\n    align\n  }) => {\n    _s();\n    const [menuAnchor, setMenuAnchor] = useState(null);\n    const [isDragging, setIsDragging] = useState(false);\n    const handleMessageClick = event => {\n      if (!isDragging) {\n        // Only show menu if not dragging\n        event.preventDefault();\n        setMenuAnchor(event.currentTarget);\n      }\n    };\n    const handleDragStart = e => {\n      setIsDragging(true);\n      e.dataTransfer.setData('text/plain', message.content);\n      e.dataTransfer.effectAllowed = 'copy';\n      // Add a class to style the dragged element\n      e.currentTarget.classList.add('dragging');\n    };\n    const handleDragEnd = e => {\n      setIsDragging(false);\n      // Remove the dragging class\n      e.currentTarget.classList.remove('dragging');\n      // Reset after a short delay to allow click events if no drag occurred\n      setTimeout(() => setIsDragging(false), 100);\n    };\n    const handleAddToNotebook = () => {\n      const event = new CustomEvent('addToNotebook', {\n        detail: {\n          content: message.content,\n          timestamp: message.timestamp,\n          role: message.role\n        }\n      });\n      window.dispatchEvent(event);\n      setMenuAnchor(null);\n    };\n    return /*#__PURE__*/_jsxDEV(Message, {\n      align: align,\n      draggable: true,\n      onDragStart: handleDragStart,\n      onDragEnd: handleDragEnd,\n      onClick: handleMessageClick,\n      sx: {\n        cursor: isDragging ? 'grabbing' : 'grab',\n        '&:hover': {\n          '& .message-content': {\n            boxShadow: 2\n          }\n        },\n        '&.dragging .message-content': {\n          opacity: 0.7,\n          boxShadow: 4\n        }\n      },\n      children: [message.role === 'error' ? /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 16,\n          color: \"error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 914,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: message.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 915,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 913,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(MessageContent, {\n          align: align,\n          className: \"message-content\",\n          sx: {\n            transition: 'all 0.2s ease'\n          },\n          children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n            children: message.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 926,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 919,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          color: \"textSecondary\",\n          sx: {\n            mt: 0.5,\n            opacity: 0.7,\n            fontSize: '0.7rem'\n          },\n          children: new Date(message.timestamp).toLocaleTimeString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 928,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(Menu, {\n        anchorEl: menuAnchor,\n        open: Boolean(menuAnchor),\n        onClose: () => setMenuAnchor(null),\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: align === 'right' ? 'right' : 'left'\n        },\n        transformOrigin: {\n          vertical: 'top',\n          horizontal: align === 'right' ? 'right' : 'left'\n        },\n        children: /*#__PURE__*/_jsxDEV(MenuItem, {\n          onClick: handleAddToNotebook,\n          children: [/*#__PURE__*/_jsxDEV(NoteAddIcon, {\n            sx: {\n              mr: 1,\n              fontSize: 20\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 955,\n            columnNumber: 13\n          }, this), \"Add to Notebook\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 954,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 941,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 893,\n      columnNumber: 7\n    }, this);\n  }, \"ndg/5fElBO7NEv9vuDyOL/b5Bkg=\")), \"ndg/5fElBO7NEv9vuDyOL/b5Bkg=\");\n\n  // Memoize streaming response component\n  const StreamingResponseComponent = /*#__PURE__*/React.memo(({\n    content\n  }) => content ? /*#__PURE__*/_jsxDEV(Message, {\n    align: \"left\",\n    children: /*#__PURE__*/_jsxDEV(MessageContent, {\n      align: \"left\",\n      sx: {\n        backgroundColor: 'rgba(0, 0, 0, 0.2)',\n        // Slightly darker background to distinguish from final responses\n        minWidth: '200px',\n        width: 'fit-content',\n        maxWidth: '70%'\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          flexDirection: 'column',\n          gap: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          children: content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 977,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 976,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 967,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 966,\n    columnNumber: 7\n  }, this) : null);\n\n  // Update ThinkingIndicator to be more precise\n  const ThinkingIndicator = /*#__PURE__*/React.memo(({\n    isThinking,\n    onStop\n  }) => isThinking && !streamingResponse && !currentConversation.messages.find(m => m.role === 'error') ? /*#__PURE__*/_jsxDEV(Message, {\n    align: \"left\",\n    children: /*#__PURE__*/_jsxDEV(MessageContent, {\n      align: \"left\",\n      sx: {\n        backgroundColor: 'rgba(0, 0, 0, 0.2)',\n        minWidth: '200px',\n        width: 'fit-content',\n        maxWidth: '70%',\n        position: 'relative',\n        padding: '12px 16px',\n        '& pre': {\n          margin: 0,\n          padding: 0,\n          backgroundColor: 'transparent',\n          fontFamily: 'inherit',\n          whiteSpace: 'pre-wrap',\n          fontSize: '0.875rem'\n        }\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          flexDirection: 'column',\n          gap: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"pre\", {\n          children: \"<think>\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1014,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          style: {\n            marginLeft: '8px'\n          },\n          children: \"Processing request and generating response...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1015,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: \"</think>\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1018,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'center',\n            gap: 1,\n            mt: 1,\n            pt: 1,\n            borderTop: '1px solid rgba(255, 255, 255, 0.1)'\n          },\n          children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1027,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: \"Thinking...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1028,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            size: \"small\",\n            onClick: onStop,\n            sx: {\n              ml: 'auto',\n              bgcolor: 'error.main',\n              color: 'error.contrastText',\n              '&:hover': {\n                bgcolor: 'error.dark'\n              },\n              width: 24,\n              height: 24\n            },\n            children: /*#__PURE__*/_jsxDEV(StopIcon, {\n              sx: {\n                fontSize: 16\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1043,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1029,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1019,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1009,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 990,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 989,\n    columnNumber: 7\n  }, this) : null);\n\n  // Update model status when a model is successfully used\n  const updateModelStatus = useCallback((modelId, isAvailable) => {\n    setModelStatus(prev => ({\n      ...prev,\n      [modelId]: {\n        available: isAvailable,\n        lastChecked: Date.now()\n      }\n    }));\n  }, []);\n\n  // Check if we need to verify model availability\n  const shouldCheckModel = useCallback(modelId => {\n    const status = modelStatus[modelId];\n    if (!status) return true;\n    const now = Date.now();\n    return now - status.lastChecked > networkCheckInterval;\n  }, [modelStatus]);\n  return /*#__PURE__*/_jsxDEV(StyledPaper, {\n    elevation: 3,\n    children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center',\n          gap: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n          title: selectedModel ? ((_models$find = models.find(m => m.id === selectedModel)) === null || _models$find === void 0 ? void 0 : _models$find.name) || 'Select a model' : 'Select a model',\n          children: /*#__PURE__*/_jsxDEV(Avatar, {\n            sx: {\n              bgcolor: selectedModel ? getModelColor(((_models$find2 = models.find(m => m.id === selectedModel)) === null || _models$find2 === void 0 ? void 0 : _models$find2.name) || '') : 'primary.main',\n              transition: 'all 0.3s ease',\n              fontWeight: 600,\n              width: 40,\n              height: 40,\n              cursor: 'help',\n              '& img': {\n                width: '100%',\n                height: '100%',\n                objectFit: 'cover'\n              }\n            },\n            children: selectedModel ? (_models$find3 => {\n              const modelName = ((_models$find3 = models.find(m => m.id === selectedModel)) === null || _models$find3 === void 0 ? void 0 : _models$find3.name) || '';\n              const imagePath = getModelImage(modelName);\n              return imagePath ? /*#__PURE__*/_jsxDEV(\"img\", {\n                src: imagePath,\n                alt: modelName,\n                style: {\n                  width: '100%',\n                  height: '100%',\n                  objectFit: 'cover'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1097,\n                columnNumber: 21\n              }, this) : getModelLetter(modelName);\n            })() : 'A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1077,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1076,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flexDirection: 'column',\n            gap: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(ConversationSelector, {\n            size: \"small\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              value: currentConversationId,\n              onChange: e => handleConversationChange(e.target.value),\n              variant: \"standard\",\n              sx: {\n                fontSize: '0.875rem'\n              },\n              children: conversations.map(conv => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: conv.id,\n                children: conv.name || 'New Conversation'\n              }, conv.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1122,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1115,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1114,\n            columnNumber: 13\n          }, this), models.length > 0 ? /*#__PURE__*/_jsxDEV(ModelSelector, {\n            size: \"small\",\n            sx: {\n              minWidth: 200\n            },\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              value: selectedModel || '',\n              onChange: e => handleModelChange(e.target.value),\n              variant: \"standard\",\n              displayEmpty: true,\n              children: models.map(model => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: model.id,\n                children: model.name\n              }, model.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1137,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1130,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1129,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            color: \"error\",\n            children: \"No AI models available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1144,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1075,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          gap: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: startNewConversation,\n          title: \"New Conversation\",\n          children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1155,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: e => setMenuAnchor(e.currentTarget),\n          children: /*#__PURE__*/_jsxDEV(MoreIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1158,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1157,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1074,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n      children: [currentConversation.messages.map((msg, index) => /*#__PURE__*/_jsxDEV(MessageComponent, {\n        message: msg,\n        align: msg.role === 'user' ? 'right' : 'left'\n      }, `${msg.timestamp}-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1165,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(StreamingResponseComponent, {\n        content: streamingResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ThinkingIndicator, {\n        isThinking: isThinking,\n        onStop: handleStopResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1176,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatFooter, {\n      children: [/*#__PURE__*/_jsxDEV(InputContainer, {\n        onDragOver: e => {\n          e.preventDefault();\n          e.currentTarget.style.backgroundColor = 'rgba(255, 255, 255, 0.1)';\n        },\n        onDragLeave: e => {\n          e.preventDefault();\n          e.currentTarget.style.backgroundColor = '';\n        },\n        onDrop: e => {\n          e.preventDefault();\n          e.currentTarget.style.backgroundColor = '';\n          const text = e.dataTransfer.getData('text/plain');\n          setInputValue(prev => {\n            var _document$querySelect;\n            const cursorPosition = ((_document$querySelect = document.querySelector('textarea')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.selectionStart) || prev.length;\n            return prev.slice(0, cursorPosition) + text + prev.slice(cursorPosition);\n          });\n        },\n        sx: {\n          transition: 'background-color 0.2s ease',\n          '&:hover': {\n            '&[data-dragging=\"true\"]': {\n              backgroundColor: 'rgba(255, 255, 255, 0.1)'\n            }\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          size: \"small\",\n          onClick: e => setEmojiAnchor(e.currentTarget),\n          children: /*#__PURE__*/_jsxDEV(EmojiIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1211,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Popover, {\n          open: Boolean(emojiAnchor),\n          anchorEl: emojiAnchor,\n          onClose: () => setEmojiAnchor(null),\n          anchorOrigin: {\n            vertical: 'top',\n            horizontal: 'left'\n          },\n          transformOrigin: {\n            vertical: 'bottom',\n            horizontal: 'left'\n          },\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              '.EmojiPickerReact': {\n                '--epr-bg-color': 'rgba(18, 18, 18, 0.95)',\n                '--epr-category-label-bg-color': 'rgba(18, 18, 18, 0.95)',\n                '--epr-hover-bg-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-focus-bg-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-highlight-color': 'rgba(255, 255, 255, 0.2)',\n                '--epr-search-border-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-border-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-text-color': '#fff',\n                border: 'none',\n                boxShadow: '0 4px 20px rgba(0, 0, 0, 0.3)'\n              }\n            },\n            children: /*#__PURE__*/_jsxDEV(EmojiPicker, {\n              onEmojiClick: handleEmojiClick,\n              autoFocusSearch: false,\n              theme: \"dark\",\n              searchPlaceHolder: \"Search emojis...\",\n              width: 320,\n              height: 400,\n              previewConfig: {\n                showPreview: false\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1240,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1226,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1213,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          ref: fileInputRef,\n          style: {\n            display: 'none'\n          },\n          onChange: handleFileUpload,\n          accept: \"image/*,.pdf,.txt,.doc,.docx\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1253,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: !selectedModel ? \"Please select a model first\" : !supportsFileUpload() ? \"This model doesn't support file uploads\" : \"Upload a file\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              size: \"small\",\n              disabled: !supportsFileUpload(),\n              onClick: () => {\n                var _fileInputRef$current;\n                return (_fileInputRef$current = fileInputRef.current) === null || _fileInputRef$current === void 0 ? void 0 : _fileInputRef$current.click();\n              },\n              children: /*#__PURE__*/_jsxDEV(ImageIcon, {\n                sx: {\n                  color: theme => !supportsFileUpload() ? theme.palette.action.disabled : 'inherit'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1271,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1266,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1265,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1260,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          multiline: true,\n          maxRows: 4,\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyPress: handleKeyPress,\n          placeholder: \"Type your message...\",\n          variant: \"standard\",\n          InputProps: {\n            disableUnderline: true,\n            endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"end\",\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: handleSendMessage,\n                disabled: !inputValue.trim() || !selectedModel,\n                color: \"primary\",\n                children: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1297,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1292,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1291,\n              columnNumber: 17\n            }, this)\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1279,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1180,\n        columnNumber: 9\n      }, this), uploadError && /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"caption\",\n        color: \"error\",\n        sx: {\n          mt: 1,\n          display: 'block'\n        },\n        onClick: () => setUploadError(''),\n        children: uploadError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1305,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Menu, {\n      anchorEl: menuAnchor,\n      open: Boolean(menuAnchor),\n      onClose: () => setMenuAnchor(null),\n      children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => handleMenuAction('new'),\n        children: \"New Conversation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1321,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => handleMenuAction('clear'),\n        children: \"Clear Current Conversation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1324,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => handleMenuAction('delete'),\n        children: \"Delete Current Conversation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1327,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1316,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1073,\n    columnNumber: 5\n  }, this);\n}\n_s2(ChatWindow, \"cFdJPI+X05TQDPH1AMBIBobTGdg=\");\n_c11 = ChatWindow;\nexport default ChatWindow;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;\n$RefreshReg$(_c, \"StyledPaper\");\n$RefreshReg$(_c2, \"ChatHeader\");\n$RefreshReg$(_c3, \"MessageList\");\n$RefreshReg$(_c4, \"Message\");\n$RefreshReg$(_c5, \"MessageContent\");\n$RefreshReg$(_c6, \"ChatFooter\");\n$RefreshReg$(_c7, \"InputContainer\");\n$RefreshReg$(_c8, \"ErrorMessage\");\n$RefreshReg$(_c9, \"ModelSelector\");\n$RefreshReg$(_c10, \"ConversationSelector\");\n$RefreshReg$(_c11, \"ChatWindow\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","useMemo","Box","Paper","TextField","IconButton","Typography","Avatar","Menu","MenuItem","Select","FormControl","CircularProgress","InputAdornment","Popover","Tooltip","ClickAwayListener","Send","SendIcon","MoreVert","MoreIcon","VideoCall","VideoIcon","OpenInFull","ExpandIcon","Image","ImageIcon","EmojiEmotions","EmojiIcon","Stop","StopIcon","Add","AddIcon","NoteAdd","NoteAddIcon","ReactMarkdown","styled","EmojiPicker","jsxDEV","_jsxDEV","Fragment","_Fragment","StyledPaper","theme","display","flexDirection","height","flex","overflow","backgroundColor","palette","background","paper","borderRadius","spacing","_c","ChatHeader","padding","alignItems","justifyContent","borderBottom","divider","_c2","MessageList","flexGrow","default","width","grey","_c3","Message","align","marginBottom","_c4","MessageContent","maxWidth","primary","main","color","contrastText","text","boxShadow","shadows","margin","fontFamily","_c5","ChatFooter","borderTop","_c6","InputContainer","gap","_c7","ErrorMessage","error","dark","_c8","ModelSelector","paddingBottom","borderBottomColor","_c9","ConversationSelector","minWidth","fontSize","_c10","ChatWindow","position","models","streamingResponse","isThinking","setStreamingResponses","setThinking","serverUrl","_s2","_s","$RefreshSig$","_models$find","_models$find2","startNewConversation","newId","Date","now","toString","newConversation","id","name","messages","timestamp","toISOString","setConversations","prev","setCurrentConversationId","conversations","saved","localStorage","getItem","initialId","JSON","parse","currentConversationId","_parsedConversations$","parsedConversations","currentConversation","find","c","inputValue","setInputValue","selectedModel","setSelectedModel","savedModel","menuAnchor","setMenuAnchor","emojiAnchor","setEmojiAnchor","uploadError","setUploadError","fileInputRef","messagesEndRef","abortControllerRef","responseBuffer","updateTimeoutRef","lastHealthCheck","setLastHealthCheck","parseInt","isModelSwitching","setIsModelSwitching","modelStatus","setModelStatus","lastNetworkCheck","networkCheckInterval","cachedModels","setCachedModels","modelListInterval","lastModelListCheck","handleModelChange","newModelId","unloadModel","setItem","fetchModels","current","response","fetch","method","headers","ok","data","json","console","warn","length","some","m","modelId","body","stringify","model","checkServerHealth","signal","AbortSignal","timeout","updateConversationMessages","newMessages","map","conv","cleanupConversation","conversationId","abort","clearTimeout","handleConversationChange","_conversations$","updateStreamingResponse","newContent","setTimeout","handleSendMessage","trim","isServerHealthy","errorMessage","content","role","newMessage","updatedMessages","AbortController","timeoutId","msg","stream","temperature","max_tokens","options","load_model_only_when_needed","unload_model_after_completion","skip_embedding_model","skip_model_load_test","no_auto_model_selection","Error","status","reader","getReader","responseText","processStreamingResponse","updatedMessagesWithResponse","_errorData$error","errorData","message","includes","substring","indexOf","parseError","scrollToBottom","scrollIntoView","behavior","scrollTimer","handleClearChat","handleMenuAction","action","updatedConversations","filter","handleStopResponse","updateConversationName","firstMessage","processStreamingChunk","chunk","lines","split","accumulatedContent","line","_data$choices$","_data$choices$$delta","jsonStr","replace","choices","delta","e","handleKeyPress","event","key","shiftKey","preventDefault","maxIterations","iterations","lastUpdateTime","updateInterval","done","value","read","TextDecoder","decode","handleEmojiClick","emojiData","emoji","cursorPosition","document","querySelector","selectionStart","updatedText","slice","handleFileUpload","_event$target$files","file","target","files","size","formData","FormData","append","statusText","fileId","supportsFileUpload","_currentModel$name","_currentModel$capabil","currentModel","modelName","toLowerCase","capabilities","getModelLetter","charAt","toUpperCase","getModelColor","colors","hermes","nomic","llama","mistral","openchat","qwen","gemma","modelType","Object","keys","getModelImage","modelImages","starcoder","MessageComponent","memo","isDragging","setIsDragging","handleMessageClick","currentTarget","handleDragStart","dataTransfer","setData","effectAllowed","classList","add","handleDragEnd","remove","handleAddToNotebook","CustomEvent","detail","window","dispatchEvent","draggable","onDragStart","onDragEnd","onClick","sx","cursor","opacity","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","className","transition","mt","toLocaleTimeString","anchorEl","open","Boolean","onClose","anchorOrigin","vertical","horizontal","transformOrigin","mr","StreamingResponseComponent","ThinkingIndicator","onStop","whiteSpace","style","marginLeft","pt","ml","bgcolor","updateModelStatus","isAvailable","available","lastChecked","shouldCheckModel","elevation","title","fontWeight","objectFit","_models$find3","imagePath","src","alt","onChange","displayEmpty","index","ref","onDragOver","onDragLeave","onDrop","getData","_document$querySelect","border","onEmojiClick","autoFocusSearch","searchPlaceHolder","previewConfig","showPreview","type","accept","disabled","_fileInputRef$current","click","fullWidth","multiline","maxRows","onKeyPress","placeholder","InputProps","disableUnderline","endAdornment","_c11","$RefreshReg$"],"sources":["E:/Cline/allm/frontend/src/components/ChatWindow.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback, useMemo } from 'react';\nimport {\n  Box,\n  Paper,\n  TextField,\n  IconButton,\n  Typography,\n  Avatar,\n  Menu,\n  MenuItem,\n  Select,\n  FormControl,\n  CircularProgress,\n  InputAdornment,\n  Popover,\n  Tooltip,\n  ClickAwayListener,\n} from '@mui/material';\nimport {\n  Send as SendIcon,\n  MoreVert as MoreIcon,\n  VideoCall as VideoIcon,\n  OpenInFull as ExpandIcon,\n  Image as ImageIcon,\n  EmojiEmotions as EmojiIcon,\n  Stop as StopIcon,\n  Add as AddIcon,\n  NoteAdd as NoteAddIcon,\n} from '@mui/icons-material';\nimport ReactMarkdown from 'react-markdown';\nimport { styled } from '@mui/material/styles';\nimport EmojiPicker from 'emoji-picker-react';\n\nconst StyledPaper = styled(Paper)(({ theme }) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  height: '100%',\n  flex: 1,\n  overflow: 'hidden',\n  backgroundColor: theme.palette.background.paper,\n  borderRadius: theme.spacing(3),\n}));\n\nconst ChatHeader = styled(Box)(({ theme }) => ({\n  padding: theme.spacing(2),\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  borderBottom: `1px solid ${theme.palette.divider}`,\n}));\n\nconst MessageList = styled(Box)(({ theme }) => ({\n  flexGrow: 1,\n  overflow: 'auto',\n  padding: theme.spacing(2),\n  backgroundColor: theme.palette.background.default,\n  '&::-webkit-scrollbar': {\n    width: '4px',\n  },\n  '&::-webkit-scrollbar-track': {\n    background: 'transparent',\n  },\n  '&::-webkit-scrollbar-thumb': {\n    background: theme.palette.grey[600],\n    borderRadius: '4px',\n  },\n}));\n\nconst Message = styled(Box)(({ theme, align }) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: align === 'right' ? 'flex-end' : 'flex-start',\n  marginBottom: theme.spacing(2),\n}));\n\nconst MessageContent = styled(Box)(({ theme, align }) => ({\n  maxWidth: '70%',\n  padding: theme.spacing(1.5),\n  borderRadius: theme.spacing(2),\n  backgroundColor: align === 'right' ? theme.palette.primary.main : theme.palette.background.paper,\n  color: align === 'right' ? theme.palette.primary.contrastText : theme.palette.text.primary,\n  boxShadow: theme.shadows[1],\n  '& p': {\n    margin: 0,\n  },\n  '& pre': {\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(1),\n    borderRadius: theme.spacing(1),\n    overflow: 'auto',\n    margin: theme.spacing(1, 0),\n  },\n  '& code': {\n    fontFamily: 'monospace',\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(0.25, 0.5),\n    borderRadius: theme.spacing(0.5),\n  },\n}));\n\nconst ChatFooter = styled(Box)(({ theme }) => ({\n  padding: theme.spacing(2),\n  borderTop: `1px solid ${theme.palette.divider}`,\n  backgroundColor: theme.palette.background.paper,\n}));\n\nconst InputContainer = styled(Box)(({ theme }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  gap: theme.spacing(1),\n  backgroundColor: theme.palette.background.default,\n  borderRadius: theme.spacing(3),\n  padding: theme.spacing(1),\n}));\n\nconst ErrorMessage = styled(Box)(({ theme }) => ({\n  padding: theme.spacing(1, 2),\n  backgroundColor: theme.palette.error.dark,\n  color: theme.palette.error.contrastText,\n  borderRadius: theme.spacing(1),\n  display: 'flex',\n  alignItems: 'center',\n  gap: theme.spacing(1),\n  marginBottom: theme.spacing(2),\n}));\n\nconst ModelSelector = styled(FormControl)(({ theme }) => ({\n  '& .MuiSelect-select': {\n    paddingBottom: 0,\n  },\n  '& .MuiInput-underline:before': {\n    borderBottomColor: 'transparent',\n  },\n}));\n\nconst ConversationSelector = styled(FormControl)(({ theme }) => ({\n  minWidth: 200,\n  '& .MuiSelect-select': {\n    fontSize: '0.875rem',\n  },\n}));\n\nfunction ChatWindow({\n  position,\n  models,\n  streamingResponse,\n  isThinking,\n  setStreamingResponses,\n  setThinking,\n  serverUrl,\n}) {\n  // Move startNewConversation definition before any hooks that use it\n  const startNewConversation = useCallback(() => {\n    const newId = Date.now().toString();\n    const newConversation = {\n      id: newId,\n      name: 'New Conversation',\n      messages: [],\n      timestamp: new Date().toISOString()\n    };\n    setConversations(prev => [newConversation, ...prev]);\n    setCurrentConversationId(newId);\n  }, []); // Empty dependency array since it only uses setState functions\n\n  // Initialize state with timestamp-based ID\n  const [conversations, setConversations] = useState(() => {\n    const saved = localStorage.getItem(`conversations-${position}`);\n    const initialId = Date.now().toString();\n    return saved ? JSON.parse(saved) : [{\n      id: initialId,\n      name: 'New Conversation',\n      messages: [],\n      timestamp: new Date().toISOString()\n    }];\n  });\n\n  const [currentConversationId, setCurrentConversationId] = useState(() => {\n    const saved = localStorage.getItem(`conversations-${position}`);\n    if (saved) {\n      const parsedConversations = JSON.parse(saved);\n      return parsedConversations[0]?.id || Date.now().toString();\n    }\n    return Date.now().toString();\n  });\n\n  // Remove separate messages state and use conversation messages directly\n  const currentConversation = useMemo(() => \n    conversations.find(c => c.id === currentConversationId) || conversations[0],\n    [conversations, currentConversationId]\n  );\n\n  const [inputValue, setInputValue] = useState('');\n  const [selectedModel, setSelectedModel] = useState(() => {\n    const savedModel = localStorage.getItem(`selectedModel-${position}`);\n    return savedModel || '';\n  });\n  const [menuAnchor, setMenuAnchor] = useState(null);\n  const [emojiAnchor, setEmojiAnchor] = useState(null);\n  const [uploadError, setUploadError] = useState('');\n\n  // Refs\n  const fileInputRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  const abortControllerRef = useRef(null);\n  const responseBuffer = useRef('');\n  const updateTimeoutRef = useRef(null);\n\n  // Add health check state\n  const [lastHealthCheck, setLastHealthCheck] = useState(() => {\n    return parseInt(localStorage.getItem('lastHealthCheck') || '0');\n  });\n\n  // Add loading state for model switching\n  const [isModelSwitching, setIsModelSwitching] = useState(false);\n\n  // Add model status tracking\n  const [modelStatus, setModelStatus] = useState({});\n  const lastNetworkCheck = useRef(0);\n  const networkCheckInterval = 60000; // 1 minute in milliseconds\n\n  // Cache models list with a longer interval\n  const [cachedModels, setCachedModels] = useState([]);\n  const modelListInterval = 60000; // 1 minute\n  const lastModelListCheck = useRef(0);\n\n  // Move handleModelChange definition before its usage\n  const handleModelChange = useCallback(async (newModelId) => {\n    if (selectedModel === newModelId || isModelSwitching) return;\n    \n    setIsModelSwitching(true);\n    try {\n      // Only unload previous model if it's different\n      if (selectedModel && selectedModel !== newModelId) {\n        await unloadModel(selectedModel);\n      }\n      setSelectedModel(newModelId);\n      localStorage.setItem(`selectedModel-${position}`, newModelId);\n    } finally {\n      setIsModelSwitching(false);\n    }\n  }, [selectedModel, unloadModel, position, isModelSwitching]);\n\n  // Replace models prop usage with cached models\n  useEffect(() => {\n    const fetchModels = async () => {\n      const now = Date.now();\n      if (now - lastModelListCheck.current < modelListInterval) {\n        return; // Use cached models if checked recently\n      }\n\n      try {\n        const response = await fetch(`${serverUrl}/v1/models`, {\n          method: 'GET',\n          headers: { 'Cache-Control': 'no-cache' }\n        });\n        \n        if (response.ok) {\n          const data = await response.json();\n          setCachedModels(data.data || []);\n          lastModelListCheck.current = now;\n        }\n      } catch (error) {\n        console.warn('Failed to fetch models:', error);\n      }\n    };\n\n    fetchModels();\n  }, [serverUrl]);\n\n  // Update model selection logic to use cached models\n  useEffect(() => {\n    if (cachedModels.length > 0 && !selectedModel) {\n      const savedModel = localStorage.getItem(`selectedModel-${position}`);\n      \n      // Only use saved model if it exists in current available models\n      if (savedModel && cachedModels.some(m => m.id === savedModel)) {\n        handleModelChange(savedModel);\n      } else {\n        // If no saved model or it's not available, select the first available model\n        handleModelChange(cachedModels[0].id);\n      }\n    }\n  }, [cachedModels, selectedModel, handleModelChange, position]);\n\n  // Modify unloadModel to prevent duplicate calls\n  const unloadModel = useCallback(async (modelId) => {\n    if (!modelId || isModelSwitching) return;\n    \n    try {\n      await fetch(`${serverUrl}/v1/model/unload`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          model: modelId\n        })\n      });\n    } catch (error) {\n      console.warn('Failed to unload model:', error);\n    }\n  }, [serverUrl, isModelSwitching]);\n\n  // Modify health check to use a lightweight endpoint\n  const checkServerHealth = useCallback(async () => {\n    const now = Date.now();\n    if (now - lastNetworkCheck.current < networkCheckInterval) {\n      return true; // Return true if we checked recently\n    }\n\n    try {\n      const response = await fetch(`${serverUrl}/health`, {\n        method: 'HEAD',\n        signal: AbortSignal.timeout(5000)\n      });\n      \n      if (response.ok) {\n        lastNetworkCheck.current = now;\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.warn('Health check failed:', error);\n      return false;\n    }\n  }, [serverUrl]);\n\n  // Update conversation messages\n  const updateConversationMessages = useCallback((newMessages) => {\n    setConversations(prev => prev.map(conv => \n      conv.id === currentConversationId\n        ? { ...conv, messages: newMessages }\n        : conv\n    ));\n  }, [currentConversationId]);\n\n  // Move cleanupConversation before handleConversationChange\n  const cleanupConversation = useCallback((conversationId) => {\n    // Abort any ongoing requests\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n    }\n\n    // Clear streaming responses\n    setStreamingResponses(prev => ({\n      ...prev,\n      [position]: ''\n    }));\n\n    // Clear thinking state\n    setThinking(prev => ({\n      ...prev,\n      [position]: false\n    }));\n\n    // Clear response buffer\n    responseBuffer.current = '';\n\n    // Clear any pending timeouts\n    if (updateTimeoutRef.current) {\n      clearTimeout(updateTimeoutRef.current);\n      updateTimeoutRef.current = null;\n    }\n  }, [position, setStreamingResponses, setThinking]);\n\n  // Handle conversation switch\n  const handleConversationChange = useCallback((newId) => {\n    if (!conversations.some(conv => conv.id === newId)) {\n      console.warn('Invalid conversation ID, selecting first available conversation');\n      newId = conversations[0]?.id || Date.now().toString();\n    }\n    \n    // Clean up the current conversation before switching\n    cleanupConversation(currentConversationId);\n    setCurrentConversationId(newId);\n  }, [conversations, currentConversationId, cleanupConversation]);\n\n  // Optimize streaming updates\n  const updateStreamingResponse = useCallback((newContent) => {\n    responseBuffer.current = newContent;\n    \n    if (updateTimeoutRef.current) {\n      clearTimeout(updateTimeoutRef.current);\n    }\n\n    updateTimeoutRef.current = setTimeout(() => {\n      setStreamingResponses(prev => ({\n        ...prev,\n        [position]: responseBuffer.current\n      }));\n    }, 1500); // 1.5 second debounce\n  }, [position, setStreamingResponses]);\n\n  // Optimize chat completion request\n  const handleSendMessage = async () => {\n    if (!inputValue.trim() || !selectedModel || isModelSwitching) return;\n\n    // Only check server health once per minute\n    const isServerHealthy = await checkServerHealth();\n    if (!isServerHealthy) {\n      const errorMessage = 'Cannot connect to server. Please check that LM Studio is running.';\n      updateConversationMessages([\n        ...currentConversation.messages,\n        {\n          content: errorMessage,\n          timestamp: new Date().toISOString(),\n          role: 'error',\n        }\n      ]);\n      return;\n    }\n\n    setStreamingResponses(prev => ({ ...prev, [position]: '' }));\n    responseBuffer.current = '';\n    \n    const newMessage = {\n      content: inputValue,\n      timestamp: new Date().toISOString(),\n      role: 'user',\n    };\n\n    const updatedMessages = [...currentConversation.messages, newMessage];\n    updateConversationMessages(updatedMessages);\n    setInputValue('');\n    setThinking(prev => ({ ...prev, [position]: true }));\n\n    try {\n      abortControllerRef.current = new AbortController();\n      const timeoutId = setTimeout(() => {\n        if (abortControllerRef.current) {\n          abortControllerRef.current.abort();\n        }\n      }, 180000);\n\n      const response = await fetch(`${serverUrl}/v1/chat/completions`, {\n        method: 'POST',\n        signal: abortControllerRef.current.signal,\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          model: selectedModel,\n          messages: updatedMessages.map(msg => ({\n            role: msg.role === 'error' ? 'assistant' : msg.role,\n            content: msg.content\n          })),\n          stream: true,\n          temperature: 0.7,\n          max_tokens: 2000,\n          options: {\n            load_model_only_when_needed: true,\n            unload_model_after_completion: false,\n            skip_embedding_model: true,\n            skip_model_load_test: true, // Skip test loading\n            no_auto_model_selection: true // Prevent automatic model selection\n          }\n        })\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        throw new Error(`Server returned ${response.status}: ${await response.text()}`);\n      }\n\n      if (response.body) {\n        const reader = response.body.getReader();\n        responseBuffer.current = '';\n        \n        try {\n          const responseText = await processStreamingResponse(reader);\n          \n          if (responseText) {\n            const updatedMessagesWithResponse = [...updatedMessages, {\n              content: responseText,\n              timestamp: new Date().toISOString(),\n              role: 'assistant',\n            }];\n            updateConversationMessages(updatedMessagesWithResponse);\n          }\n        } finally {\n          if (updateTimeoutRef.current) {\n            clearTimeout(updateTimeoutRef.current);\n            updateTimeoutRef.current = null;\n          }\n\n          setStreamingResponses(prev => ({ ...prev, [position]: '' }));\n          setThinking(prev => ({ ...prev, [position]: false }));\n          responseBuffer.current = '';\n          abortControllerRef.current = null;\n        }\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      let errorMessage = 'Unable to get response from LM Studio. ';\n      \n      try {\n        // Try to parse the error response\n        const errorData = error.message.includes('{') ? \n          JSON.parse(error.message.substring(error.message.indexOf('{'))) : null;\n        \n        if (errorData?.error?.message) {\n          if (errorData.error.message.includes('Failed to load model')) {\n            errorMessage = `Model loading failed. Please ensure:\\n` +\n              `1. The model file exists and is not corrupted\\n` +\n              `2. You have sufficient RAM available\\n` +\n              `3. Try restarting LM Studio\\n\\n` +\n              `Technical details: ${errorData.error.message}`;\n          } else {\n            errorMessage += errorData.error.message;\n          }\n        } else if (error.name === 'AbortError') {\n          errorMessage += 'Request timed out. The model might be too slow or not responding.';\n        } else if (error.message === 'Failed to fetch') {\n          errorMessage += `Please check that:\\n1. LM Studio is still running\\n2. Local Server is active\\n3. Server address (${serverUrl}) is correct\\n4. Your internet connection is stable`;\n        } else {\n          errorMessage += error.message;\n        }\n      } catch (parseError) {\n        // If we can't parse the error, just use the original error message\n        errorMessage += error.message;\n      }\n      \n      updateConversationMessages([\n        ...updatedMessages,\n        {\n          content: errorMessage,\n          timestamp: new Date().toISOString(),\n          role: 'error',\n        },\n      ]);\n      setThinking(prev => ({ ...prev, [position]: false }));\n    }\n  };\n\n  useEffect(() => {\n    localStorage.setItem(`conversations-${position}`, JSON.stringify(conversations));\n  }, [conversations, position]);\n\n  const scrollToBottom = useCallback(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, []);\n\n  useEffect(() => {\n    const scrollTimer = setTimeout(() => {\n      scrollToBottom();\n    }, 1000); // Delay scroll to 1 second\n\n    return () => clearTimeout(scrollTimer);\n  }, [currentConversation.messages, streamingResponse, scrollToBottom]);\n\n  useEffect(() => {\n    setStreamingResponses(prev => ({\n      ...prev,\n      [position]: ''\n    }));\n  }, [currentConversationId, position, setStreamingResponses]);\n\n  const handleClearChat = useCallback(() => {\n    updateConversationMessages([]); // Clear messages in current conversation\n    setStreamingResponses(prev => ({\n      ...prev,\n      [position]: ''\n    }));\n    setThinking(prev => ({\n      ...prev,\n      [position]: false\n    }));\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n    }\n  }, [position, setStreamingResponses, setThinking, updateConversationMessages]);\n\n  const handleMenuAction = useCallback((action) => {\n    switch (action) {\n      case 'new':\n        startNewConversation();\n        break;\n      case 'clear':\n        handleClearChat();\n        break;\n      case 'delete':\n        // Clean up the conversation before deleting\n        cleanupConversation(currentConversationId);\n        \n        setConversations(prev => {\n          const updatedConversations = prev.filter(conv => conv.id !== currentConversationId);\n          if (updatedConversations.length === 0) {\n            const newId = Date.now().toString();\n            const newConversation = {\n              id: newId,\n              name: 'New Conversation',\n              messages: [],\n              timestamp: new Date().toISOString()\n            };\n            return [newConversation];\n          }\n          // Switch to the first conversation in the list\n          setCurrentConversationId(updatedConversations[0].id);\n          return updatedConversations;\n        });\n        break;\n      default:\n        break;\n    }\n    setMenuAnchor(null);\n  }, [currentConversationId, handleClearChat, startNewConversation, cleanupConversation]);\n\n  const handleStopResponse = () => {\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n      setThinking(prev => ({ ...prev, [position]: false }));\n      setStreamingResponses(prev => ({ ...prev, [position]: '' }));\n    }\n  };\n\n  const updateConversationName = (id, firstMessage) => {\n    if (!firstMessage) return;\n    \n    // Extract first ~30 characters of the first message for the conversation name\n    const name = firstMessage.content.length > 30 \n      ? firstMessage.content.substring(0, 30) + '...'\n      : firstMessage.content;\n\n    setConversations(prev => \n      prev.map(conv => \n        conv.id === id \n          ? { ...conv, name } \n          : conv\n      )\n    );\n  };\n\n  // Batch updates for message list scrolling with longer delay\n  useEffect(() => {\n    const scrollTimer = setTimeout(() => {\n      scrollToBottom();\n    }, 1000); // Delay scroll to 1 second\n\n    return () => clearTimeout(scrollTimer);\n  }, [currentConversation.messages, streamingResponse, scrollToBottom]);\n\n  // Add rate limiting for streaming updates\n  const processStreamingChunk = useCallback((chunk) => {\n    const lines = chunk.split('\\n');\n    let accumulatedContent = '';\n\n    for (const line of lines) {\n      if (!line.trim() || line.includes('[DONE]')) continue;\n\n      try {\n        const jsonStr = line.replace(/^data: /, '');\n        const data = JSON.parse(jsonStr);\n\n        if (data.choices && data.choices[0]?.delta?.content) {\n          accumulatedContent += data.choices[0].delta.content;\n        }\n      } catch (e) {\n        console.warn('Error parsing chunk:', e);\n        continue;\n      }\n    }\n\n    return accumulatedContent;\n  }, []);\n\n  // Clean up timeouts on unmount\n  useEffect(() => {\n    return () => {\n      if (updateTimeoutRef.current) {\n        clearTimeout(updateTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  const handleKeyPress = (event) => {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      event.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const processStreamingResponse = async (reader, responseText = '', maxIterations = 1000) => {\n    let iterations = 0;\n    let accumulatedContent = '';\n    let lastUpdateTime = Date.now();\n    const updateInterval = 1500; // Update every 1.5 seconds\n\n    try {\n      while (iterations < maxIterations) {\n        iterations++;\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        const chunk = new TextDecoder().decode(value);\n        const newContent = processStreamingChunk(chunk);\n        responseText += newContent;\n        accumulatedContent += newContent;\n\n        // Only update UI if enough time has passed\n        if (Date.now() - lastUpdateTime >= updateInterval) {\n          updateStreamingResponse(accumulatedContent);\n          accumulatedContent = '';\n          lastUpdateTime = Date.now();\n        }\n      }\n\n      // Final update for any remaining content\n      if (accumulatedContent) {\n        updateStreamingResponse(accumulatedContent);\n      }\n\n      return responseText;\n    } catch (error) {\n      console.error('Error processing stream:', error);\n      throw error;\n    }\n  };\n\n  const handleEmojiClick = (emojiData) => {\n    const emoji = emojiData.emoji;\n    const cursorPosition = document.querySelector('textarea').selectionStart;\n    const updatedText = \n      inputValue.slice(0, cursorPosition) + \n      emoji + \n      inputValue.slice(cursorPosition);\n    setInputValue(updatedText);\n    setEmojiAnchor(null);\n  };\n\n  const handleFileUpload = async (event) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Reset file input\n    event.target.value = '';\n\n    // Check file size (limit to 10MB)\n    if (file.size > 10 * 1024 * 1024) {\n      setUploadError('File size must be less than 10MB');\n      return;\n    }\n\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('model', selectedModel);\n\n      setThinking(prev => ({ ...prev, [position]: true }));\n\n      const response = await fetch(`${serverUrl}/v1/files`, {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error(`Upload failed: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      \n      // Add file message to chat\n      updateConversationMessages([\n        ...currentConversation.messages,\n        {\n          content: `📎 Uploaded file: ${file.name}`,\n          timestamp: new Date().toISOString(),\n          role: 'user',\n          fileId: data.id,\n        },\n      ]);\n\n    } catch (error) {\n      console.error('Upload error:', error);\n      setUploadError(error.message);\n      updateConversationMessages([\n        ...currentConversation.messages,\n        {\n          content: `Failed to upload file: ${error.message}`,\n          timestamp: new Date().toISOString(),\n          role: 'error',\n        },\n      ]);\n    } finally {\n      setThinking(prev => ({ ...prev, [position]: false }));\n    }\n  };\n\n  const supportsFileUpload = () => {\n    if (!selectedModel || !models.length) return false;\n    const currentModel = models.find(m => m.id === selectedModel);\n    const modelName = currentModel?.name?.toLowerCase() || '';\n    \n    // Enable file uploads for both deepseek and qwen models\n    if (modelName.includes('deepseek') || modelName.includes('qwen')) {\n      return true;\n    }\n    // Fallback to checking capabilities if model has them defined\n    return currentModel?.capabilities?.includes('file_upload') || false;\n  };\n\n  const getModelLetter = (modelName) => {\n    if (!modelName) return 'A';\n    return modelName.charAt(0).toUpperCase();\n  };\n\n  const getModelColor = (modelName) => {\n    if (!modelName) return 'primary.main';\n    const name = modelName.trim().toLowerCase();\n    \n    // Use a consistent color scheme based on model name\n    const colors = {\n      hermes: '#00BFA5',    // Teal\n      nomic: '#4A90E2',     // Blue\n      llama: '#2E7D32',     // Green\n      mistral: '#ED6C02',   // Orange\n      openchat: '#1976D2',  // Light blue\n      qwen: '#9C27B0',      // Purple\n      gemma: '#FF4081',     // Pink\n      default: '#757575'    // Grey\n    };\n\n    // Find the first matching model name in the colors object\n    const modelType = Object.keys(colors).find(key => name.includes(key));\n    return modelType ? colors[modelType] : colors.default;\n  };\n\n  const getModelImage = (modelName) => {\n    if (!modelName) return null;\n    const name = modelName.trim().toLowerCase();\n    \n    // Map of model names to their image files\n    const modelImages = {\n      hermes: './Images/Hermes.jpg',\n      nomic: './Images/Nomic.png',\n      qwen: './Images/Qwen2.png',\n      starcoder: './Images/StarCoder.jpg',\n      gemma: './Images/Gemma.png'\n    };\n\n    // Find the first matching model name in the images object\n    const modelType = Object.keys(modelImages).find(key => name.includes(key));\n    return modelType ? modelImages[modelType] : null;\n  };\n\n  // Update MessageComponent to include menu\n  const MessageComponent = React.memo(({ message, align }) => {\n    const [menuAnchor, setMenuAnchor] = useState(null);\n    const [isDragging, setIsDragging] = useState(false);\n\n    const handleMessageClick = (event) => {\n      if (!isDragging) {  // Only show menu if not dragging\n        event.preventDefault();\n        setMenuAnchor(event.currentTarget);\n      }\n    };\n\n    const handleDragStart = (e) => {\n      setIsDragging(true);\n      e.dataTransfer.setData('text/plain', message.content);\n      e.dataTransfer.effectAllowed = 'copy';\n      // Add a class to style the dragged element\n      e.currentTarget.classList.add('dragging');\n    };\n\n    const handleDragEnd = (e) => {\n      setIsDragging(false);\n      // Remove the dragging class\n      e.currentTarget.classList.remove('dragging');\n      // Reset after a short delay to allow click events if no drag occurred\n      setTimeout(() => setIsDragging(false), 100);\n    };\n\n    const handleAddToNotebook = () => {\n      const event = new CustomEvent('addToNotebook', {\n        detail: {\n          content: message.content,\n          timestamp: message.timestamp,\n          role: message.role\n        }\n      });\n      window.dispatchEvent(event);\n      setMenuAnchor(null);\n    };\n\n    return (\n      <Message \n        align={align}\n        draggable={true}\n        onDragStart={handleDragStart}\n        onDragEnd={handleDragEnd}\n        onClick={handleMessageClick}\n        sx={{ \n          cursor: isDragging ? 'grabbing' : 'grab',\n          '&:hover': {\n            '& .message-content': {\n              boxShadow: 2,\n            }\n          },\n          '&.dragging .message-content': {\n            opacity: 0.7,\n            boxShadow: 4,\n          }\n        }}\n      >\n        {message.role === 'error' ? (\n          <ErrorMessage>\n            <CircularProgress size={16} color=\"error\" />\n            <Typography variant=\"body2\">{message.content}</Typography>\n          </ErrorMessage>\n        ) : (\n          <>\n            <MessageContent \n              align={align} \n              className=\"message-content\"\n              sx={{ \n                transition: 'all 0.2s ease',\n              }}\n            >\n              <ReactMarkdown>{message.content}</ReactMarkdown>\n            </MessageContent>\n            <Typography \n              variant=\"caption\" \n              color=\"textSecondary\" \n              sx={{ \n                mt: 0.5,\n                opacity: 0.7,\n                fontSize: '0.7rem',\n              }}\n            >\n              {new Date(message.timestamp).toLocaleTimeString()}\n            </Typography>\n          </>\n        )}\n        <Menu\n          anchorEl={menuAnchor}\n          open={Boolean(menuAnchor)}\n          onClose={() => setMenuAnchor(null)}\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: align === 'right' ? 'right' : 'left',\n          }}\n          transformOrigin={{\n            vertical: 'top',\n            horizontal: align === 'right' ? 'right' : 'left',\n          }}\n        >\n          <MenuItem onClick={handleAddToNotebook}>\n            <NoteAddIcon sx={{ mr: 1, fontSize: 20 }} />\n            Add to Notebook\n          </MenuItem>\n        </Menu>\n      </Message>\n    );\n  });\n\n  // Memoize streaming response component\n  const StreamingResponseComponent = React.memo(({ content }) => (\n    content ? (\n      <Message align=\"left\">\n        <MessageContent \n          align=\"left\"\n          sx={{ \n            backgroundColor: 'rgba(0, 0, 0, 0.2)', // Slightly darker background to distinguish from final responses\n            minWidth: '200px',\n            width: 'fit-content',\n            maxWidth: '70%'\n          }}\n        >\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n            <Typography variant=\"body1\">\n              {content}\n            </Typography>\n          </Box>\n        </MessageContent>\n      </Message>\n    ) : null\n  ));\n\n  // Update ThinkingIndicator to be more precise\n  const ThinkingIndicator = React.memo(({ isThinking, onStop }) => (\n    isThinking && !streamingResponse && !currentConversation.messages.find(m => m.role === 'error') ? (\n      <Message align=\"left\">\n        <MessageContent \n          align=\"left\" \n          sx={{ \n            backgroundColor: 'rgba(0, 0, 0, 0.2)',\n            minWidth: '200px',\n            width: 'fit-content',\n            maxWidth: '70%',\n            position: 'relative',\n            padding: '12px 16px',\n            '& pre': {\n              margin: 0,\n              padding: 0,\n              backgroundColor: 'transparent',\n              fontFamily: 'inherit',\n              whiteSpace: 'pre-wrap',\n              fontSize: '0.875rem',\n            }\n          }}\n        >\n          <Box sx={{ \n            display: 'flex', \n            flexDirection: 'column',\n            gap: 1,\n          }}>\n            <pre>{\"<think>\"}</pre>\n            <pre style={{ marginLeft: '8px' }}>\n              {\"Processing request and generating response...\"}\n            </pre>\n            <pre>{\"</think>\"}</pre>\n            <Box sx={{ \n              display: 'flex', \n              alignItems: 'center', \n              gap: 1,\n              mt: 1,\n              pt: 1,\n              borderTop: '1px solid rgba(255, 255, 255, 0.1)',\n            }}>\n              <CircularProgress size={16} />\n              <Typography>Thinking...</Typography>\n              <IconButton \n                size=\"small\" \n                onClick={onStop}\n                sx={{ \n                  ml: 'auto',\n                  bgcolor: 'error.main',\n                  color: 'error.contrastText',\n                  '&:hover': {\n                    bgcolor: 'error.dark',\n                  },\n                  width: 24,\n                  height: 24,\n                }}\n              >\n                <StopIcon sx={{ fontSize: 16 }} />\n              </IconButton>\n            </Box>\n          </Box>\n        </MessageContent>\n      </Message>\n    ) : null\n  ));\n\n  // Update model status when a model is successfully used\n  const updateModelStatus = useCallback((modelId, isAvailable) => {\n    setModelStatus(prev => ({\n      ...prev,\n      [modelId]: {\n        available: isAvailable,\n        lastChecked: Date.now()\n      }\n    }));\n  }, []);\n\n  // Check if we need to verify model availability\n  const shouldCheckModel = useCallback((modelId) => {\n    const status = modelStatus[modelId];\n    if (!status) return true;\n    \n    const now = Date.now();\n    return now - status.lastChecked > networkCheckInterval;\n  }, [modelStatus]);\n\n  return (\n    <StyledPaper elevation={3}>\n      <ChatHeader>\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n          <Tooltip title={selectedModel ? (models.find(m => m.id === selectedModel)?.name || 'Select a model') : 'Select a model'}>\n            <Avatar sx={{ \n              bgcolor: selectedModel ? \n                getModelColor(models.find(m => m.id === selectedModel)?.name || '') :\n                'primary.main',\n              transition: 'all 0.3s ease',\n              fontWeight: 600,\n              width: 40,\n              height: 40,\n              cursor: 'help',\n              '& img': {\n                width: '100%',\n                height: '100%',\n                objectFit: 'cover',\n              }\n            }}>\n              {selectedModel ? (\n                (() => {\n                  const modelName = models.find(m => m.id === selectedModel)?.name || '';\n                  const imagePath = getModelImage(modelName);\n                  return imagePath ? (\n                    <img \n                      src={imagePath} \n                      alt={modelName}\n                      style={{\n                        width: '100%',\n                        height: '100%',\n                        objectFit: 'cover',\n                      }}\n                    />\n                  ) : (\n                    getModelLetter(modelName)\n                  );\n                })()\n              ) : 'A'}\n            </Avatar>\n          </Tooltip>\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n            <ConversationSelector size=\"small\">\n              <Select\n                value={currentConversationId}\n                onChange={(e) => handleConversationChange(e.target.value)}\n                variant=\"standard\"\n                sx={{ fontSize: '0.875rem' }}\n              >\n                {conversations.map((conv) => (\n                  <MenuItem key={conv.id} value={conv.id}>\n                    {conv.name || 'New Conversation'}\n                  </MenuItem>\n                ))}\n              </Select>\n            </ConversationSelector>\n            {models.length > 0 ? (\n              <ModelSelector size=\"small\" sx={{ minWidth: 200 }}>\n                <Select\n                  value={selectedModel || ''}\n                  onChange={(e) => handleModelChange(e.target.value)}\n                  variant=\"standard\"\n                  displayEmpty\n                >\n                  {models.map((model) => (\n                    <MenuItem key={model.id} value={model.id}>\n                      {model.name}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </ModelSelector>\n            ) : (\n              <Typography variant=\"caption\" color=\"error\">\n                No AI models available\n              </Typography>\n            )}\n          </Box>\n        </Box>\n        <Box sx={{ display: 'flex', gap: 1 }}>\n          <IconButton \n            onClick={startNewConversation}\n            title=\"New Conversation\"\n          >\n            <AddIcon />\n          </IconButton>\n          <IconButton onClick={(e) => setMenuAnchor(e.currentTarget)}>\n            <MoreIcon />\n          </IconButton>\n        </Box>\n      </ChatHeader>\n\n      <MessageList>\n        {currentConversation.messages.map((msg, index) => (\n          <MessageComponent\n            key={`${msg.timestamp}-${index}`}\n            message={msg}\n            align={msg.role === 'user' ? 'right' : 'left'}\n          />\n        ))}\n        <StreamingResponseComponent content={streamingResponse} />\n        <ThinkingIndicator \n          isThinking={isThinking} \n          onStop={handleStopResponse}\n        />\n        <div ref={messagesEndRef} />\n      </MessageList>\n\n      <ChatFooter>\n        <InputContainer\n          onDragOver={(e) => {\n            e.preventDefault();\n            e.currentTarget.style.backgroundColor = 'rgba(255, 255, 255, 0.1)';\n          }}\n          onDragLeave={(e) => {\n            e.preventDefault();\n            e.currentTarget.style.backgroundColor = '';\n          }}\n          onDrop={(e) => {\n            e.preventDefault();\n            e.currentTarget.style.backgroundColor = '';\n            const text = e.dataTransfer.getData('text/plain');\n            setInputValue(prev => {\n              const cursorPosition = document.querySelector('textarea')?.selectionStart || prev.length;\n              return prev.slice(0, cursorPosition) + text + prev.slice(cursorPosition);\n            });\n          }}\n          sx={{\n            transition: 'background-color 0.2s ease',\n            '&:hover': {\n              '&[data-dragging=\"true\"]': {\n                backgroundColor: 'rgba(255, 255, 255, 0.1)',\n              }\n            }\n          }}\n        >\n          <IconButton \n            size=\"small\" \n            onClick={(e) => setEmojiAnchor(e.currentTarget)}\n          >\n            <EmojiIcon />\n          </IconButton>\n          <Popover\n            open={Boolean(emojiAnchor)}\n            anchorEl={emojiAnchor}\n            onClose={() => setEmojiAnchor(null)}\n            anchorOrigin={{\n              vertical: 'top',\n              horizontal: 'left',\n            }}\n            transformOrigin={{\n              vertical: 'bottom',\n              horizontal: 'left',\n            }}\n          >\n            <Box sx={{ \n              '.EmojiPickerReact': {\n                '--epr-bg-color': 'rgba(18, 18, 18, 0.95)',\n                '--epr-category-label-bg-color': 'rgba(18, 18, 18, 0.95)',\n                '--epr-hover-bg-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-focus-bg-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-highlight-color': 'rgba(255, 255, 255, 0.2)',\n                '--epr-search-border-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-border-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-text-color': '#fff',\n                border: 'none',\n                boxShadow: '0 4px 20px rgba(0, 0, 0, 0.3)',\n              }\n            }}>\n              <EmojiPicker\n                onEmojiClick={handleEmojiClick}\n                autoFocusSearch={false}\n                theme=\"dark\"\n                searchPlaceHolder=\"Search emojis...\"\n                width={320}\n                height={400}\n                previewConfig={{\n                  showPreview: false\n                }}\n              />\n            </Box>\n          </Popover>\n          <input\n            type=\"file\"\n            ref={fileInputRef}\n            style={{ display: 'none' }}\n            onChange={handleFileUpload}\n            accept=\"image/*,.pdf,.txt,.doc,.docx\"\n          />\n          <Tooltip title={\n            !selectedModel ? \"Please select a model first\" :\n            !supportsFileUpload() ? \"This model doesn't support file uploads\" :\n            \"Upload a file\"\n          }>\n            <span>\n              <IconButton \n                size=\"small\"\n                disabled={!supportsFileUpload()}\n                onClick={() => fileInputRef.current?.click()}\n              >\n                <ImageIcon sx={{ \n                  color: theme => !supportsFileUpload() ? \n                    theme.palette.action.disabled : \n                    'inherit'\n                }} />\n              </IconButton>\n            </span>\n          </Tooltip>\n          <TextField\n            fullWidth\n            multiline\n            maxRows={4}\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyPress={handleKeyPress}\n            placeholder=\"Type your message...\"\n            variant=\"standard\"\n            InputProps={{\n              disableUnderline: true,\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    onClick={handleSendMessage}\n                    disabled={!inputValue.trim() || !selectedModel}\n                    color=\"primary\"\n                  >\n                    <SendIcon />\n                  </IconButton>\n                </InputAdornment>\n              ),\n            }}\n          />\n        </InputContainer>\n        {uploadError && (\n          <Typography \n            variant=\"caption\" \n            color=\"error\" \n            sx={{ mt: 1, display: 'block' }}\n            onClick={() => setUploadError('')}\n          >\n            {uploadError}\n          </Typography>\n        )}\n      </ChatFooter>\n\n      <Menu\n        anchorEl={menuAnchor}\n        open={Boolean(menuAnchor)}\n        onClose={() => setMenuAnchor(null)}\n      >\n        <MenuItem onClick={() => handleMenuAction('new')}>\n          New Conversation\n        </MenuItem>\n        <MenuItem onClick={() => handleMenuAction('clear')}>\n          Clear Current Conversation\n        </MenuItem>\n        <MenuItem onClick={() => handleMenuAction('delete')}>\n          Delete Current Conversation\n        </MenuItem>\n      </Menu>\n    </StyledPaper>\n  );\n}\n\nexport default ChatWindow; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}