{"ast":null,"code":"var _jsxFileName = \"E:\\\\Cline\\\\allm\\\\frontend\\\\src\\\\components\\\\ChatWindow.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useCallback, useMemo, memo } from 'react';\nimport { Box, Paper, TextField, IconButton, Typography, Avatar, Menu, MenuItem, Select, FormControl, CircularProgress, InputAdornment, Popover, Tooltip, ClickAwayListener, Divider, Button } from '@mui/material';\nimport { Send as SendIcon, MoreVert as MoreIcon, VideoCall as VideoIcon, OpenInFull as ExpandIcon, Image as ImageIcon, EmojiEmotions as EmojiIcon, Stop as StopIcon, Add as AddIcon, NoteAdd as NoteAddIcon, Psychology as BrainstormIcon, Edit as EditIcon, Check as CheckIcon, Close as CloseIcon } from '@mui/icons-material';\nimport ReactMarkdown from 'react-markdown';\nimport { styled } from '@mui/material/styles';\nimport EmojiPicker from 'emoji-picker-react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledPaper = styled(Paper)(({\n  theme\n}) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  height: '100%',\n  flex: 1,\n  overflow: 'hidden',\n  backgroundColor: theme.palette.background.paper,\n  borderRadius: theme.spacing(3)\n}));\n_c = StyledPaper;\nconst ChatHeader = styled(Box)(({\n  theme\n}) => ({\n  padding: theme.spacing(2),\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  borderBottom: `1px solid ${theme.palette.divider}`\n}));\n_c2 = ChatHeader;\nconst MessageList = styled(Box)(({\n  theme\n}) => ({\n  flexGrow: 1,\n  overflow: 'auto',\n  padding: theme.spacing(2),\n  backgroundColor: theme.palette.background.default,\n  '&::-webkit-scrollbar': {\n    width: '4px'\n  },\n  '&::-webkit-scrollbar-track': {\n    background: 'transparent'\n  },\n  '&::-webkit-scrollbar-thumb': {\n    background: theme.palette.grey[600],\n    borderRadius: '4px'\n  }\n}));\n_c3 = MessageList;\nconst Message = styled(Box)(({\n  theme,\n  align\n}) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: align === 'right' ? 'flex-end' : 'flex-start',\n  marginBottom: theme.spacing(2)\n}));\n_c4 = Message;\nconst MessageContent = styled(Box)(({\n  theme,\n  align\n}) => ({\n  maxWidth: '70%',\n  padding: theme.spacing(1.5),\n  borderRadius: theme.spacing(2),\n  backgroundColor: align === 'right' ? theme.palette.primary.main : theme.palette.background.paper,\n  color: align === 'right' ? theme.palette.primary.contrastText : theme.palette.text.primary,\n  boxShadow: theme.shadows[1],\n  '& p': {\n    margin: 0\n  },\n  '& pre': {\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(1),\n    borderRadius: theme.spacing(1),\n    overflow: 'auto',\n    margin: theme.spacing(1, 0),\n    fontFamily: 'monospace'\n  },\n  '& code': {\n    fontFamily: 'monospace',\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(0.25, 0.5),\n    borderRadius: theme.spacing(0.5)\n  },\n  '& ul, & ol': {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    paddingLeft: theme.spacing(3)\n  },\n  '& li': {\n    marginBottom: theme.spacing(0.5)\n  },\n  '& blockquote': {\n    borderLeft: `3px solid ${theme.palette.divider}`,\n    margin: theme.spacing(1, 0),\n    paddingLeft: theme.spacing(2),\n    color: theme.palette.text.secondary\n  }\n}));\n_c5 = MessageContent;\nconst ChatFooter = styled(Box)(({\n  theme\n}) => ({\n  padding: theme.spacing(2),\n  borderTop: `1px solid ${theme.palette.divider}`,\n  backgroundColor: theme.palette.background.paper\n}));\n_c6 = ChatFooter;\nconst InputContainer = styled(Box)(({\n  theme\n}) => ({\n  display: 'flex',\n  alignItems: 'center',\n  gap: theme.spacing(1),\n  backgroundColor: theme.palette.background.default,\n  borderRadius: theme.spacing(3),\n  padding: theme.spacing(1)\n}));\n_c7 = InputContainer;\nconst ErrorMessage = styled(Box)(({\n  theme\n}) => ({\n  padding: theme.spacing(1, 2),\n  backgroundColor: theme.palette.error.dark,\n  color: theme.palette.error.contrastText,\n  borderRadius: theme.spacing(1),\n  display: 'flex',\n  alignItems: 'center',\n  gap: theme.spacing(1),\n  marginBottom: theme.spacing(2)\n}));\n_c8 = ErrorMessage;\nconst ModelSelector = styled(FormControl)(({\n  theme\n}) => ({\n  '& .MuiSelect-select': {\n    paddingBottom: 0\n  },\n  '& .MuiInput-underline:before': {\n    borderBottomColor: 'transparent'\n  }\n}));\n_c9 = ModelSelector;\nconst ConversationSelector = styled(FormControl)(({\n  theme\n}) => ({\n  minWidth: 200,\n  '& .MuiSelect-select': {\n    fontSize: '0.875rem'\n  }\n}));\nconst ConversationHeader = styled(Box)(({\n  theme\n}) => ({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  padding: theme.spacing(1, 2),\n  borderBottom: `1px solid ${theme.palette.divider}`,\n  backgroundColor: theme.palette.background.paper\n}));\n_c10 = ConversationHeader;\nconst ConversationName = styled(Box)(({\n  theme\n}) => ({\n  display: 'flex',\n  alignItems: 'center',\n  gap: theme.spacing(1),\n  '& .timestamp-group': {\n    display: 'flex',\n    alignItems: 'center',\n    gap: theme.spacing(1),\n    marginLeft: theme.spacing(2)\n  },\n  '& .timestamp': {\n    color: theme.palette.text.secondary,\n    fontSize: '0.75rem',\n    marginRight: theme.spacing(2)\n  }\n}));\n_c11 = ConversationName;\nconst EditableTitle = styled(Box)(({\n  theme\n}) => ({\n  display: 'flex',\n  alignItems: 'center',\n  gap: theme.spacing(1),\n  '& input': {\n    background: 'none',\n    border: 'none',\n    borderBottom: `1px solid ${theme.palette.primary.main}`,\n    color: theme.palette.text.primary,\n    fontSize: '1rem',\n    padding: theme.spacing(0.5, 1),\n    '&:focus': {\n      outline: 'none'\n    }\n  }\n}));\n_c12 = EditableTitle;\nfunction ChatWindow({\n  position,\n  models,\n  streamingResponse,\n  isThinking,\n  setStreamingResponses,\n  setThinking,\n  serverUrl,\n  otherPanelMessages,\n  onBrainstormMessage,\n  onMessageSubmit,\n  onModelSelect\n}) {\n  _s2();\n  var _s = $RefreshSig$(),\n    _models$find3,\n    _models$find4,\n    _currentConversation$;\n  // Process streaming chunks\n  const processStreamingChunk = useCallback(chunk => {\n    const lines = chunk.split('\\n');\n    let accumulatedContent = '';\n    for (const line of lines) {\n      if (!line.trim() || line.includes('[DONE]')) continue;\n      try {\n        var _data$choices$, _data$choices$$delta;\n        const jsonStr = line.replace(/^data: /, '');\n        const data = JSON.parse(jsonStr);\n        if (data.choices && (_data$choices$ = data.choices[0]) !== null && _data$choices$ !== void 0 && (_data$choices$$delta = _data$choices$.delta) !== null && _data$choices$$delta !== void 0 && _data$choices$$delta.content) {\n          accumulatedContent += data.choices[0].delta.content;\n        }\n      } catch (e) {\n        console.warn('Error parsing chunk:', e);\n        continue;\n      }\n    }\n    return accumulatedContent;\n  }, []);\n  const processStreamingResponse = useCallback(async (reader, responseText = '', maxIterations = 1000) => {\n    let iterations = 0;\n    let accumulatedContent = responseBuffer.current || '';\n    try {\n      while (iterations < maxIterations) {\n        iterations++;\n        const {\n          done,\n          value\n        } = await reader.read();\n        if (done) break;\n        const chunk = new TextDecoder().decode(value);\n        const newContent = processStreamingChunk(chunk);\n        accumulatedContent += newContent;\n        responseText += newContent;\n        setStreamingResponses(prev => ({\n          ...prev,\n          [position]: accumulatedContent\n        }));\n      }\n      return responseText;\n    } catch (error) {\n      console.error('Error processing stream:', error);\n      throw error;\n    }\n  }, [processStreamingChunk, position, setStreamingResponses]);\n\n  // Update initial selectedModel state to use localStorage\n  const [selectedModel, setSelectedModel] = useState(() => {\n    // Don't automatically select a model from localStorage\n    return '';\n  });\n  const [inputValue, setInputValue] = useState('');\n  const [brainstormEnabled, setBrainstormEnabled] = useState(() => {\n    const saved = localStorage.getItem(`brainstorm-enabled-${position}`);\n    return saved ? JSON.parse(saved) : false;\n  });\n  const [brainstormIterations, setBrainstormIterations] = useState(() => {\n    const saved = localStorage.getItem(`brainstorm-iterations-${position}`);\n    return saved ? JSON.parse(saved) : 0; // 0 means no iterations set, -1 means infinite\n  });\n  const [brainstormMenuAnchor, setBrainstormMenuAnchor] = useState(null);\n  const [isEditingName, setIsEditingName] = useState(false);\n  const [editedName, setEditedName] = useState('');\n  const [conversations, setConversations] = useState(() => {\n    const saved = localStorage.getItem(`conversations-${position}`);\n    return saved ? JSON.parse(saved) : [{\n      id: Date.now(),\n      name: 'New Conversation',\n      timestamp: new Date().toISOString(),\n      messages: []\n    }];\n  });\n  const [currentConversationId, setCurrentConversationId] = useState(() => {\n    var _conversations$;\n    return (_conversations$ = conversations[0]) === null || _conversations$ === void 0 ? void 0 : _conversations$.id;\n  });\n  const currentConversation = useMemo(() => {\n    return conversations.find(c => c.id === currentConversationId) || conversations[0];\n  }, [conversations, currentConversationId]);\n\n  // Save conversations to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem(`conversations-${position}`, JSON.stringify(conversations));\n  }, [conversations, position]);\n  const updateConversationMessages = useCallback(newMessages => {\n    setConversations(prev => prev.map(conv => conv.id === currentConversationId ? {\n      ...conv,\n      messages: newMessages\n    } : conv));\n  }, [currentConversationId]);\n  const [menuAnchor, setMenuAnchor] = useState(null);\n  const [emojiAnchor, setEmojiAnchor] = useState(null);\n  const [uploadError, setUploadError] = useState('');\n\n  // Refs\n  const fileInputRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  const abortControllerRef = useRef(null);\n  const responseBuffer = useRef('');\n  const updateTimeoutRef = useRef(null);\n\n  // Add health check state\n  const [lastHealthCheck, setLastHealthCheck] = useState(() => {\n    return parseInt(localStorage.getItem('lastHealthCheck') || '0');\n  });\n\n  // Add health check toggle state\n  const [healthChecksEnabled, setHealthChecksEnabled] = useState(() => {\n    return localStorage.getItem('healthChecksEnabled') !== 'false';\n  });\n\n  // Add loading state for model switching\n  const [isModelSwitching, setIsModelSwitching] = useState(false);\n\n  // Add model status tracking\n  const [modelStatus, setModelStatus] = useState({});\n  const lastNetworkCheck = useRef(0);\n  const networkCheckInterval = 60000; // 1 minute in milliseconds\n\n  // Cache models list with a longer interval\n  const [cachedModels, setCachedModels] = useState([]);\n  const modelListInterval = 60000; // 1 minute\n  const lastModelListCheck = useRef(0);\n\n  // Add state for scroll management\n  const [userHasScrolled, setUserHasScrolled] = useState(false);\n  const messageListRef = useRef(null);\n\n  // Function to check if scrolled to bottom\n  const isScrolledToBottom = useCallback(() => {\n    if (!messageListRef.current) return true;\n    const {\n      scrollHeight,\n      scrollTop,\n      clientHeight\n    } = messageListRef.current;\n    // Consider \"almost\" at bottom (within 100px) as at bottom\n    return scrollHeight - scrollTop - clientHeight < 100;\n  }, []);\n\n  // Handle scroll events\n  const handleScroll = useCallback(e => {\n    // Only set userHasScrolled if the scroll was manual (wheel or drag)\n    if (e.type === 'wheel' || e.type === 'touchmove') {\n      const wasAtBottom = isScrolledToBottom();\n      setUserHasScrolled(!wasAtBottom);\n    }\n  }, [isScrolledToBottom]);\n\n  // Scroll to bottom function\n  const scrollToBottom = useCallback(() => {\n    if (messagesEndRef.current && (!userHasScrolled || isScrolledToBottom())) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [userHasScrolled, isScrolledToBottom]);\n\n  // Update scroll effect\n  useEffect(() => {\n    if (!messageListRef.current) return;\n    const messageList = messageListRef.current;\n    messageList.addEventListener('wheel', handleScroll);\n    messageList.addEventListener('touchmove', handleScroll);\n    return () => {\n      messageList.removeEventListener('wheel', handleScroll);\n      messageList.removeEventListener('touchmove', handleScroll);\n    };\n  }, [handleScroll]);\n\n  // Update auto-scroll effect\n  useEffect(() => {\n    const scrollTimer = setTimeout(() => {\n      scrollToBottom();\n    }, 100);\n    return () => clearTimeout(scrollTimer);\n  }, [currentConversation.messages, streamingResponse, scrollToBottom]);\n\n  // Add model tracking state at the top of component\n  const [loadedModels, setLoadedModels] = useState({});\n\n  // Add model queue state at component level\n  const [modelQueue, setModelQueue] = useState([]);\n  const [isLoadingModel, setIsLoadingModel] = useState(false);\n\n  // Update handleModelChange to only load the model\n  const handleModelChange = useCallback(async modelId => {\n    if (modelId === selectedModel) return;\n    setIsModelSwitching(true);\n    try {\n      // Just load the new model without any special options\n      await fetch(`${serverUrl}/v1/chat/completions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          model: modelId,\n          messages: [{\n            role: 'system',\n            content: 'test'\n          }],\n          stream: false,\n          max_tokens: 1\n        })\n      });\n\n      // Update state and localStorage\n      setSelectedModel(modelId);\n      localStorage.setItem(`selectedModel-${position}`, modelId);\n      onModelSelect === null || onModelSelect === void 0 ? void 0 : onModelSelect(position, modelId);\n    } catch (error) {\n      console.error('Error switching model:', error);\n    } finally {\n      setIsModelSwitching(false);\n    }\n  }, [position, onModelSelect, selectedModel, serverUrl]);\n\n  // Add effect to maintain loaded models\n  useEffect(() => {\n    const reloadModels = async () => {\n      if (isLoadingModel || modelQueue.length === 0) return;\n      setIsLoadingModel(true);\n      try {\n        // Reload all models in the queue to ensure they stay loaded\n        for (const modelId of modelQueue) {\n          await fetch(`${serverUrl}/v1/chat/completions`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              model: modelId,\n              messages: [{\n                role: 'system',\n                content: 'test'\n              }],\n              stream: false,\n              max_tokens: 1,\n              options: {\n                load_model_only_when_needed: false,\n                unload_model_after_completion: false,\n                no_auto_model_selection: true,\n                skip_model_load_test: true\n              }\n            })\n          });\n        }\n      } catch (error) {\n        console.error('Error reloading models:', error);\n      } finally {\n        setIsLoadingModel(false);\n      }\n    };\n    const interval = setInterval(reloadModels, 30000); // Reload models every 30 seconds\n    return () => clearInterval(interval);\n  }, [modelQueue, serverUrl, isLoadingModel]);\n\n  // Update model selection effect to be more conservative\n  useEffect(() => {\n    // Remove auto-selection of model from localStorage\n    if (!selectedModel && cachedModels.length > 0) {\n      // Don't automatically set a model\n      return;\n    }\n  }, [cachedModels, selectedModel, handleModelChange, position]);\n\n  // Update models fetch to respect existing selection\n  useEffect(() => {\n    const fetchModels = async () => {\n      const now = Date.now();\n      if (now - lastModelListCheck.current < modelListInterval) {\n        return; // Use cached models if checked recently\n      }\n      try {\n        const response = await fetch(`${serverUrl}/v1/models`, {\n          method: 'GET',\n          headers: {\n            'Cache-Control': 'no-cache'\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          const newModels = data.data || [];\n          setCachedModels(newModels);\n          lastModelListCheck.current = now;\n\n          // If current selected model is not in the new list, clear it\n          if (selectedModel && !newModels.some(m => m.id === selectedModel)) {\n            setSelectedModel('');\n            localStorage.removeItem(`selectedModel-${position}`);\n          }\n        }\n      } catch (error) {\n        console.warn('Failed to fetch models:', error);\n      }\n    };\n    fetchModels();\n  }, [serverUrl, selectedModel, position]);\n\n  // Update checkServerHealth to respect the toggle\n  const checkServerHealth = useCallback(async () => {\n    // If health checks are disabled, always return true\n    if (!healthChecksEnabled) {\n      return true;\n    }\n    const now = Date.now();\n    if (now - lastNetworkCheck.current < networkCheckInterval) {\n      return true; // Return true if we checked recently\n    }\n    try {\n      const response = await fetch(`${serverUrl}/health`, {\n        method: 'HEAD',\n        signal: AbortSignal.timeout(5000)\n      });\n      if (response.ok) {\n        lastNetworkCheck.current = now;\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.warn('Health check failed:', error);\n      return false;\n    }\n  }, [serverUrl, healthChecksEnabled]);\n\n  // Add effect to save health check preference\n  useEffect(() => {\n    localStorage.setItem('healthChecksEnabled', healthChecksEnabled);\n  }, [healthChecksEnabled]);\n\n  // Move cleanupConversation before handleConversationChange\n  const cleanupConversation = useCallback(conversationId => {\n    // Abort any ongoing requests\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n    }\n\n    // Clear streaming responses\n    setStreamingResponses(prev => ({\n      ...prev,\n      [position]: ''\n    }));\n\n    // Clear thinking state\n    setThinking(prev => ({\n      ...prev,\n      [position]: false\n    }));\n\n    // Clear response buffer\n    responseBuffer.current = '';\n\n    // Clear any pending timeouts\n    if (updateTimeoutRef.current) {\n      clearTimeout(updateTimeoutRef.current);\n      updateTimeoutRef.current = null;\n    }\n  }, [position, setStreamingResponses, setThinking]);\n\n  // Handle conversation switch\n  const handleConversationChange = useCallback(newId => {\n    if (!conversations.some(conv => conv.id === newId)) {\n      var _conversations$2;\n      console.warn('Invalid conversation ID, selecting first available conversation');\n      newId = ((_conversations$2 = conversations[0]) === null || _conversations$2 === void 0 ? void 0 : _conversations$2.id) || Date.now().toString();\n    }\n\n    // Clean up the current conversation before switching\n    cleanupConversation(currentConversationId);\n    setCurrentConversationId(newId);\n  }, [conversations, currentConversationId, cleanupConversation]);\n\n  // Optimize streaming updates\n  const updateStreamingResponse = useCallback(newContent => {\n    responseBuffer.current = newContent;\n    if (updateTimeoutRef.current) {\n      clearTimeout(updateTimeoutRef.current);\n    }\n    updateTimeoutRef.current = setTimeout(() => {\n      setStreamingResponses(prev => ({\n        ...prev,\n        [position]: responseBuffer.current\n      }));\n    }, 1500); // 1.5 second debounce\n  }, [position, setStreamingResponses]);\n\n  // Update handleSendMessage to not include special options\n  const handleSendMessage = useCallback(async () => {\n    if (!inputValue.trim() || !selectedModel || isModelSwitching) return;\n    const message = inputValue.trim();\n    setInputValue('');\n\n    // Add user message to conversation\n    const userMessage = {\n      content: message,\n      timestamp: new Date().toISOString(),\n      role: 'user'\n    };\n    updateConversationMessages([...currentConversation.messages, userMessage]);\n    try {\n      setThinking(prev => ({\n        ...prev,\n        [position]: true\n      }));\n      setStreamingResponses(prev => ({\n        ...prev,\n        [position]: ''\n      }));\n      const response = await fetch(`${serverUrl}/v1/chat/completions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          model: selectedModel,\n          messages: currentConversation.messages.map(msg => ({\n            role: msg.role,\n            content: msg.content\n          })),\n          stream: true\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const reader = response.body.getReader();\n      const result = await processStreamingResponse(reader);\n    } catch (error) {\n      console.error('Error sending message:', error);\n      updateConversationMessages([...currentConversation.messages, {\n        content: `Error: ${error.message}`,\n        timestamp: new Date().toISOString(),\n        role: 'error'\n      }]);\n    } finally {\n      setThinking(prev => ({\n        ...prev,\n        [position]: false\n      }));\n    }\n  }, [inputValue, selectedModel, isModelSwitching, currentConversation.messages, updateConversationMessages, setStreamingResponses, position, serverUrl, processStreamingResponse, setThinking]);\n\n  // Update the brainstorm effect to handle message passing correctly\n  useEffect(() => {\n    var _otherPanelMessage$me;\n    if (!brainstormEnabled || !selectedModel) {\n      console.log(`Panel ${position}: Brainstorm skipped - enabled: ${brainstormEnabled}, model: ${selectedModel}`);\n      return;\n    }\n\n    // Get the latest message from the other panel\n    const otherPanelMessage = otherPanelMessages === null || otherPanelMessages === void 0 ? void 0 : otherPanelMessages[otherPanelMessages.length - 1];\n    if (!otherPanelMessage) {\n      console.log(`Panel ${position}: No messages from other panel`);\n      return;\n    }\n    console.log(`Panel ${position}: Processing message:`, otherPanelMessage);\n\n    // Only process assistant messages that haven't been processed\n    if (otherPanelMessage.role !== 'assistant' || otherPanelMessage.processed === true) {\n      console.log(`Panel ${position}: Message skipped - role: ${otherPanelMessage.role}, processed: ${otherPanelMessage.processed}`);\n      return;\n    }\n\n    // Don't process if we're still thinking about the previous message\n    if (isThinking) {\n      console.log(`Panel ${position}: Waiting for previous message to complete`);\n      return;\n    }\n    const currentIteration = ((_otherPanelMessage$me = otherPanelMessage.metadata) === null || _otherPanelMessage$me === void 0 ? void 0 : _otherPanelMessage$me.iterationCount) || 0;\n    console.log(`Panel ${position}: Current iteration: ${currentIteration}, max: ${brainstormIterations}`);\n    if (brainstormIterations !== -1 && currentIteration >= brainstormIterations) {\n      console.log(`Panel ${position}: Stopping brainstorm after ${currentIteration} iterations`);\n      return;\n    }\n    const nextIterationCount = currentIteration + 1;\n    console.log(`Panel ${position}: Starting iteration ${nextIterationCount}`);\n\n    // Process the message\n    handleSendMessage(otherPanelMessage.content, {\n      iterationCount: nextIterationCount,\n      fromBrainstorm: true,\n      fromPanel: position,\n      timestamp: new Date().toISOString()\n    });\n  }, [brainstormEnabled, selectedModel, otherPanelMessages, position, isThinking, brainstormIterations, handleSendMessage]);\n  const handleClearChat = useCallback(async () => {\n    try {\n      // Clear conversation context by sending an empty completion request\n      await fetch(`${serverUrl}/v1/chat/completions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          model: selectedModel,\n          messages: [],\n          // Empty messages array to reset context\n          stream: false,\n          options: {\n            load_model_only_when_needed: false,\n            unload_model_after_completion: false,\n            skip_embedding_model: true,\n            skip_model_load_test: true,\n            no_auto_model_selection: true,\n            unload_other_models: false\n          }\n        })\n      });\n\n      // Clear local state\n      updateConversationMessages([]);\n      setStreamingResponses(prev => ({\n        ...prev,\n        [position]: ''\n      }));\n      setThinking(prev => ({\n        ...prev,\n        [position]: false\n      }));\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n        abortControllerRef.current = null;\n      }\n    } catch (error) {\n      console.error('Error clearing chat:', error);\n    }\n  }, [position, setStreamingResponses, setThinking, updateConversationMessages, serverUrl, selectedModel]);\n  const handleNewConversation = useCallback(() => {\n    const newConversation = {\n      id: Date.now(),\n      name: 'New Conversation',\n      timestamp: new Date().toISOString(),\n      messages: []\n    };\n    setConversations(prev => [newConversation, ...prev]);\n    setCurrentConversationId(newConversation.id);\n  }, []);\n  const handleMenuAction = useCallback(async action => {\n    switch (action) {\n      case 'new':\n        handleNewConversation();\n        break;\n      case 'clear':\n        handleClearChat();\n        break;\n      case 'delete':\n        try {\n          // Clean up the conversation before deleting\n          cleanupConversation(currentConversationId);\n\n          // Clear conversation context by sending an empty completion request\n          await fetch(`${serverUrl}/v1/chat/completions`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              model: selectedModel,\n              messages: [],\n              // Empty messages array to reset context\n              stream: false,\n              options: {\n                load_model_only_when_needed: false,\n                unload_model_after_completion: false,\n                skip_embedding_model: true,\n                skip_model_load_test: true,\n                no_auto_model_selection: true,\n                unload_other_models: false\n              }\n            })\n          });\n          setConversations(prev => {\n            const updatedConversations = prev.filter(conv => conv.id !== currentConversationId);\n            if (updatedConversations.length === 0) {\n              const newConversation = {\n                id: Date.now(),\n                name: 'New Conversation',\n                messages: [],\n                timestamp: new Date().toISOString()\n              };\n              return [newConversation];\n            }\n            // Switch to the first conversation in the list\n            setCurrentConversationId(updatedConversations[0].id);\n            return updatedConversations;\n          });\n        } catch (error) {\n          console.error('Error cleaning up conversation:', error);\n        }\n        break;\n      default:\n        break;\n    }\n    setMenuAnchor(null);\n  }, [currentConversationId, handleClearChat, handleNewConversation, cleanupConversation, serverUrl, selectedModel]);\n  const handleStopResponse = () => {\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n      setThinking(prev => ({\n        ...prev,\n        [position]: false\n      }));\n      setStreamingResponses(prev => ({\n        ...prev,\n        [position]: ''\n      }));\n    }\n  };\n  const updateConversationName = (id, firstMessage) => {\n    if (!firstMessage) return;\n\n    // Extract first ~30 characters of the first message for the conversation name\n    const name = firstMessage.content.length > 30 ? firstMessage.content.substring(0, 30) + '...' : firstMessage.content;\n    setConversations(prev => prev.map(conv => conv.id === id ? {\n      ...conv,\n      name\n    } : conv));\n  };\n\n  // Batch updates for message list scrolling with longer delay\n  useEffect(() => {\n    const scrollTimer = setTimeout(() => {\n      scrollToBottom();\n    }, 1000); // Delay scroll to 1 second\n\n    return () => clearTimeout(scrollTimer);\n  }, [currentConversation.messages, streamingResponse, scrollToBottom]);\n\n  // Update streaming response handling\n  const StreamingResponseComponent = /*#__PURE__*/React.memo(({\n    content\n  }) => content ? /*#__PURE__*/_jsxDEV(Message, {\n    align: \"left\",\n    children: /*#__PURE__*/_jsxDEV(MessageContent, {\n      align: \"left\",\n      sx: {\n        backgroundColor: theme => theme.palette.background.paper,\n        minWidth: '200px',\n        width: 'fit-content',\n        maxWidth: '70%'\n      },\n      children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n        components: {\n          p: ({\n            children\n          }) => /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            component: \"p\",\n            sx: {\n              mb: 1,\n              '&:last-child': {\n                mb: 0\n              }\n            },\n            children: children\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 906,\n            columnNumber: 17\n          }, this),\n          pre: ({\n            node,\n            ...props\n          }) => /*#__PURE__*/_jsxDEV(\"pre\", {\n            style: {\n              backgroundColor: 'rgba(0, 0, 0, 0.1)',\n              padding: '8px',\n              borderRadius: '4px',\n              overflowX: 'auto'\n            },\n            ...props\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 918,\n            columnNumber: 17\n          }, this),\n          code: ({\n            node,\n            inline,\n            ...props\n          }) => inline ? /*#__PURE__*/_jsxDEV(\"code\", {\n            style: {\n              backgroundColor: 'rgba(0, 0, 0, 0.1)',\n              padding: '2px 4px',\n              borderRadius: '3px'\n            },\n            ...props\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 927,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"code\", {\n            ...props\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 932,\n            columnNumber: 19\n          }, this)\n        },\n        children: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 903,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 894,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 893,\n    columnNumber: 7\n  }, this) : null);\n\n  // Update ThinkingIndicator to be more precise\n  const ThinkingIndicator = /*#__PURE__*/React.memo(({\n    isThinking,\n    onStop\n  }) => isThinking && !streamingResponse && !currentConversation.messages.find(m => m.role === 'error') ? /*#__PURE__*/_jsxDEV(Message, {\n    align: \"left\",\n    children: /*#__PURE__*/_jsxDEV(MessageContent, {\n      align: \"left\",\n      sx: {\n        backgroundColor: 'rgba(0, 0, 0, 0.2)',\n        minWidth: '200px',\n        width: 'fit-content',\n        maxWidth: '70%',\n        position: 'relative',\n        padding: '12px 16px',\n        '& pre': {\n          margin: 0,\n          padding: 0,\n          backgroundColor: 'transparent',\n          fontFamily: 'inherit',\n          whiteSpace: 'pre-wrap',\n          fontSize: '0.875rem'\n        }\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          flexDirection: 'column',\n          gap: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"pre\", {\n          children: \"<think>\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 971,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          style: {\n            marginLeft: '8px'\n          },\n          children: \"Processing request and generating response...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 972,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: \"</think>\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 975,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'center',\n            gap: 1,\n            mt: 1,\n            pt: 1,\n            borderTop: '1px solid rgba(255, 255, 255, 0.1)'\n          },\n          children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 984,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: \"Thinking...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 985,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            size: \"small\",\n            onClick: onStop,\n            sx: {\n              ml: 'auto',\n              bgcolor: 'error.main',\n              color: 'error.contrastText',\n              '&:hover': {\n                bgcolor: 'error.dark'\n              },\n              width: 24,\n              height: 24\n            },\n            children: /*#__PURE__*/_jsxDEV(StopIcon, {\n              sx: {\n                fontSize: 16\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1000,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 986,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 976,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 966,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 947,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 946,\n    columnNumber: 7\n  }, this) : null);\n\n  // Update model status when a model is successfully used\n  const updateModelStatus = useCallback((modelId, isAvailable) => {\n    setModelStatus(prev => ({\n      ...prev,\n      [modelId]: {\n        available: isAvailable,\n        lastChecked: Date.now()\n      }\n    }));\n  }, []);\n\n  // Check if we need to verify model availability\n  const shouldCheckModel = useCallback(modelId => {\n    const status = modelStatus[modelId];\n    if (!status) return true;\n    const now = Date.now();\n    return now - status.lastChecked > networkCheckInterval;\n  }, [modelStatus]);\n\n  // Update handleModelAction to just clear UI state for unload\n  const handleModelAction = useCallback(async action => {\n    if (!selectedModel) return;\n    setIsModelSwitching(true);\n    try {\n      if (action === 'refresh') {\n        // Simple model reload\n        await fetch(`${serverUrl}/v1/chat/completions`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            model: selectedModel,\n            messages: [{\n              role: 'system',\n              content: 'test'\n            }],\n            stream: false,\n            max_tokens: 1\n          })\n        });\n      } else if (action === 'unload') {\n        // Just clear the UI state without sending any unload command\n        setSelectedModel('');\n        localStorage.removeItem(`selectedModel-${position}`);\n      }\n    } catch (error) {\n      console.warn(`Failed to ${action} model:`, error);\n    } finally {\n      setIsModelSwitching(false);\n    }\n  }, [selectedModel, serverUrl, position]);\n\n  // Add back the missing utility functions\n  const getModelColor = modelName => {\n    if (!modelName) return 'primary.main';\n    const name = modelName.trim().toLowerCase();\n\n    // Use a consistent color scheme based on model name\n    const colors = {\n      hermes: '#00BFA5',\n      // Teal\n      nomic: '#4A90E2',\n      // Blue\n      llama: '#2E7D32',\n      // Green\n      mistral: '#ED6C02',\n      // Orange\n      openchat: '#1976D2',\n      // Light blue\n      qwen: '#9C27B0',\n      // Purple\n      gemma: '#FF4081',\n      // Pink\n      default: '#757575' // Grey\n    };\n\n    // Find the first matching model name in the colors object\n    const modelType = Object.keys(colors).find(key => name.includes(key));\n    return modelType ? colors[modelType] : colors.default;\n  };\n  const getModelImage = modelName => {\n    if (!modelName) return null;\n    const name = modelName.trim().toLowerCase();\n\n    // Map of model names to their image files\n    const modelImages = {\n      hermes: './Images/Hermes.jpg',\n      nomic: './Images/Nomic.png',\n      qwen: './Images/Qwen2.png',\n      starcoder: './Images/StarCoder.jpg',\n      gemma: './Images/Gemma.png'\n    };\n\n    // Find the first matching model name in the images object\n    const modelType = Object.keys(modelImages).find(key => name.includes(key));\n    return modelType ? modelImages[modelType] : null;\n  };\n  const getModelLetter = modelName => {\n    if (!modelName) return 'A';\n    return modelName.charAt(0).toUpperCase();\n  };\n  const handleKeyPress = event => {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      event.preventDefault();\n      handleSendMessage();\n    }\n  };\n  const handleEmojiClick = emojiData => {\n    const emoji = emojiData.emoji;\n    const cursorPosition = document.querySelector('textarea').selectionStart;\n    const updatedText = inputValue.slice(0, cursorPosition) + emoji + inputValue.slice(cursorPosition);\n    setInputValue(updatedText);\n    setEmojiAnchor(null);\n  };\n  const handleFileUpload = async event => {\n    var _event$target$files;\n    const file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];\n    if (!file) return;\n\n    // Reset file input\n    event.target.value = '';\n\n    // Check file size (limit to 10MB)\n    if (file.size > 10 * 1024 * 1024) {\n      setUploadError('File size must be less than 10MB');\n      return;\n    }\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('model', selectedModel);\n      setThinking(prev => ({\n        ...prev,\n        [position]: true\n      }));\n      const response = await fetch(`${serverUrl}/v1/files`, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error(`Upload failed: ${response.statusText}`);\n      }\n      const data = await response.json();\n\n      // Add file message to chat\n      updateConversationMessages([...currentConversation.messages, {\n        content: `📎 Uploaded file: ${file.name}`,\n        timestamp: new Date().toISOString(),\n        role: 'user',\n        fileId: data.id\n      }]);\n    } catch (error) {\n      console.error('Upload error:', error);\n      setUploadError(error.message);\n      updateConversationMessages([...currentConversation.messages, {\n        content: `Failed to upload file: ${error.message}`,\n        timestamp: new Date().toISOString(),\n        role: 'error'\n      }]);\n    } finally {\n      setThinking(prev => ({\n        ...prev,\n        [position]: false\n      }));\n    }\n  };\n  const supportsFileUpload = () => {\n    var _currentModel$name, _currentModel$capabil;\n    if (!selectedModel || !models.length) return false;\n    const currentModel = models.find(m => m.id === selectedModel);\n    const modelName = (currentModel === null || currentModel === void 0 ? void 0 : (_currentModel$name = currentModel.name) === null || _currentModel$name === void 0 ? void 0 : _currentModel$name.toLowerCase()) || '';\n\n    // Enable file uploads for both deepseek and qwen models\n    if (modelName.includes('deepseek') || modelName.includes('qwen')) {\n      return true;\n    }\n    // Fallback to checking capabilities if model has them defined\n    return (currentModel === null || currentModel === void 0 ? void 0 : (_currentModel$capabil = currentModel.capabilities) === null || _currentModel$capabil === void 0 ? void 0 : _currentModel$capabil.includes('file_upload')) || false;\n  };\n\n  // Add back MessageComponent\n  const MessageComponent = /*#__PURE__*/_s(/*#__PURE__*/memo(_s(({\n    message,\n    align\n  }) => {\n    _s();\n    const [isDragging, setIsDragging] = useState(false);\n    const handleDragStart = e => {\n      var _models$find;\n      setIsDragging(true);\n      // Set both text and rich data for different drop targets\n      e.dataTransfer.setData('text/plain', message.content);\n      e.dataTransfer.setData('application/json', JSON.stringify({\n        type: 'chat_message',\n        content: message.content,\n        timestamp: message.timestamp,\n        role: message.role,\n        metadata: {\n          model: selectedModel,\n          modelName: (_models$find = models.find(m => m.id === selectedModel)) === null || _models$find === void 0 ? void 0 : _models$find.name,\n          conversationId: currentConversationId,\n          conversationName: currentConversation.name\n        }\n      }));\n      e.dataTransfer.effectAllowed = 'copyMove';\n\n      // Create a custom drag image\n      const dragPreview = document.createElement('div');\n      dragPreview.className = 'message-drag-preview';\n      dragPreview.innerHTML = `\n        <div style=\"\n          padding: 8px 12px;\n          background: rgba(25, 118, 210, 0.9);\n          border-radius: 8px;\n          color: white;\n          font-size: 14px;\n          max-width: 200px;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          white-space: nowrap;\n          box-shadow: 0 2px 8px rgba(0,0,0,0.2);\n        \">\n          ${message.content.substring(0, 50)}${message.content.length > 50 ? '...' : ''}\n        </div>\n      `;\n      document.body.appendChild(dragPreview);\n      e.dataTransfer.setDragImage(dragPreview, 0, 0);\n      setTimeout(() => document.body.removeChild(dragPreview), 0);\n      e.currentTarget.classList.add('dragging');\n    };\n    const handleDragEnd = e => {\n      setIsDragging(false);\n      e.currentTarget.classList.remove('dragging');\n      setTimeout(() => setIsDragging(false), 100);\n    };\n    return /*#__PURE__*/_jsxDEV(Message, {\n      align: align,\n      draggable: true,\n      onDragStart: handleDragStart,\n      onDragEnd: handleDragEnd,\n      sx: {\n        cursor: isDragging ? 'grabbing' : 'grab',\n        '&:hover': {\n          '& .message-content': {\n            boxShadow: 2,\n            transform: 'translateY(-1px)'\n          }\n        },\n        '&.dragging .message-content': {\n          opacity: 0.7,\n          boxShadow: 4,\n          transform: 'scale(0.98)'\n        },\n        '& .message-content': {\n          transition: 'all 0.2s ease'\n        }\n      },\n      children: message.role === 'error' ? /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 16,\n          color: \"error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1276,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: message.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1277,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1275,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(MessageContent, {\n          align: align,\n          className: \"message-content\",\n          sx: {\n            transition: 'all 0.2s ease'\n          },\n          children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n            components: {\n              pre: ({\n                node,\n                ...props\n              }) => /*#__PURE__*/_jsxDEV(\"pre\", {\n                style: {\n                  backgroundColor: 'rgba(0, 0, 0, 0.1)',\n                  padding: '8px',\n                  borderRadius: '4px',\n                  overflowX: 'auto'\n                },\n                ...props\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1291,\n                columnNumber: 21\n              }, this),\n              code: ({\n                node,\n                inline,\n                ...props\n              }) => inline ? /*#__PURE__*/_jsxDEV(\"code\", {\n                style: {\n                  backgroundColor: 'rgba(0, 0, 0, 0.1)',\n                  padding: '2px 4px',\n                  borderRadius: '3px'\n                },\n                ...props\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1300,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(\"code\", {\n                ...props\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1305,\n                columnNumber: 23\n              }, this)\n            },\n            children: message.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1288,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1281,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          color: \"textSecondary\",\n          sx: {\n            mt: 0.5,\n            opacity: 0.7,\n            fontSize: '0.7rem'\n          },\n          children: new Date(message.timestamp).toLocaleTimeString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1312,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1251,\n      columnNumber: 7\n    }, this);\n  }, \"VIDKbg2yfT0CLfTnlFHLO2Fjmb8=\")), \"VIDKbg2yfT0CLfTnlFHLO2Fjmb8=\");\n\n  // Save brainstorm state\n  useEffect(() => {\n    localStorage.setItem(`brainstorm-enabled-${position}`, brainstormEnabled);\n  }, [brainstormEnabled, position]);\n\n  // Save brainstorm iterations to localStorage\n  useEffect(() => {\n    localStorage.setItem(`brainstorm-iterations-${position}`, brainstormIterations);\n  }, [brainstormIterations, position]);\n  const handleEditName = () => {\n    setEditedName(currentConversation.name);\n    setIsEditingName(true);\n  };\n  const handleSaveName = () => {\n    if (editedName.trim()) {\n      setConversations(prev => prev.map(conv => conv.id === currentConversationId ? {\n        ...conv,\n        name: editedName.trim()\n      } : conv));\n    }\n    setIsEditingName(false);\n  };\n  const handleCancelEdit = () => {\n    setIsEditingName(false);\n    setEditedName('');\n  };\n\n  // Add brainstorm menu handler\n  const handleBrainstormContextMenu = event => {\n    event.preventDefault();\n    setBrainstormMenuAnchor(event.currentTarget);\n  };\n\n  // Update the brainstorm menu items to save state\n  const handleBrainstormIterationChange = count => {\n    setBrainstormIterations(count);\n    setBrainstormMenuAnchor(null);\n    // If iterations are set but brainstorm is not enabled, enable it\n    if (!brainstormEnabled) {\n      setBrainstormEnabled(true);\n    }\n  };\n  const handleDownloadBrainstorm = useCallback(() => {\n    const formatMessage = msg => {\n      var _msg$metadata;\n      const timestamp = new Date(msg.timestamp).toLocaleString();\n      const model = ((_msg$metadata = msg.metadata) === null || _msg$metadata === void 0 ? void 0 : _msg$metadata.modelName) || 'Unknown Model';\n      const role = msg.role === 'user' ? 'Human' : 'Assistant';\n      return `[${timestamp}] ${role} (${model}):\\n${msg.content}\\n\\n`;\n    };\n    const text = currentConversation.messages.map(formatMessage).join('');\n    const blob = new Blob([text], {\n      type: 'text/plain'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `conversation-${currentConversation.name}-${new Date().toISOString()}.txt`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }, [currentConversation]);\n\n  // Add the missing handleBrainstormToggle function\n  const handleBrainstormToggle = useCallback(() => {\n    const newState = !brainstormEnabled;\n    setBrainstormEnabled(newState);\n\n    // Notify other panel\n    const event = new CustomEvent('brainstormSync', {\n      detail: {\n        enabled: newState,\n        iterations: brainstormIterations,\n        fromPosition: position\n      }\n    });\n    window.dispatchEvent(event);\n  }, [brainstormEnabled, brainstormIterations, position]);\n  const handleSubmit = async event => {\n    var _models$find2;\n    event.preventDefault();\n    if (!inputValue.trim() || !selectedModel || isModelSwitching) return;\n    const message = inputValue.trim();\n    setInputValue('');\n    onMessageSubmit === null || onMessageSubmit === void 0 ? void 0 : onMessageSubmit(message); // Call onMessageSubmit with the message\n\n    // Update conversation with user message\n    const userMessage = {\n      role: 'user',\n      content: message,\n      timestamp: new Date().toISOString(),\n      metadata: {\n        model: selectedModel,\n        modelName: ((_models$find2 = models.find(m => m.id === selectedModel)) === null || _models$find2 === void 0 ? void 0 : _models$find2.name) || 'Unknown Model'\n      }\n    };\n\n    // ... rest of the existing handleSubmit code ...\n  };\n  return /*#__PURE__*/_jsxDEV(StyledPaper, {\n    elevation: 3,\n    children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center',\n          gap: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n          title: selectedModel ? ((_models$find3 = models.find(m => m.id === selectedModel)) === null || _models$find3 === void 0 ? void 0 : _models$find3.name) || 'Select a model' : 'Select a model',\n          children: /*#__PURE__*/_jsxDEV(Avatar, {\n            sx: {\n              bgcolor: selectedModel ? getModelColor(((_models$find4 = models.find(m => m.id === selectedModel)) === null || _models$find4 === void 0 ? void 0 : _models$find4.name) || '') : 'primary.main',\n              transition: 'all 0.3s ease',\n              fontWeight: 600,\n              width: 40,\n              height: 40,\n              cursor: 'help',\n              '& img': {\n                width: '100%',\n                height: '100%',\n                objectFit: 'cover'\n              }\n            },\n            children: selectedModel ? (_models$find5 => {\n              const modelName = ((_models$find5 = models.find(m => m.id === selectedModel)) === null || _models$find5 === void 0 ? void 0 : _models$find5.name) || '';\n              const imagePath = getModelImage(modelName);\n              return imagePath ? /*#__PURE__*/_jsxDEV(\"img\", {\n                src: imagePath,\n                alt: modelName,\n                style: {\n                  width: '100%',\n                  height: '100%',\n                  objectFit: 'cover'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1459,\n                columnNumber: 21\n              }, this) : getModelLetter(modelName);\n            })() : 'A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1439,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1438,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flexDirection: 'column',\n            gap: 1\n          },\n          children: models.length > 0 ? /*#__PURE__*/_jsxDEV(ModelSelector, {\n            size: \"small\",\n            sx: {\n              minWidth: 200\n            },\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              value: selectedModel || '',\n              onChange: e => handleModelChange(e.target.value),\n              variant: \"standard\",\n              displayEmpty: true,\n              children: models.map(model => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: model.id,\n                children: model.name\n              }, model.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1485,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1478,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1477,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            color: \"error\",\n            children: \"No AI models available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1492,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1475,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1437,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          gap: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n          title: brainstormEnabled ? \"AI Brainstorm Active\" : \"Enable AI Brainstorm\\nRight-click to set iterations\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: handleBrainstormToggle,\n            onContextMenu: handleBrainstormContextMenu,\n            color: brainstormEnabled ? \"primary\" : \"default\",\n            sx: {\n              position: 'relative',\n              '&::after': brainstormEnabled ? {\n                content: '\"\"',\n                position: 'absolute',\n                top: '50%',\n                left: '50%',\n                width: '120%',\n                height: '120%',\n                borderRadius: '50%',\n                transform: 'translate(-50%, -50%)',\n                animation: 'pulse 2s infinite',\n                backgroundColor: 'primary.main',\n                opacity: 0.2\n              } : {},\n              '@keyframes pulse': {\n                '0%': {\n                  transform: 'translate(-50%, -50%) scale(0.95)',\n                  opacity: 0.5\n                },\n                '70%': {\n                  transform: 'translate(-50%, -50%) scale(1.1)',\n                  opacity: 0.2\n                },\n                '100%': {\n                  transform: 'translate(-50%, -50%) scale(0.95)',\n                  opacity: 0.5\n                }\n              }\n            },\n            children: /*#__PURE__*/_jsxDEV(BrainstormIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1535,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1500,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1499,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: handleNewConversation,\n          title: \"New Conversation\",\n          children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1542,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1538,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: e => setMenuAnchor(e.currentTarget),\n          children: /*#__PURE__*/_jsxDEV(MoreIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1545,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1544,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1498,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1436,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n      ref: messageListRef,\n      onScroll: e => {\n        if (isScrolledToBottom()) {\n          setUserHasScrolled(false);\n        }\n      },\n      children: [currentConversation === null || currentConversation === void 0 ? void 0 : (_currentConversation$ = currentConversation.messages) === null || _currentConversation$ === void 0 ? void 0 : _currentConversation$.map((msg, index) => /*#__PURE__*/_jsxDEV(MessageComponent, {\n        message: msg,\n        align: msg.role === 'user' ? 'right' : 'left'\n      }, `${msg.timestamp}-${index}-${msg.content.substring(0, 20)}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1559,\n        columnNumber: 11\n      }, this)), streamingResponse && /*#__PURE__*/_jsxDEV(MessageComponent, {\n        message: {\n          content: streamingResponse,\n          timestamp: new Date().toISOString(),\n          role: 'assistant'\n        },\n        align: \"left\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1566,\n        columnNumber: 11\n      }, this), isThinking && /*#__PURE__*/_jsxDEV(ThinkingIndicator, {\n        isThinking: isThinking,\n        onStop: handleStopResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1576,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1581,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1550,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatFooter, {\n      children: [/*#__PURE__*/_jsxDEV(InputContainer, {\n        onDragOver: e => {\n          e.preventDefault();\n          e.currentTarget.style.backgroundColor = 'rgba(25, 118, 210, 0.1)';\n          e.dataTransfer.dropEffect = 'copy';\n        },\n        onDragLeave: e => {\n          e.preventDefault();\n          e.currentTarget.style.backgroundColor = '';\n        },\n        onDrop: e => {\n          e.preventDefault();\n          e.currentTarget.style.backgroundColor = '';\n          const text = e.dataTransfer.getData('text/plain');\n          if (text) {\n            setInputValue(prev => {\n              const textarea = document.querySelector('textarea');\n              const cursorPosition = (textarea === null || textarea === void 0 ? void 0 : textarea.selectionStart) || prev.length;\n              return prev.slice(0, cursorPosition) + text + prev.slice(cursorPosition);\n            });\n            // Focus and scroll to end\n            const textarea = document.querySelector('textarea');\n            if (textarea) {\n              textarea.focus();\n              textarea.scrollTop = textarea.scrollHeight;\n            }\n          }\n        },\n        sx: {\n          transition: 'all 0.2s ease',\n          '&:hover': {\n            '&[data-dragging=\"true\"]': {\n              backgroundColor: 'rgba(25, 118, 210, 0.1)'\n            }\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          size: \"small\",\n          onClick: e => setEmojiAnchor(e.currentTarget),\n          children: /*#__PURE__*/_jsxDEV(EmojiIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1626,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1622,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Popover, {\n          open: Boolean(emojiAnchor),\n          anchorEl: emojiAnchor,\n          onClose: () => setEmojiAnchor(null),\n          anchorOrigin: {\n            vertical: 'top',\n            horizontal: 'left'\n          },\n          transformOrigin: {\n            vertical: 'bottom',\n            horizontal: 'left'\n          },\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              '.EmojiPickerReact': {\n                '--epr-bg-color': 'rgba(18, 18, 18, 0.95)',\n                '--epr-category-label-bg-color': 'rgba(18, 18, 18, 0.95)',\n                '--epr-hover-bg-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-focus-bg-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-highlight-color': 'rgba(255, 255, 255, 0.2)',\n                '--epr-search-border-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-border-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-text-color': '#fff',\n                border: 'none',\n                boxShadow: '0 4px 20px rgba(0, 0, 0, 0.3)'\n              }\n            },\n            children: /*#__PURE__*/_jsxDEV(EmojiPicker, {\n              onEmojiClick: handleEmojiClick,\n              autoFocusSearch: false,\n              theme: \"dark\",\n              searchPlaceHolder: \"Search emojis...\",\n              width: 320,\n              height: 400,\n              previewConfig: {\n                showPreview: false\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1655,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1641,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1628,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          ref: fileInputRef,\n          style: {\n            display: 'none'\n          },\n          onChange: handleFileUpload,\n          accept: \"image/*,.pdf,.txt,.doc,.docx\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1668,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: !selectedModel ? \"Please select a model first\" : !supportsFileUpload() ? \"This model doesn't support file uploads\" : \"Upload a file\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              size: \"small\",\n              disabled: !supportsFileUpload(),\n              onClick: () => {\n                var _fileInputRef$current;\n                return (_fileInputRef$current = fileInputRef.current) === null || _fileInputRef$current === void 0 ? void 0 : _fileInputRef$current.click();\n              },\n              children: /*#__PURE__*/_jsxDEV(ImageIcon, {\n                sx: {\n                  color: theme => !supportsFileUpload() ? theme.palette.action.disabled : 'inherit'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1686,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1681,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1680,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1675,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          multiline: true,\n          maxRows: 4,\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyPress: handleKeyPress,\n          placeholder: \"Type your message...\",\n          variant: \"standard\",\n          InputProps: {\n            disableUnderline: true,\n            endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"end\",\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: () => handleSendMessage(),\n                disabled: !inputValue.trim() || !selectedModel,\n                color: \"primary\",\n                children: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1712,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1707,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1706,\n              columnNumber: 17\n            }, this)\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1694,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1585,\n        columnNumber: 9\n      }, this), uploadError && /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"caption\",\n        color: \"error\",\n        sx: {\n          mt: 1,\n          display: 'block'\n        },\n        onClick: () => setUploadError(''),\n        children: uploadError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1720,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1584,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Menu, {\n      anchorEl: menuAnchor,\n      open: Boolean(menuAnchor),\n      onClose: () => setMenuAnchor(null),\n      children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => handleMenuAction('new'),\n        children: \"New Conversation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1736,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => handleMenuAction('clear'),\n        children: \"Clear Current Conversation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1739,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => handleMenuAction('delete'),\n        children: \"Delete Current Conversation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1742,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: handleDownloadBrainstorm,\n        children: \"Download Conversation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1745,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => setHealthChecksEnabled(prev => !prev),\n        children: [healthChecksEnabled ? '✓ ' : '', \" Health Checks Enabled\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1748,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1751,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => handleModelAction('unload'),\n        disabled: !selectedModel || isModelSwitching,\n        children: \"Unload Current Model\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1752,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => handleModelAction('refresh'),\n        disabled: !selectedModel || isModelSwitching,\n        children: \"Refresh Current Model\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1758,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1731,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConversationHeader, {\n      children: /*#__PURE__*/_jsxDEV(ConversationName, {\n        children: isEditingName ? /*#__PURE__*/_jsxDEV(EditableTitle, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            value: editedName,\n            onChange: e => setEditedName(e.target.value),\n            onKeyPress: e => e.key === 'Enter' && handleSaveName(),\n            autoFocus: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1770,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            size: \"small\",\n            onClick: handleSaveName,\n            children: /*#__PURE__*/_jsxDEV(CheckIcon, {\n              fontSize: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1777,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1776,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            size: \"small\",\n            onClick: handleCancelEdit,\n            children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n              fontSize: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1780,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1779,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1769,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            component: \"div\",\n            children: currentConversation.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1785,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            size: \"small\",\n            onClick: handleEditName,\n            children: /*#__PURE__*/_jsxDEV(EditIcon, {\n              fontSize: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1789,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1788,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            className: \"timestamp-group\",\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              className: \"timestamp\",\n              component: \"span\",\n              children: new Date(currentConversation.timestamp).toLocaleString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1792,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1796,\n                columnNumber: 30\n              }, this),\n              onClick: handleNewConversation,\n              size: \"small\",\n              children: \"New Chat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1795,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: currentConversationId,\n              onChange: e => setCurrentConversationId(e.target.value),\n              size: \"small\",\n              sx: {\n                minWidth: 120\n              },\n              children: conversations.map(conv => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: conv.id,\n                children: [conv.name, \" - \", new Date(conv.timestamp).toLocaleDateString()]\n              }, conv.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1809,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1802,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1791,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1767,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1766,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Menu, {\n      anchorEl: brainstormMenuAnchor,\n      open: Boolean(brainstormMenuAnchor),\n      onClose: () => setBrainstormMenuAnchor(null),\n      children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => handleBrainstormIterationChange(-1),\n        children: \"Infinite Iterations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1825,\n        columnNumber: 9\n      }, this), [1, 2, 3, 5, 10].map(count => /*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => handleBrainstormIterationChange(count),\n        children: [count, \" Iteration\", count > 1 ? 's' : '']\n      }, count, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1829,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1820,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1435,\n    columnNumber: 5\n  }, this);\n}\n_s2(ChatWindow, \"98cS2oC2wQC7SnrYZtimYDV/BSk=\");\n_c13 = ChatWindow;\nexport default ChatWindow;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13;\n$RefreshReg$(_c, \"StyledPaper\");\n$RefreshReg$(_c2, \"ChatHeader\");\n$RefreshReg$(_c3, \"MessageList\");\n$RefreshReg$(_c4, \"Message\");\n$RefreshReg$(_c5, \"MessageContent\");\n$RefreshReg$(_c6, \"ChatFooter\");\n$RefreshReg$(_c7, \"InputContainer\");\n$RefreshReg$(_c8, \"ErrorMessage\");\n$RefreshReg$(_c9, \"ModelSelector\");\n$RefreshReg$(_c10, \"ConversationHeader\");\n$RefreshReg$(_c11, \"ConversationName\");\n$RefreshReg$(_c12, \"EditableTitle\");\n$RefreshReg$(_c13, \"ChatWindow\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","useMemo","memo","Box","Paper","TextField","IconButton","Typography","Avatar","Menu","MenuItem","Select","FormControl","CircularProgress","InputAdornment","Popover","Tooltip","ClickAwayListener","Divider","Button","Send","SendIcon","MoreVert","MoreIcon","VideoCall","VideoIcon","OpenInFull","ExpandIcon","Image","ImageIcon","EmojiEmotions","EmojiIcon","Stop","StopIcon","Add","AddIcon","NoteAdd","NoteAddIcon","Psychology","BrainstormIcon","Edit","EditIcon","Check","CheckIcon","Close","CloseIcon","ReactMarkdown","styled","EmojiPicker","jsxDEV","_jsxDEV","Fragment","_Fragment","StyledPaper","theme","display","flexDirection","height","flex","overflow","backgroundColor","palette","background","paper","borderRadius","spacing","_c","ChatHeader","padding","alignItems","justifyContent","borderBottom","divider","_c2","MessageList","flexGrow","default","width","grey","_c3","Message","align","marginBottom","_c4","MessageContent","maxWidth","primary","main","color","contrastText","text","boxShadow","shadows","margin","fontFamily","marginTop","paddingLeft","borderLeft","secondary","_c5","ChatFooter","borderTop","_c6","InputContainer","gap","_c7","ErrorMessage","error","dark","_c8","ModelSelector","paddingBottom","borderBottomColor","_c9","ConversationSelector","minWidth","fontSize","ConversationHeader","_c10","ConversationName","marginLeft","marginRight","_c11","EditableTitle","border","outline","_c12","ChatWindow","position","models","streamingResponse","isThinking","setStreamingResponses","setThinking","serverUrl","otherPanelMessages","onBrainstormMessage","onMessageSubmit","onModelSelect","_s2","_s","$RefreshSig$","_models$find3","_models$find4","_currentConversation$","processStreamingChunk","chunk","lines","split","accumulatedContent","line","trim","includes","_data$choices$","_data$choices$$delta","jsonStr","replace","data","JSON","parse","choices","delta","content","e","console","warn","processStreamingResponse","reader","responseText","maxIterations","iterations","responseBuffer","current","done","value","read","TextDecoder","decode","newContent","prev","selectedModel","setSelectedModel","inputValue","setInputValue","brainstormEnabled","setBrainstormEnabled","saved","localStorage","getItem","brainstormIterations","setBrainstormIterations","brainstormMenuAnchor","setBrainstormMenuAnchor","isEditingName","setIsEditingName","editedName","setEditedName","conversations","setConversations","id","Date","now","name","timestamp","toISOString","messages","currentConversationId","setCurrentConversationId","_conversations$","currentConversation","find","c","setItem","stringify","updateConversationMessages","newMessages","map","conv","menuAnchor","setMenuAnchor","emojiAnchor","setEmojiAnchor","uploadError","setUploadError","fileInputRef","messagesEndRef","abortControllerRef","updateTimeoutRef","lastHealthCheck","setLastHealthCheck","parseInt","healthChecksEnabled","setHealthChecksEnabled","isModelSwitching","setIsModelSwitching","modelStatus","setModelStatus","lastNetworkCheck","networkCheckInterval","cachedModels","setCachedModels","modelListInterval","lastModelListCheck","userHasScrolled","setUserHasScrolled","messageListRef","isScrolledToBottom","scrollHeight","scrollTop","clientHeight","handleScroll","type","wasAtBottom","scrollToBottom","scrollIntoView","behavior","messageList","addEventListener","removeEventListener","scrollTimer","setTimeout","clearTimeout","loadedModels","setLoadedModels","modelQueue","setModelQueue","isLoadingModel","setIsLoadingModel","handleModelChange","modelId","fetch","method","headers","body","model","role","stream","max_tokens","reloadModels","length","options","load_model_only_when_needed","unload_model_after_completion","no_auto_model_selection","skip_model_load_test","interval","setInterval","clearInterval","fetchModels","response","ok","json","newModels","some","m","removeItem","checkServerHealth","signal","AbortSignal","timeout","cleanupConversation","conversationId","abort","handleConversationChange","newId","_conversations$2","toString","updateStreamingResponse","handleSendMessage","message","userMessage","msg","Error","status","getReader","result","_otherPanelMessage$me","log","otherPanelMessage","processed","currentIteration","metadata","iterationCount","nextIterationCount","fromBrainstorm","fromPanel","handleClearChat","skip_embedding_model","unload_other_models","handleNewConversation","newConversation","handleMenuAction","action","updatedConversations","filter","handleStopResponse","updateConversationName","firstMessage","substring","StreamingResponseComponent","children","sx","components","p","variant","component","mb","fileName","_jsxFileName","lineNumber","columnNumber","pre","node","props","style","overflowX","code","inline","ThinkingIndicator","onStop","whiteSpace","mt","pt","size","onClick","ml","bgcolor","updateModelStatus","isAvailable","available","lastChecked","shouldCheckModel","handleModelAction","getModelColor","modelName","toLowerCase","colors","hermes","nomic","llama","mistral","openchat","qwen","gemma","modelType","Object","keys","key","getModelImage","modelImages","starcoder","getModelLetter","charAt","toUpperCase","handleKeyPress","event","shiftKey","preventDefault","handleEmojiClick","emojiData","emoji","cursorPosition","document","querySelector","selectionStart","updatedText","slice","handleFileUpload","_event$target$files","file","target","files","formData","FormData","append","statusText","fileId","supportsFileUpload","_currentModel$name","_currentModel$capabil","currentModel","capabilities","MessageComponent","isDragging","setIsDragging","handleDragStart","_models$find","dataTransfer","setData","conversationName","effectAllowed","dragPreview","createElement","className","innerHTML","appendChild","setDragImage","removeChild","currentTarget","classList","add","handleDragEnd","remove","draggable","onDragStart","onDragEnd","cursor","transform","opacity","transition","toLocaleTimeString","handleEditName","handleSaveName","handleCancelEdit","handleBrainstormContextMenu","handleBrainstormIterationChange","count","handleDownloadBrainstorm","formatMessage","_msg$metadata","toLocaleString","join","blob","Blob","url","URL","createObjectURL","a","href","download","click","revokeObjectURL","handleBrainstormToggle","newState","CustomEvent","detail","enabled","fromPosition","window","dispatchEvent","handleSubmit","_models$find2","elevation","title","fontWeight","objectFit","_models$find5","imagePath","src","alt","onChange","displayEmpty","onContextMenu","top","left","animation","ref","onScroll","index","onDragOver","dropEffect","onDragLeave","onDrop","getData","textarea","focus","open","Boolean","anchorEl","onClose","anchorOrigin","vertical","horizontal","transformOrigin","onEmojiClick","autoFocusSearch","searchPlaceHolder","previewConfig","showPreview","accept","disabled","_fileInputRef$current","fullWidth","multiline","maxRows","onKeyPress","placeholder","InputProps","disableUnderline","endAdornment","autoFocus","startIcon","toLocaleDateString","_c13","$RefreshReg$"],"sources":["E:/Cline/allm/frontend/src/components/ChatWindow.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback, useMemo, memo } from 'react';\nimport {\n  Box,\n  Paper,\n  TextField,\n  IconButton,\n  Typography,\n  Avatar,\n  Menu,\n  MenuItem,\n  Select,\n  FormControl,\n  CircularProgress,\n  InputAdornment,\n  Popover,\n  Tooltip,\n  ClickAwayListener,\n  Divider,\n  Button,\n} from '@mui/material';\nimport {\n  Send as SendIcon,\n  MoreVert as MoreIcon,\n  VideoCall as VideoIcon,\n  OpenInFull as ExpandIcon,\n  Image as ImageIcon,\n  EmojiEmotions as EmojiIcon,\n  Stop as StopIcon,\n  Add as AddIcon,\n  NoteAdd as NoteAddIcon,\n  Psychology as BrainstormIcon,\n  Edit as EditIcon,\n  Check as CheckIcon,\n  Close as CloseIcon,\n} from '@mui/icons-material';\nimport ReactMarkdown from 'react-markdown';\nimport { styled } from '@mui/material/styles';\nimport EmojiPicker from 'emoji-picker-react';\n\nconst StyledPaper = styled(Paper)(({ theme }) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  height: '100%',\n  flex: 1,\n  overflow: 'hidden',\n  backgroundColor: theme.palette.background.paper,\n  borderRadius: theme.spacing(3),\n}));\n\nconst ChatHeader = styled(Box)(({ theme }) => ({\n  padding: theme.spacing(2),\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  borderBottom: `1px solid ${theme.palette.divider}`,\n}));\n\nconst MessageList = styled(Box)(({ theme }) => ({\n  flexGrow: 1,\n  overflow: 'auto',\n  padding: theme.spacing(2),\n  backgroundColor: theme.palette.background.default,\n  '&::-webkit-scrollbar': {\n    width: '4px',\n  },\n  '&::-webkit-scrollbar-track': {\n    background: 'transparent',\n  },\n  '&::-webkit-scrollbar-thumb': {\n    background: theme.palette.grey[600],\n    borderRadius: '4px',\n  },\n}));\n\nconst Message = styled(Box)(({ theme, align }) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: align === 'right' ? 'flex-end' : 'flex-start',\n  marginBottom: theme.spacing(2),\n}));\n\nconst MessageContent = styled(Box)(({ theme, align }) => ({\n  maxWidth: '70%',\n  padding: theme.spacing(1.5),\n  borderRadius: theme.spacing(2),\n  backgroundColor: align === 'right' ? theme.palette.primary.main : theme.palette.background.paper,\n  color: align === 'right' ? theme.palette.primary.contrastText : theme.palette.text.primary,\n  boxShadow: theme.shadows[1],\n  '& p': {\n    margin: 0,\n  },\n  '& pre': {\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(1),\n    borderRadius: theme.spacing(1),\n    overflow: 'auto',\n    margin: theme.spacing(1, 0),\n    fontFamily: 'monospace',\n  },\n  '& code': {\n    fontFamily: 'monospace',\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(0.25, 0.5),\n    borderRadius: theme.spacing(0.5),\n  },\n  '& ul, & ol': {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    paddingLeft: theme.spacing(3),\n  },\n  '& li': {\n    marginBottom: theme.spacing(0.5),\n  },\n  '& blockquote': {\n    borderLeft: `3px solid ${theme.palette.divider}`,\n    margin: theme.spacing(1, 0),\n    paddingLeft: theme.spacing(2),\n    color: theme.palette.text.secondary,\n  },\n}));\n\nconst ChatFooter = styled(Box)(({ theme }) => ({\n  padding: theme.spacing(2),\n  borderTop: `1px solid ${theme.palette.divider}`,\n  backgroundColor: theme.palette.background.paper,\n}));\n\nconst InputContainer = styled(Box)(({ theme }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  gap: theme.spacing(1),\n  backgroundColor: theme.palette.background.default,\n  borderRadius: theme.spacing(3),\n  padding: theme.spacing(1),\n}));\n\nconst ErrorMessage = styled(Box)(({ theme }) => ({\n  padding: theme.spacing(1, 2),\n  backgroundColor: theme.palette.error.dark,\n  color: theme.palette.error.contrastText,\n  borderRadius: theme.spacing(1),\n  display: 'flex',\n  alignItems: 'center',\n  gap: theme.spacing(1),\n  marginBottom: theme.spacing(2),\n}));\n\nconst ModelSelector = styled(FormControl)(({ theme }) => ({\n  '& .MuiSelect-select': {\n    paddingBottom: 0,\n  },\n  '& .MuiInput-underline:before': {\n    borderBottomColor: 'transparent',\n  },\n}));\n\nconst ConversationSelector = styled(FormControl)(({ theme }) => ({\n  minWidth: 200,\n  '& .MuiSelect-select': {\n    fontSize: '0.875rem',\n  },\n}));\n\nconst ConversationHeader = styled(Box)(({ theme }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  padding: theme.spacing(1, 2),\n  borderBottom: `1px solid ${theme.palette.divider}`,\n  backgroundColor: theme.palette.background.paper,\n}));\n\nconst ConversationName = styled(Box)(({ theme }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  gap: theme.spacing(1),\n  '& .timestamp-group': {\n    display: 'flex',\n    alignItems: 'center',\n    gap: theme.spacing(1),\n    marginLeft: theme.spacing(2),\n  },\n  '& .timestamp': {\n    color: theme.palette.text.secondary,\n    fontSize: '0.75rem',\n    marginRight: theme.spacing(2)\n  }\n}));\n\nconst EditableTitle = styled(Box)(({ theme }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  gap: theme.spacing(1),\n  '& input': {\n    background: 'none',\n    border: 'none',\n    borderBottom: `1px solid ${theme.palette.primary.main}`,\n    color: theme.palette.text.primary,\n    fontSize: '1rem',\n    padding: theme.spacing(0.5, 1),\n    '&:focus': {\n      outline: 'none',\n    }\n  }\n}));\n\nfunction ChatWindow({\n  position,\n  models,\n  streamingResponse,\n  isThinking,\n  setStreamingResponses,\n  setThinking,\n  serverUrl,\n  otherPanelMessages,\n  onBrainstormMessage,\n  onMessageSubmit,\n  onModelSelect,\n}) {\n  // Process streaming chunks\n  const processStreamingChunk = useCallback((chunk) => {\n    const lines = chunk.split('\\n');\n    let accumulatedContent = '';\n\n    for (const line of lines) {\n      if (!line.trim() || line.includes('[DONE]')) continue;\n\n      try {\n        const jsonStr = line.replace(/^data: /, '');\n        const data = JSON.parse(jsonStr);\n\n        if (data.choices && data.choices[0]?.delta?.content) {\n          accumulatedContent += data.choices[0].delta.content;\n        }\n      } catch (e) {\n        console.warn('Error parsing chunk:', e);\n        continue;\n      }\n    }\n\n    return accumulatedContent;\n  }, []);\n\n  const processStreamingResponse = useCallback(async (reader, responseText = '', maxIterations = 1000) => {\n    let iterations = 0;\n    let accumulatedContent = responseBuffer.current || '';\n\n    try {\n      while (iterations < maxIterations) {\n        iterations++;\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        const chunk = new TextDecoder().decode(value);\n        const newContent = processStreamingChunk(chunk);\n        accumulatedContent += newContent;\n        responseText += newContent;\n\n        setStreamingResponses(prev => ({\n          ...prev,\n          [position]: accumulatedContent\n        }));\n      }\n\n      return responseText;\n    } catch (error) {\n      console.error('Error processing stream:', error);\n      throw error;\n    }\n  }, [processStreamingChunk, position, setStreamingResponses]);\n\n  // Update initial selectedModel state to use localStorage\n  const [selectedModel, setSelectedModel] = useState(() => {\n    // Don't automatically select a model from localStorage\n    return '';\n  });\n\n  const [inputValue, setInputValue] = useState('');\n  const [brainstormEnabled, setBrainstormEnabled] = useState(() => {\n    const saved = localStorage.getItem(`brainstorm-enabled-${position}`);\n    return saved ? JSON.parse(saved) : false;\n  });\n  const [brainstormIterations, setBrainstormIterations] = useState(() => {\n    const saved = localStorage.getItem(`brainstorm-iterations-${position}`);\n    return saved ? JSON.parse(saved) : 0; // 0 means no iterations set, -1 means infinite\n  });\n  const [brainstormMenuAnchor, setBrainstormMenuAnchor] = useState(null);\n  const [isEditingName, setIsEditingName] = useState(false);\n  const [editedName, setEditedName] = useState('');\n  const [conversations, setConversations] = useState(() => {\n    const saved = localStorage.getItem(`conversations-${position}`);\n    return saved ? JSON.parse(saved) : [{\n      id: Date.now(),\n      name: 'New Conversation',\n      timestamp: new Date().toISOString(),\n      messages: []\n    }];\n  });\n  const [currentConversationId, setCurrentConversationId] = useState(() => {\n    return conversations[0]?.id;\n  });\n\n  const currentConversation = useMemo(() => {\n    return conversations.find(c => c.id === currentConversationId) || conversations[0];\n  }, [conversations, currentConversationId]);\n\n  // Save conversations to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem(`conversations-${position}`, JSON.stringify(conversations));\n  }, [conversations, position]);\n\n  const updateConversationMessages = useCallback((newMessages) => {\n    setConversations(prev => prev.map(conv => \n      conv.id === currentConversationId\n        ? { ...conv, messages: newMessages }\n        : conv\n    ));\n  }, [currentConversationId]);\n\n  const [menuAnchor, setMenuAnchor] = useState(null);\n  const [emojiAnchor, setEmojiAnchor] = useState(null);\n  const [uploadError, setUploadError] = useState('');\n\n  // Refs\n  const fileInputRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  const abortControllerRef = useRef(null);\n  const responseBuffer = useRef('');\n  const updateTimeoutRef = useRef(null);\n\n  // Add health check state\n  const [lastHealthCheck, setLastHealthCheck] = useState(() => {\n    return parseInt(localStorage.getItem('lastHealthCheck') || '0');\n  });\n\n  // Add health check toggle state\n  const [healthChecksEnabled, setHealthChecksEnabled] = useState(() => {\n    return localStorage.getItem('healthChecksEnabled') !== 'false';\n  });\n\n  // Add loading state for model switching\n  const [isModelSwitching, setIsModelSwitching] = useState(false);\n\n  // Add model status tracking\n  const [modelStatus, setModelStatus] = useState({});\n  const lastNetworkCheck = useRef(0);\n  const networkCheckInterval = 60000; // 1 minute in milliseconds\n\n  // Cache models list with a longer interval\n  const [cachedModels, setCachedModels] = useState([]);\n  const modelListInterval = 60000; // 1 minute\n  const lastModelListCheck = useRef(0);\n\n  // Add state for scroll management\n  const [userHasScrolled, setUserHasScrolled] = useState(false);\n  const messageListRef = useRef(null);\n  \n  // Function to check if scrolled to bottom\n  const isScrolledToBottom = useCallback(() => {\n    if (!messageListRef.current) return true;\n    const { scrollHeight, scrollTop, clientHeight } = messageListRef.current;\n    // Consider \"almost\" at bottom (within 100px) as at bottom\n    return scrollHeight - scrollTop - clientHeight < 100;\n  }, []);\n\n  // Handle scroll events\n  const handleScroll = useCallback((e) => {\n    // Only set userHasScrolled if the scroll was manual (wheel or drag)\n    if (e.type === 'wheel' || e.type === 'touchmove') {\n      const wasAtBottom = isScrolledToBottom();\n      setUserHasScrolled(!wasAtBottom);\n    }\n  }, [isScrolledToBottom]);\n\n  // Scroll to bottom function\n  const scrollToBottom = useCallback(() => {\n    if (messagesEndRef.current && (!userHasScrolled || isScrolledToBottom())) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [userHasScrolled, isScrolledToBottom]);\n\n  // Update scroll effect\n  useEffect(() => {\n    if (!messageListRef.current) return;\n    \n    const messageList = messageListRef.current;\n    messageList.addEventListener('wheel', handleScroll);\n    messageList.addEventListener('touchmove', handleScroll);\n    \n    return () => {\n      messageList.removeEventListener('wheel', handleScroll);\n      messageList.removeEventListener('touchmove', handleScroll);\n    };\n  }, [handleScroll]);\n\n  // Update auto-scroll effect\n  useEffect(() => {\n    const scrollTimer = setTimeout(() => {\n      scrollToBottom();\n    }, 100);\n\n    return () => clearTimeout(scrollTimer);\n  }, [currentConversation.messages, streamingResponse, scrollToBottom]);\n\n  // Add model tracking state at the top of component\n  const [loadedModels, setLoadedModels] = useState({});\n\n  // Add model queue state at component level\n  const [modelQueue, setModelQueue] = useState([]);\n  const [isLoadingModel, setIsLoadingModel] = useState(false);\n\n  // Update handleModelChange to only load the model\n  const handleModelChange = useCallback(async (modelId) => {\n    if (modelId === selectedModel) return;\n    \n    setIsModelSwitching(true);\n    try {\n      // Just load the new model without any special options\n      await fetch(`${serverUrl}/v1/chat/completions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          model: modelId,\n          messages: [{ role: 'system', content: 'test' }],\n          stream: false,\n          max_tokens: 1\n        })\n      });\n\n      // Update state and localStorage\n      setSelectedModel(modelId);\n      localStorage.setItem(`selectedModel-${position}`, modelId);\n      onModelSelect?.(position, modelId);\n      \n    } catch (error) {\n      console.error('Error switching model:', error);\n    } finally {\n      setIsModelSwitching(false);\n    }\n  }, [position, onModelSelect, selectedModel, serverUrl]);\n\n  // Add effect to maintain loaded models\n  useEffect(() => {\n    const reloadModels = async () => {\n      if (isLoadingModel || modelQueue.length === 0) return;\n      \n      setIsLoadingModel(true);\n      try {\n        // Reload all models in the queue to ensure they stay loaded\n        for (const modelId of modelQueue) {\n          await fetch(`${serverUrl}/v1/chat/completions`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              model: modelId,\n              messages: [{ role: 'system', content: 'test' }],\n              stream: false,\n              max_tokens: 1,\n              options: {\n                load_model_only_when_needed: false,\n                unload_model_after_completion: false,\n                no_auto_model_selection: true,\n                skip_model_load_test: true\n              }\n            })\n          });\n        }\n      } catch (error) {\n        console.error('Error reloading models:', error);\n      } finally {\n        setIsLoadingModel(false);\n      }\n    };\n\n    const interval = setInterval(reloadModels, 30000); // Reload models every 30 seconds\n    return () => clearInterval(interval);\n  }, [modelQueue, serverUrl, isLoadingModel]);\n\n  // Update model selection effect to be more conservative\n  useEffect(() => {\n    // Remove auto-selection of model from localStorage\n    if (!selectedModel && cachedModels.length > 0) {\n      // Don't automatically set a model\n      return;\n    }\n  }, [cachedModels, selectedModel, handleModelChange, position]);\n\n  // Update models fetch to respect existing selection\n  useEffect(() => {\n    const fetchModels = async () => {\n      const now = Date.now();\n      if (now - lastModelListCheck.current < modelListInterval) {\n        return; // Use cached models if checked recently\n      }\n\n      try {\n        const response = await fetch(`${serverUrl}/v1/models`, {\n          method: 'GET',\n          headers: { 'Cache-Control': 'no-cache' }\n        });\n        \n        if (response.ok) {\n          const data = await response.json();\n          const newModels = data.data || [];\n          setCachedModels(newModels);\n          lastModelListCheck.current = now;\n\n          // If current selected model is not in the new list, clear it\n          if (selectedModel && !newModels.some(m => m.id === selectedModel)) {\n            setSelectedModel('');\n            localStorage.removeItem(`selectedModel-${position}`);\n          }\n        }\n      } catch (error) {\n        console.warn('Failed to fetch models:', error);\n      }\n    };\n\n    fetchModels();\n  }, [serverUrl, selectedModel, position]);\n\n  // Update checkServerHealth to respect the toggle\n  const checkServerHealth = useCallback(async () => {\n    // If health checks are disabled, always return true\n    if (!healthChecksEnabled) {\n      return true;\n    }\n\n    const now = Date.now();\n    if (now - lastNetworkCheck.current < networkCheckInterval) {\n      return true; // Return true if we checked recently\n    }\n\n    try {\n      const response = await fetch(`${serverUrl}/health`, {\n        method: 'HEAD',\n        signal: AbortSignal.timeout(5000)\n      });\n      \n      if (response.ok) {\n        lastNetworkCheck.current = now;\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.warn('Health check failed:', error);\n      return false;\n    }\n  }, [serverUrl, healthChecksEnabled]);\n\n  // Add effect to save health check preference\n  useEffect(() => {\n    localStorage.setItem('healthChecksEnabled', healthChecksEnabled);\n  }, [healthChecksEnabled]);\n\n  // Move cleanupConversation before handleConversationChange\n  const cleanupConversation = useCallback((conversationId) => {\n    // Abort any ongoing requests\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n    }\n\n    // Clear streaming responses\n    setStreamingResponses(prev => ({\n      ...prev,\n      [position]: ''\n    }));\n\n    // Clear thinking state\n    setThinking(prev => ({\n      ...prev,\n      [position]: false\n    }));\n\n    // Clear response buffer\n    responseBuffer.current = '';\n\n    // Clear any pending timeouts\n    if (updateTimeoutRef.current) {\n      clearTimeout(updateTimeoutRef.current);\n      updateTimeoutRef.current = null;\n    }\n  }, [position, setStreamingResponses, setThinking]);\n\n  // Handle conversation switch\n  const handleConversationChange = useCallback((newId) => {\n    if (!conversations.some(conv => conv.id === newId)) {\n      console.warn('Invalid conversation ID, selecting first available conversation');\n      newId = conversations[0]?.id || Date.now().toString();\n    }\n    \n    // Clean up the current conversation before switching\n    cleanupConversation(currentConversationId);\n    setCurrentConversationId(newId);\n  }, [conversations, currentConversationId, cleanupConversation]);\n\n  // Optimize streaming updates\n  const updateStreamingResponse = useCallback((newContent) => {\n    responseBuffer.current = newContent;\n    \n    if (updateTimeoutRef.current) {\n      clearTimeout(updateTimeoutRef.current);\n    }\n\n    updateTimeoutRef.current = setTimeout(() => {\n      setStreamingResponses(prev => ({\n        ...prev,\n        [position]: responseBuffer.current\n      }));\n    }, 1500); // 1.5 second debounce\n  }, [position, setStreamingResponses]);\n\n  // Update handleSendMessage to not include special options\n  const handleSendMessage = useCallback(async () => {\n    if (!inputValue.trim() || !selectedModel || isModelSwitching) return;\n\n    const message = inputValue.trim();\n    setInputValue('');\n    \n    // Add user message to conversation\n    const userMessage = {\n      content: message,\n      timestamp: new Date().toISOString(),\n      role: 'user',\n    };\n    \n    updateConversationMessages([...currentConversation.messages, userMessage]);\n\n    try {\n      setThinking(prev => ({ ...prev, [position]: true }));\n      setStreamingResponses(prev => ({ ...prev, [position]: '' }));\n\n      const response = await fetch(`${serverUrl}/v1/chat/completions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          model: selectedModel,\n          messages: currentConversation.messages.map(msg => ({\n            role: msg.role,\n            content: msg.content\n          })),\n          stream: true\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const reader = response.body.getReader();\n      const result = await processStreamingResponse(reader);\n      \n    } catch (error) {\n      console.error('Error sending message:', error);\n      updateConversationMessages([\n        ...currentConversation.messages,\n        {\n          content: `Error: ${error.message}`,\n          timestamp: new Date().toISOString(),\n          role: 'error',\n        }\n      ]);\n    } finally {\n      setThinking(prev => ({ ...prev, [position]: false }));\n    }\n  }, [\n    inputValue,\n    selectedModel,\n    isModelSwitching,\n    currentConversation.messages,\n    updateConversationMessages,\n    setStreamingResponses,\n    position,\n    serverUrl,\n    processStreamingResponse,\n    setThinking\n  ]);\n\n  // Update the brainstorm effect to handle message passing correctly\n  useEffect(() => {\n    if (!brainstormEnabled || !selectedModel) {\n      console.log(`Panel ${position}: Brainstorm skipped - enabled: ${brainstormEnabled}, model: ${selectedModel}`);\n      return;\n    }\n\n    // Get the latest message from the other panel\n    const otherPanelMessage = otherPanelMessages?.[otherPanelMessages.length - 1];\n    if (!otherPanelMessage) {\n      console.log(`Panel ${position}: No messages from other panel`);\n      return;\n    }\n\n    console.log(`Panel ${position}: Processing message:`, otherPanelMessage);\n\n    // Only process assistant messages that haven't been processed\n    if (otherPanelMessage.role !== 'assistant' || otherPanelMessage.processed === true) {\n      console.log(`Panel ${position}: Message skipped - role: ${otherPanelMessage.role}, processed: ${otherPanelMessage.processed}`);\n      return;\n    }\n\n    // Don't process if we're still thinking about the previous message\n    if (isThinking) {\n      console.log(`Panel ${position}: Waiting for previous message to complete`);\n      return;\n    }\n\n    const currentIteration = otherPanelMessage.metadata?.iterationCount || 0;\n    console.log(`Panel ${position}: Current iteration: ${currentIteration}, max: ${brainstormIterations}`);\n\n    if (brainstormIterations !== -1 && currentIteration >= brainstormIterations) {\n      console.log(`Panel ${position}: Stopping brainstorm after ${currentIteration} iterations`);\n      return;\n    }\n\n    const nextIterationCount = currentIteration + 1;\n    console.log(`Panel ${position}: Starting iteration ${nextIterationCount}`);\n\n    // Process the message\n    handleSendMessage(otherPanelMessage.content, {\n      iterationCount: nextIterationCount,\n      fromBrainstorm: true,\n      fromPanel: position,\n      timestamp: new Date().toISOString()\n    });\n\n  }, [\n    brainstormEnabled,\n    selectedModel,\n    otherPanelMessages,\n    position,\n    isThinking,\n    brainstormIterations,\n    handleSendMessage\n  ]);\n\n  const handleClearChat = useCallback(async () => {\n    try {\n      // Clear conversation context by sending an empty completion request\n      await fetch(`${serverUrl}/v1/chat/completions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          model: selectedModel,\n          messages: [], // Empty messages array to reset context\n          stream: false,\n          options: {\n            load_model_only_when_needed: false,\n            unload_model_after_completion: false,\n            skip_embedding_model: true,\n            skip_model_load_test: true,\n            no_auto_model_selection: true,\n            unload_other_models: false\n          }\n        })\n      });\n\n      // Clear local state\n      updateConversationMessages([]); \n      setStreamingResponses(prev => ({\n        ...prev,\n        [position]: ''\n      }));\n      setThinking(prev => ({\n        ...prev,\n        [position]: false\n      }));\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n        abortControllerRef.current = null;\n      }\n    } catch (error) {\n      console.error('Error clearing chat:', error);\n    }\n  }, [position, setStreamingResponses, setThinking, updateConversationMessages, serverUrl, selectedModel]);\n\n  const handleNewConversation = useCallback(() => {\n    const newConversation = {\n      id: Date.now(),\n      name: 'New Conversation',\n      timestamp: new Date().toISOString(),\n      messages: []\n    };\n    setConversations(prev => [newConversation, ...prev]);\n    setCurrentConversationId(newConversation.id);\n  }, []);\n\n  const handleMenuAction = useCallback(async (action) => {\n    switch (action) {\n      case 'new':\n        handleNewConversation();\n        break;\n      case 'clear':\n        handleClearChat();\n        break;\n      case 'delete':\n        try {\n          // Clean up the conversation before deleting\n          cleanupConversation(currentConversationId);\n          \n          // Clear conversation context by sending an empty completion request\n          await fetch(`${serverUrl}/v1/chat/completions`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              model: selectedModel,\n              messages: [], // Empty messages array to reset context\n              stream: false,\n              options: {\n                load_model_only_when_needed: false,\n                unload_model_after_completion: false,\n                skip_embedding_model: true,\n                skip_model_load_test: true,\n                no_auto_model_selection: true,\n                unload_other_models: false\n              }\n            })\n          });\n          \n          setConversations(prev => {\n            const updatedConversations = prev.filter(conv => conv.id !== currentConversationId);\n            if (updatedConversations.length === 0) {\n              const newConversation = {\n                id: Date.now(),\n                name: 'New Conversation',\n                messages: [],\n                timestamp: new Date().toISOString()\n              };\n              return [newConversation];\n            }\n            // Switch to the first conversation in the list\n            setCurrentConversationId(updatedConversations[0].id);\n            return updatedConversations;\n          });\n        } catch (error) {\n          console.error('Error cleaning up conversation:', error);\n        }\n        break;\n      default:\n        break;\n    }\n    setMenuAnchor(null);\n  }, [currentConversationId, handleClearChat, handleNewConversation, cleanupConversation, serverUrl, selectedModel]);\n\n  const handleStopResponse = () => {\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n      setThinking(prev => ({ ...prev, [position]: false }));\n      setStreamingResponses(prev => ({ ...prev, [position]: '' }));\n    }\n  };\n\n  const updateConversationName = (id, firstMessage) => {\n    if (!firstMessage) return;\n    \n    // Extract first ~30 characters of the first message for the conversation name\n    const name = firstMessage.content.length > 30 \n      ? firstMessage.content.substring(0, 30) + '...'\n      : firstMessage.content;\n\n    setConversations(prev => \n      prev.map(conv => \n        conv.id === id \n          ? { ...conv, name } \n          : conv\n      )\n    );\n  };\n\n  // Batch updates for message list scrolling with longer delay\n  useEffect(() => {\n    const scrollTimer = setTimeout(() => {\n      scrollToBottom();\n    }, 1000); // Delay scroll to 1 second\n\n    return () => clearTimeout(scrollTimer);\n  }, [currentConversation.messages, streamingResponse, scrollToBottom]);\n\n  // Update streaming response handling\n  const StreamingResponseComponent = React.memo(({ content }) => (\n    content ? (\n      <Message align=\"left\">\n        <MessageContent \n          align=\"left\"\n          sx={{ \n            backgroundColor: theme => theme.palette.background.paper,\n            minWidth: '200px',\n            width: 'fit-content',\n            maxWidth: '70%'\n          }}\n        >\n          <ReactMarkdown \n            components={{\n              p: ({ children }) => (\n                <Typography \n                  variant=\"body1\" \n                  component=\"p\" \n                  sx={{ \n                    mb: 1,\n                    '&:last-child': { mb: 0 }\n                  }}\n                >\n                  {children}\n                </Typography>\n              ),\n              pre: ({ node, ...props }) => (\n                <pre style={{ \n                  backgroundColor: 'rgba(0, 0, 0, 0.1)',\n                  padding: '8px',\n                  borderRadius: '4px',\n                  overflowX: 'auto',\n                }} {...props} />\n              ),\n              code: ({ node, inline, ...props }) => (\n                inline ? \n                  <code style={{ \n                    backgroundColor: 'rgba(0, 0, 0, 0.1)',\n                    padding: '2px 4px',\n                    borderRadius: '3px',\n                  }} {...props} /> :\n                  <code {...props} />\n              ),\n            }}\n          >\n            {content}\n          </ReactMarkdown>\n        </MessageContent>\n      </Message>\n    ) : null\n  ));\n\n  // Update ThinkingIndicator to be more precise\n  const ThinkingIndicator = React.memo(({ isThinking, onStop }) => (\n    isThinking && !streamingResponse && !currentConversation.messages.find(m => m.role === 'error') ? (\n      <Message align=\"left\">\n        <MessageContent \n          align=\"left\" \n          sx={{ \n            backgroundColor: 'rgba(0, 0, 0, 0.2)',\n            minWidth: '200px',\n            width: 'fit-content',\n            maxWidth: '70%',\n            position: 'relative',\n            padding: '12px 16px',\n            '& pre': {\n              margin: 0,\n              padding: 0,\n              backgroundColor: 'transparent',\n              fontFamily: 'inherit',\n              whiteSpace: 'pre-wrap',\n              fontSize: '0.875rem',\n            }\n          }}\n        >\n          <Box sx={{ \n            display: 'flex', \n            flexDirection: 'column',\n            gap: 1,\n          }}>\n            <pre>{\"<think>\"}</pre>\n            <pre style={{ marginLeft: '8px' }}>\n              {\"Processing request and generating response...\"}\n            </pre>\n            <pre>{\"</think>\"}</pre>\n            <Box sx={{ \n              display: 'flex', \n              alignItems: 'center', \n              gap: 1,\n              mt: 1,\n              pt: 1,\n              borderTop: '1px solid rgba(255, 255, 255, 0.1)',\n            }}>\n              <CircularProgress size={16} />\n              <Typography>Thinking...</Typography>\n              <IconButton \n                size=\"small\" \n                onClick={onStop}\n                sx={{ \n                  ml: 'auto',\n                  bgcolor: 'error.main',\n                  color: 'error.contrastText',\n                  '&:hover': {\n                    bgcolor: 'error.dark',\n                  },\n                  width: 24,\n                  height: 24,\n                }}\n              >\n                <StopIcon sx={{ fontSize: 16 }} />\n              </IconButton>\n            </Box>\n          </Box>\n        </MessageContent>\n      </Message>\n    ) : null\n  ));\n\n  // Update model status when a model is successfully used\n  const updateModelStatus = useCallback((modelId, isAvailable) => {\n    setModelStatus(prev => ({\n      ...prev,\n      [modelId]: {\n        available: isAvailable,\n        lastChecked: Date.now()\n      }\n    }));\n  }, []);\n\n  // Check if we need to verify model availability\n  const shouldCheckModel = useCallback((modelId) => {\n    const status = modelStatus[modelId];\n    if (!status) return true;\n    \n    const now = Date.now();\n    return now - status.lastChecked > networkCheckInterval;\n  }, [modelStatus]);\n\n  // Update handleModelAction to just clear UI state for unload\n  const handleModelAction = useCallback(async (action) => {\n    if (!selectedModel) return;\n    \n    setIsModelSwitching(true);\n    try {\n      if (action === 'refresh') {\n        // Simple model reload\n        await fetch(`${serverUrl}/v1/chat/completions`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            model: selectedModel,\n            messages: [{ role: 'system', content: 'test' }],\n            stream: false,\n            max_tokens: 1\n          })\n        });\n      }\n      else if (action === 'unload') {\n        // Just clear the UI state without sending any unload command\n        setSelectedModel('');\n        localStorage.removeItem(`selectedModel-${position}`);\n      }\n    } catch (error) {\n      console.warn(`Failed to ${action} model:`, error);\n    } finally {\n      setIsModelSwitching(false);\n    }\n  }, [selectedModel, serverUrl, position]);\n\n  // Add back the missing utility functions\n  const getModelColor = (modelName) => {\n    if (!modelName) return 'primary.main';\n    const name = modelName.trim().toLowerCase();\n    \n    // Use a consistent color scheme based on model name\n    const colors = {\n      hermes: '#00BFA5',    // Teal\n      nomic: '#4A90E2',     // Blue\n      llama: '#2E7D32',     // Green\n      mistral: '#ED6C02',   // Orange\n      openchat: '#1976D2',  // Light blue\n      qwen: '#9C27B0',      // Purple\n      gemma: '#FF4081',     // Pink\n      default: '#757575'    // Grey\n    };\n\n    // Find the first matching model name in the colors object\n    const modelType = Object.keys(colors).find(key => name.includes(key));\n    return modelType ? colors[modelType] : colors.default;\n  };\n\n  const getModelImage = (modelName) => {\n    if (!modelName) return null;\n    const name = modelName.trim().toLowerCase();\n    \n    // Map of model names to their image files\n    const modelImages = {\n      hermes: './Images/Hermes.jpg',\n      nomic: './Images/Nomic.png',\n      qwen: './Images/Qwen2.png',\n      starcoder: './Images/StarCoder.jpg',\n      gemma: './Images/Gemma.png'\n    };\n\n    // Find the first matching model name in the images object\n    const modelType = Object.keys(modelImages).find(key => name.includes(key));\n    return modelType ? modelImages[modelType] : null;\n  };\n\n  const getModelLetter = (modelName) => {\n    if (!modelName) return 'A';\n    return modelName.charAt(0).toUpperCase();\n  };\n\n  const handleKeyPress = (event) => {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      event.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const handleEmojiClick = (emojiData) => {\n    const emoji = emojiData.emoji;\n    const cursorPosition = document.querySelector('textarea').selectionStart;\n    const updatedText = \n      inputValue.slice(0, cursorPosition) + \n      emoji + \n      inputValue.slice(cursorPosition);\n    setInputValue(updatedText);\n    setEmojiAnchor(null);\n  };\n\n  const handleFileUpload = async (event) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Reset file input\n    event.target.value = '';\n\n    // Check file size (limit to 10MB)\n    if (file.size > 10 * 1024 * 1024) {\n      setUploadError('File size must be less than 10MB');\n      return;\n    }\n\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('model', selectedModel);\n\n      setThinking(prev => ({ ...prev, [position]: true }));\n\n      const response = await fetch(`${serverUrl}/v1/files`, {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error(`Upload failed: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      \n      // Add file message to chat\n      updateConversationMessages([\n        ...currentConversation.messages,\n        {\n          content: `📎 Uploaded file: ${file.name}`,\n          timestamp: new Date().toISOString(),\n          role: 'user',\n          fileId: data.id,\n        },\n      ]);\n\n    } catch (error) {\n      console.error('Upload error:', error);\n      setUploadError(error.message);\n      updateConversationMessages([\n        ...currentConversation.messages,\n        {\n          content: `Failed to upload file: ${error.message}`,\n          timestamp: new Date().toISOString(),\n          role: 'error',\n        },\n      ]);\n    } finally {\n      setThinking(prev => ({ ...prev, [position]: false }));\n    }\n  };\n\n  const supportsFileUpload = () => {\n    if (!selectedModel || !models.length) return false;\n    const currentModel = models.find(m => m.id === selectedModel);\n    const modelName = currentModel?.name?.toLowerCase() || '';\n    \n    // Enable file uploads for both deepseek and qwen models\n    if (modelName.includes('deepseek') || modelName.includes('qwen')) {\n      return true;\n    }\n    // Fallback to checking capabilities if model has them defined\n    return currentModel?.capabilities?.includes('file_upload') || false;\n  };\n\n  // Add back MessageComponent\n  const MessageComponent = memo(({ message, align }) => {\n    const [isDragging, setIsDragging] = useState(false);\n\n    const handleDragStart = (e) => {\n      setIsDragging(true);\n      // Set both text and rich data for different drop targets\n      e.dataTransfer.setData('text/plain', message.content);\n      e.dataTransfer.setData('application/json', JSON.stringify({\n        type: 'chat_message',\n        content: message.content,\n        timestamp: message.timestamp,\n        role: message.role,\n        metadata: {\n          model: selectedModel,\n          modelName: models.find(m => m.id === selectedModel)?.name,\n          conversationId: currentConversationId,\n          conversationName: currentConversation.name\n        }\n      }));\n      e.dataTransfer.effectAllowed = 'copyMove';\n      \n      // Create a custom drag image\n      const dragPreview = document.createElement('div');\n      dragPreview.className = 'message-drag-preview';\n      dragPreview.innerHTML = `\n        <div style=\"\n          padding: 8px 12px;\n          background: rgba(25, 118, 210, 0.9);\n          border-radius: 8px;\n          color: white;\n          font-size: 14px;\n          max-width: 200px;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          white-space: nowrap;\n          box-shadow: 0 2px 8px rgba(0,0,0,0.2);\n        \">\n          ${message.content.substring(0, 50)}${message.content.length > 50 ? '...' : ''}\n        </div>\n      `;\n      document.body.appendChild(dragPreview);\n      e.dataTransfer.setDragImage(dragPreview, 0, 0);\n      setTimeout(() => document.body.removeChild(dragPreview), 0);\n\n      e.currentTarget.classList.add('dragging');\n    };\n\n    const handleDragEnd = (e) => {\n      setIsDragging(false);\n      e.currentTarget.classList.remove('dragging');\n      setTimeout(() => setIsDragging(false), 100);\n    };\n\n    return (\n      <Message \n        align={align}\n        draggable={true}\n        onDragStart={handleDragStart}\n        onDragEnd={handleDragEnd}\n        sx={{ \n          cursor: isDragging ? 'grabbing' : 'grab',\n          '&:hover': {\n            '& .message-content': {\n              boxShadow: 2,\n              transform: 'translateY(-1px)',\n            }\n          },\n          '&.dragging .message-content': {\n            opacity: 0.7,\n            boxShadow: 4,\n            transform: 'scale(0.98)',\n          },\n          '& .message-content': {\n            transition: 'all 0.2s ease',\n          }\n        }}\n      >\n        {message.role === 'error' ? (\n          <ErrorMessage>\n            <CircularProgress size={16} color=\"error\" />\n            <Typography variant=\"body2\">{message.content}</Typography>\n          </ErrorMessage>\n        ) : (\n          <>\n            <MessageContent \n              align={align} \n              className=\"message-content\"\n              sx={{ \n                transition: 'all 0.2s ease',\n              }}\n            >\n              <ReactMarkdown \n                components={{\n                  pre: ({ node, ...props }) => (\n                    <pre style={{ \n                      backgroundColor: 'rgba(0, 0, 0, 0.1)',\n                      padding: '8px',\n                      borderRadius: '4px',\n                      overflowX: 'auto',\n                    }} {...props} />\n                  ),\n                  code: ({ node, inline, ...props }) => (\n                    inline ? \n                      <code style={{ \n                        backgroundColor: 'rgba(0, 0, 0, 0.1)',\n                        padding: '2px 4px',\n                        borderRadius: '3px',\n                      }} {...props} /> :\n                      <code {...props} />\n                  ),\n                }}\n              >\n                {message.content}\n              </ReactMarkdown>\n            </MessageContent>\n            <Typography \n              variant=\"caption\" \n              color=\"textSecondary\" \n              sx={{ \n                mt: 0.5,\n                opacity: 0.7,\n                fontSize: '0.7rem',\n              }}\n            >\n              {new Date(message.timestamp).toLocaleTimeString()}\n            </Typography>\n          </>\n        )}\n      </Message>\n    );\n  });\n\n  // Save brainstorm state\n  useEffect(() => {\n    localStorage.setItem(`brainstorm-enabled-${position}`, brainstormEnabled);\n  }, [brainstormEnabled, position]);\n\n  // Save brainstorm iterations to localStorage\n  useEffect(() => {\n    localStorage.setItem(`brainstorm-iterations-${position}`, brainstormIterations);\n  }, [brainstormIterations, position]);\n\n  const handleEditName = () => {\n    setEditedName(currentConversation.name);\n    setIsEditingName(true);\n  };\n\n  const handleSaveName = () => {\n    if (editedName.trim()) {\n      setConversations(prev => prev.map(conv => \n        conv.id === currentConversationId \n          ? { ...conv, name: editedName.trim() }\n          : conv\n      ));\n    }\n    setIsEditingName(false);\n  };\n\n  const handleCancelEdit = () => {\n    setIsEditingName(false);\n    setEditedName('');\n  };\n\n  // Add brainstorm menu handler\n  const handleBrainstormContextMenu = (event) => {\n    event.preventDefault();\n    setBrainstormMenuAnchor(event.currentTarget);\n  };\n\n  // Update the brainstorm menu items to save state\n  const handleBrainstormIterationChange = (count) => {\n    setBrainstormIterations(count);\n    setBrainstormMenuAnchor(null);\n    // If iterations are set but brainstorm is not enabled, enable it\n    if (!brainstormEnabled) {\n      setBrainstormEnabled(true);\n    }\n  };\n\n  const handleDownloadBrainstorm = useCallback(() => {\n    const formatMessage = (msg) => {\n      const timestamp = new Date(msg.timestamp).toLocaleString();\n      const model = msg.metadata?.modelName || 'Unknown Model';\n      const role = msg.role === 'user' ? 'Human' : 'Assistant';\n      return `[${timestamp}] ${role} (${model}):\\n${msg.content}\\n\\n`;\n    };\n\n    const text = currentConversation.messages.map(formatMessage).join('');\n    const blob = new Blob([text], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `conversation-${currentConversation.name}-${new Date().toISOString()}.txt`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }, [currentConversation]);\n\n  // Add the missing handleBrainstormToggle function\n  const handleBrainstormToggle = useCallback(() => {\n    const newState = !brainstormEnabled;\n    setBrainstormEnabled(newState);\n    \n    // Notify other panel\n    const event = new CustomEvent('brainstormSync', {\n      detail: {\n        enabled: newState,\n        iterations: brainstormIterations,\n        fromPosition: position\n      }\n    });\n    window.dispatchEvent(event);\n  }, [brainstormEnabled, brainstormIterations, position]);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    if (!inputValue.trim() || !selectedModel || isModelSwitching) return;\n\n    const message = inputValue.trim();\n    setInputValue('');\n    onMessageSubmit?.(message);  // Call onMessageSubmit with the message\n\n    // Update conversation with user message\n    const userMessage = {\n      role: 'user',\n      content: message,\n      timestamp: new Date().toISOString(),\n      metadata: {\n        model: selectedModel,\n        modelName: models.find(m => m.id === selectedModel)?.name || 'Unknown Model'\n      }\n    };\n\n    // ... rest of the existing handleSubmit code ...\n  };\n\n  return (\n    <StyledPaper elevation={3}>\n      <ChatHeader>\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n          <Tooltip title={selectedModel ? (models.find(m => m.id === selectedModel)?.name || 'Select a model') : 'Select a model'}>\n            <Avatar sx={{ \n              bgcolor: selectedModel ? \n                getModelColor(models.find(m => m.id === selectedModel)?.name || '') :\n                'primary.main',\n              transition: 'all 0.3s ease',\n              fontWeight: 600,\n              width: 40,\n              height: 40,\n              cursor: 'help',\n              '& img': {\n                width: '100%',\n                height: '100%',\n                objectFit: 'cover',\n              }\n            }}>\n              {selectedModel ? (\n                (() => {\n                  const modelName = models.find(m => m.id === selectedModel)?.name || '';\n                  const imagePath = getModelImage(modelName);\n                  return imagePath ? (\n                    <img \n                      src={imagePath} \n                      alt={modelName}\n                      style={{\n                        width: '100%',\n                        height: '100%',\n                        objectFit: 'cover',\n                      }}\n                    />\n                  ) : (\n                    getModelLetter(modelName)\n                  );\n                })()\n              ) : 'A'}\n            </Avatar>\n          </Tooltip>\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n            {models.length > 0 ? (\n              <ModelSelector size=\"small\" sx={{ minWidth: 200 }}>\n                <Select\n                  value={selectedModel || ''}\n                  onChange={(e) => handleModelChange(e.target.value)}\n                  variant=\"standard\"\n                  displayEmpty\n                >\n                  {models.map((model) => (\n                    <MenuItem key={model.id} value={model.id}>\n                      {model.name}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </ModelSelector>\n            ) : (\n              <Typography variant=\"caption\" color=\"error\">\n                No AI models available\n              </Typography>\n            )}\n          </Box>\n        </Box>\n        <Box sx={{ display: 'flex', gap: 1 }}>\n          <Tooltip title={brainstormEnabled ? \"AI Brainstorm Active\" : \"Enable AI Brainstorm\\nRight-click to set iterations\"}>\n            <IconButton \n              onClick={handleBrainstormToggle}\n              onContextMenu={handleBrainstormContextMenu}\n              color={brainstormEnabled ? \"primary\" : \"default\"}\n              sx={{\n                position: 'relative',\n                '&::after': brainstormEnabled ? {\n                  content: '\"\"',\n                  position: 'absolute',\n                  top: '50%',\n                  left: '50%',\n                  width: '120%',\n                  height: '120%',\n                  borderRadius: '50%',\n                  transform: 'translate(-50%, -50%)',\n                  animation: 'pulse 2s infinite',\n                  backgroundColor: 'primary.main',\n                  opacity: 0.2,\n                } : {},\n                '@keyframes pulse': {\n                  '0%': {\n                    transform: 'translate(-50%, -50%) scale(0.95)',\n                    opacity: 0.5,\n                  },\n                  '70%': {\n                    transform: 'translate(-50%, -50%) scale(1.1)',\n                    opacity: 0.2,\n                  },\n                  '100%': {\n                    transform: 'translate(-50%, -50%) scale(0.95)',\n                    opacity: 0.5,\n                  },\n                },\n              }}\n            >\n              <BrainstormIcon />\n            </IconButton>\n          </Tooltip>\n          <IconButton \n            onClick={handleNewConversation}\n            title=\"New Conversation\"\n          >\n            <AddIcon />\n          </IconButton>\n          <IconButton onClick={(e) => setMenuAnchor(e.currentTarget)}>\n            <MoreIcon />\n          </IconButton>\n        </Box>\n      </ChatHeader>\n\n      <MessageList\n        ref={messageListRef}\n        onScroll={(e) => {\n          if (isScrolledToBottom()) {\n            setUserHasScrolled(false);\n          }\n        }}\n      >\n        {currentConversation?.messages?.map((msg, index) => (\n          <MessageComponent\n            key={`${msg.timestamp}-${index}-${msg.content.substring(0, 20)}`}\n            message={msg}\n            align={msg.role === 'user' ? 'right' : 'left'}\n          />\n        ))}\n        {streamingResponse && (\n          <MessageComponent\n            message={{\n              content: streamingResponse,\n              timestamp: new Date().toISOString(),\n              role: 'assistant'\n            }}\n            align=\"left\"\n          />\n        )}\n        {isThinking && (\n          <ThinkingIndicator \n            isThinking={isThinking} \n            onStop={handleStopResponse}\n          />\n        )}\n        <div ref={messagesEndRef} />\n      </MessageList>\n\n      <ChatFooter>\n        <InputContainer\n          onDragOver={(e) => {\n            e.preventDefault();\n            e.currentTarget.style.backgroundColor = 'rgba(25, 118, 210, 0.1)';\n            e.dataTransfer.dropEffect = 'copy';\n          }}\n          onDragLeave={(e) => {\n            e.preventDefault();\n            e.currentTarget.style.backgroundColor = '';\n          }}\n          onDrop={(e) => {\n            e.preventDefault();\n            e.currentTarget.style.backgroundColor = '';\n            const text = e.dataTransfer.getData('text/plain');\n            if (text) {\n              setInputValue(prev => {\n                const textarea = document.querySelector('textarea');\n                const cursorPosition = textarea?.selectionStart || prev.length;\n                return prev.slice(0, cursorPosition) + text + prev.slice(cursorPosition);\n              });\n              // Focus and scroll to end\n              const textarea = document.querySelector('textarea');\n              if (textarea) {\n                textarea.focus();\n                textarea.scrollTop = textarea.scrollHeight;\n              }\n            }\n          }}\n          sx={{\n            transition: 'all 0.2s ease',\n            '&:hover': {\n              '&[data-dragging=\"true\"]': {\n                backgroundColor: 'rgba(25, 118, 210, 0.1)',\n              }\n            }\n          }}\n        >\n          <IconButton \n            size=\"small\" \n            onClick={(e) => setEmojiAnchor(e.currentTarget)}\n          >\n            <EmojiIcon />\n          </IconButton>\n          <Popover\n            open={Boolean(emojiAnchor)}\n            anchorEl={emojiAnchor}\n            onClose={() => setEmojiAnchor(null)}\n            anchorOrigin={{\n              vertical: 'top',\n              horizontal: 'left',\n            }}\n            transformOrigin={{\n              vertical: 'bottom',\n              horizontal: 'left',\n            }}\n          >\n            <Box sx={{ \n              '.EmojiPickerReact': {\n                '--epr-bg-color': 'rgba(18, 18, 18, 0.95)',\n                '--epr-category-label-bg-color': 'rgba(18, 18, 18, 0.95)',\n                '--epr-hover-bg-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-focus-bg-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-highlight-color': 'rgba(255, 255, 255, 0.2)',\n                '--epr-search-border-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-border-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-text-color': '#fff',\n                border: 'none',\n                boxShadow: '0 4px 20px rgba(0, 0, 0, 0.3)',\n              }\n            }}>\n              <EmojiPicker\n                onEmojiClick={handleEmojiClick}\n                autoFocusSearch={false}\n                theme=\"dark\"\n                searchPlaceHolder=\"Search emojis...\"\n                width={320}\n                height={400}\n                previewConfig={{\n                  showPreview: false\n                }}\n              />\n            </Box>\n          </Popover>\n          <input\n            type=\"file\"\n            ref={fileInputRef}\n            style={{ display: 'none' }}\n            onChange={handleFileUpload}\n            accept=\"image/*,.pdf,.txt,.doc,.docx\"\n          />\n          <Tooltip title={\n            !selectedModel ? \"Please select a model first\" :\n            !supportsFileUpload() ? \"This model doesn't support file uploads\" :\n            \"Upload a file\"\n          }>\n            <span>\n              <IconButton \n                size=\"small\"\n                disabled={!supportsFileUpload()}\n                onClick={() => fileInputRef.current?.click()}\n              >\n                <ImageIcon sx={{ \n                  color: theme => !supportsFileUpload() ? \n                    theme.palette.action.disabled : \n                    'inherit'\n                }} />\n              </IconButton>\n            </span>\n          </Tooltip>\n          <TextField\n            fullWidth\n            multiline\n            maxRows={4}\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyPress={handleKeyPress}\n            placeholder=\"Type your message...\"\n            variant=\"standard\"\n            InputProps={{\n              disableUnderline: true,\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    onClick={() => handleSendMessage()}\n                    disabled={!inputValue.trim() || !selectedModel}\n                    color=\"primary\"\n                  >\n                    <SendIcon />\n                  </IconButton>\n                </InputAdornment>\n              ),\n            }}\n          />\n        </InputContainer>\n        {uploadError && (\n          <Typography \n            variant=\"caption\" \n            color=\"error\" \n            sx={{ mt: 1, display: 'block' }}\n            onClick={() => setUploadError('')}\n          >\n            {uploadError}\n          </Typography>\n        )}\n      </ChatFooter>\n\n      <Menu\n        anchorEl={menuAnchor}\n        open={Boolean(menuAnchor)}\n        onClose={() => setMenuAnchor(null)}\n      >\n        <MenuItem onClick={() => handleMenuAction('new')}>\n          New Conversation\n        </MenuItem>\n        <MenuItem onClick={() => handleMenuAction('clear')}>\n          Clear Current Conversation\n        </MenuItem>\n        <MenuItem onClick={() => handleMenuAction('delete')}>\n          Delete Current Conversation\n        </MenuItem>\n        <MenuItem onClick={handleDownloadBrainstorm}>\n          Download Conversation\n        </MenuItem>\n        <MenuItem onClick={() => setHealthChecksEnabled(prev => !prev)}>\n          {healthChecksEnabled ? '✓ ' : ''} Health Checks Enabled\n        </MenuItem>\n        <Divider />\n        <MenuItem \n          onClick={() => handleModelAction('unload')}\n          disabled={!selectedModel || isModelSwitching}\n        >\n          Unload Current Model\n        </MenuItem>\n        <MenuItem \n          onClick={() => handleModelAction('refresh')}\n          disabled={!selectedModel || isModelSwitching}\n        >\n          Refresh Current Model\n        </MenuItem>\n      </Menu>\n\n      <ConversationHeader>\n        <ConversationName>\n          {isEditingName ? (\n            <EditableTitle>\n              <input\n                value={editedName}\n                onChange={(e) => setEditedName(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && handleSaveName()}\n                autoFocus\n              />\n              <IconButton size=\"small\" onClick={handleSaveName}>\n                <CheckIcon fontSize=\"small\" />\n              </IconButton>\n              <IconButton size=\"small\" onClick={handleCancelEdit}>\n                <CloseIcon fontSize=\"small\" />\n              </IconButton>\n            </EditableTitle>\n          ) : (\n            <>\n              <Typography variant=\"h6\" component=\"div\">\n                {currentConversation.name}\n              </Typography>\n              <IconButton size=\"small\" onClick={handleEditName}>\n                <EditIcon fontSize=\"small\" />\n              </IconButton>\n              <Box className=\"timestamp-group\">\n                <Typography className=\"timestamp\" component=\"span\">\n                  {new Date(currentConversation.timestamp).toLocaleString()}\n                </Typography>\n                <Button\n                  startIcon={<AddIcon />}\n                  onClick={handleNewConversation}\n                  size=\"small\"\n                >\n                  New Chat\n                </Button>\n                <Select\n                  value={currentConversationId}\n                  onChange={(e) => setCurrentConversationId(e.target.value)}\n                  size=\"small\"\n                  sx={{ minWidth: 120 }}\n                >\n                  {conversations.map(conv => (\n                    <MenuItem key={conv.id} value={conv.id}>\n                      {conv.name} - {new Date(conv.timestamp).toLocaleDateString()}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </Box>\n            </>\n          )}\n        </ConversationName>\n      </ConversationHeader>\n\n      <Menu\n        anchorEl={brainstormMenuAnchor}\n        open={Boolean(brainstormMenuAnchor)}\n        onClose={() => setBrainstormMenuAnchor(null)}\n      >\n        <MenuItem onClick={() => handleBrainstormIterationChange(-1)}>\n          Infinite Iterations\n        </MenuItem>\n        {[1, 2, 3, 5, 10].map(count => (\n          <MenuItem \n            key={count}\n            onClick={() => handleBrainstormIterationChange(count)}\n          >\n            {count} Iteration{count > 1 ? 's' : ''}\n          </MenuItem>\n        ))}\n      </Menu>\n    </StyledPaper>\n  );\n}\n\nexport default ChatWindow; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}