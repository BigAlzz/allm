{"ast":null,"code":"var _jsxFileName = \"E:\\\\Cline\\\\allm\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Container, Grid, IconButton, Typography, Paper } from '@mui/material';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport ChatWindow from './components/ChatWindow';\nimport ServerStatus from './components/ServerStatus';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [serverStatus, setServerStatus] = useState('checking');\n  const [models, setModels] = useState([]);\n  const [chats, setChats] = useState(() => {\n    // Load chat histories from localStorage\n    const savedChats = localStorage.getItem('chatHistories');\n    return savedChats ? JSON.parse(savedChats) : {\n      left: [],\n      right: []\n    };\n  });\n  const [loading, setLoading] = useState({\n    left: false,\n    right: false\n  });\n  const [thinking, setThinking] = useState({\n    left: false,\n    right: false\n  });\n  const [activeRequests, setActiveRequests] = useState({\n    left: null,\n    right: null\n  });\n  const [streamingResponses, setStreamingResponses] = useState({\n    left: '',\n    right: ''\n  });\n\n  // Save chats to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('chatHistories', JSON.stringify(chats));\n  }, [chats]);\n  const checkServer = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/models');\n      setServerStatus(response.data.status);\n      setModels(response.data.models);\n    } catch (error) {\n      setServerStatus('offline');\n      setModels([]);\n    }\n  };\n  useEffect(() => {\n    checkServer();\n    // Poll for server status every 30 seconds\n    const interval = setInterval(checkServer, 30000);\n    return () => clearInterval(interval);\n  }, []);\n  const handleStopResponse = chatId => {\n    if (activeRequests[chatId]) {\n      activeRequests[chatId].abort();\n      setActiveRequests(prev => ({\n        ...prev,\n        [chatId]: null\n      }));\n      setLoading(prev => ({\n        ...prev,\n        [chatId]: false\n      }));\n      setThinking(prev => ({\n        ...prev,\n        [chatId]: false\n      }));\n      if (streamingResponses[chatId]) {\n        setChats(prev => ({\n          ...prev,\n          [chatId]: [...prev[chatId], {\n            role: 'assistant',\n            content: streamingResponses[chatId],\n            timestamp: new Date().toISOString()\n          }]\n        }));\n        setStreamingResponses(prev => ({\n          ...prev,\n          [chatId]: ''\n        }));\n      }\n    }\n  };\n  const handleSendMessage = async (message, model, chatId) => {\n    const updatedChats = {\n      ...chats,\n      [chatId]: [...chats[chatId], {\n        role: 'user',\n        content: message,\n        timestamp: new Date().toISOString()\n      }]\n    };\n    setChats(updatedChats);\n    setLoading(prev => ({\n      ...prev,\n      [chatId]: true\n    }));\n    setThinking(prev => ({\n      ...prev,\n      [chatId]: false\n    }));\n    setStreamingResponses(prev => ({\n      ...prev,\n      [chatId]: ''\n    }));\n    const controller = new AbortController();\n    setActiveRequests(prev => ({\n      ...prev,\n      [chatId]: controller\n    }));\n    try {\n      const response = await fetch('http://localhost:5000/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          chatId,\n          messages: updatedChats[chatId],\n          model\n        }),\n        signal: controller.signal\n      });\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      let responseText = '';\n      while (true) {\n        const {\n          value,\n          done\n        } = await reader.read();\n        if (done) break;\n        const chunk = decoder.decode(value);\n        const lines = chunk.split('\\n');\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            try {\n              const data = JSON.parse(line.slice(5));\n\n              // Handle different streaming states\n              if (data.status === 'thinking') {\n                setThinking(prev => ({\n                  ...prev,\n                  [chatId]: true\n                }));\n              } else if (data.status === 'streaming') {\n                setThinking(prev => ({\n                  ...prev,\n                  [chatId]: false\n                }));\n              } else if (data.status === 'done') {\n                // Response is complete\n                continue;\n              } else if (data.chunk) {\n                responseText += data.chunk;\n                setStreamingResponses(prev => ({\n                  ...prev,\n                  [chatId]: responseText\n                }));\n              }\n            } catch (e) {\n              console.error('Error parsing SSE data:', e);\n            }\n          }\n        }\n      }\n      setChats(prev => ({\n        ...prev,\n        [chatId]: [...prev[chatId], {\n          role: 'assistant',\n          content: responseText,\n          timestamp: new Date().toISOString()\n        }]\n      }));\n    } catch (error) {\n      if (error.name !== 'AbortError') {\n        console.error('Error sending message:', error);\n        setChats(prev => ({\n          ...prev,\n          [chatId]: [...prev[chatId], {\n            role: 'assistant',\n            content: '❌ Error: Failed to get response from AI. Please try again.',\n            timestamp: new Date().toISOString()\n          }]\n        }));\n      }\n    } finally {\n      setLoading(prev => ({\n        ...prev,\n        [chatId]: false\n      }));\n      setThinking(prev => ({\n        ...prev,\n        [chatId]: false\n      }));\n      setActiveRequests(prev => ({\n        ...prev,\n        [chatId]: null\n      }));\n      setStreamingResponses(prev => ({\n        ...prev,\n        [chatId]: ''\n      }));\n    }\n  };\n  const clearChatHistory = chatId => {\n    setChats(prev => ({\n      ...prev,\n      [chatId]: []\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"xl\",\n    sx: {\n      height: '100vh',\n      py: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 2,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        component: \"h1\",\n        children: \"Dual Chat Interface\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center',\n          gap: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(ServerStatus, {\n          status: serverStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: checkServer,\n          color: \"primary\",\n          children: /*#__PURE__*/_jsxDEV(RefreshIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      sx: {\n        height: 'calc(100% - 80px)'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          sx: {\n            height: '100%',\n            overflow: 'hidden'\n          },\n          children: /*#__PURE__*/_jsxDEV(ChatWindow, {\n            messages: chats.left,\n            streamingResponse: streamingResponses.left,\n            onSendMessage: (msg, model) => handleSendMessage(msg, model, 'left'),\n            onStopResponse: () => handleStopResponse('left'),\n            onClearHistory: () => clearChatHistory('left'),\n            title: \"Chat Window 1\",\n            models: models,\n            isLoading: loading.left,\n            isThinking: thinking.left\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          sx: {\n            height: '100%',\n            overflow: 'hidden'\n          },\n          children: /*#__PURE__*/_jsxDEV(ChatWindow, {\n            messages: chats.right,\n            streamingResponse: streamingResponses.right,\n            onSendMessage: (msg, model) => handleSendMessage(msg, model, 'right'),\n            onStopResponse: () => handleStopResponse('right'),\n            onClearHistory: () => clearChatHistory('right'),\n            title: \"Chat Window 2\",\n            models: models,\n            isLoading: loading.right,\n            isThinking: thinking.right\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"jnDq5fShol3F+csQjyl0cEhqqXc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Box","Container","Grid","IconButton","Typography","Paper","RefreshIcon","ChatWindow","ServerStatus","axios","jsxDEV","_jsxDEV","App","_s","serverStatus","setServerStatus","models","setModels","chats","setChats","savedChats","localStorage","getItem","JSON","parse","left","right","loading","setLoading","thinking","setThinking","activeRequests","setActiveRequests","streamingResponses","setStreamingResponses","setItem","stringify","checkServer","response","get","data","status","error","interval","setInterval","clearInterval","handleStopResponse","chatId","abort","prev","role","content","timestamp","Date","toISOString","handleSendMessage","message","model","updatedChats","controller","AbortController","fetch","method","headers","body","messages","signal","reader","getReader","decoder","TextDecoder","responseText","value","done","read","chunk","decode","lines","split","line","startsWith","slice","e","console","name","clearChatHistory","maxWidth","sx","height","py","children","mb","display","alignItems","justifyContent","variant","component","fileName","_jsxFileName","lineNumber","columnNumber","gap","onClick","color","container","spacing","item","xs","elevation","overflow","streamingResponse","onSendMessage","msg","onStopResponse","onClearHistory","title","isLoading","isThinking","_c","$RefreshReg$"],"sources":["E:/Cline/allm/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Box, Container, Grid, IconButton, Typography, Paper } from '@mui/material';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\nimport ChatWindow from './components/ChatWindow';\r\nimport ServerStatus from './components/ServerStatus';\r\nimport axios from 'axios';\r\n\r\nfunction App() {\r\n  const [serverStatus, setServerStatus] = useState('checking');\r\n  const [models, setModels] = useState([]);\r\n  const [chats, setChats] = useState(() => {\r\n    // Load chat histories from localStorage\r\n    const savedChats = localStorage.getItem('chatHistories');\r\n    return savedChats ? JSON.parse(savedChats) : {\r\n      left: [],\r\n      right: []\r\n    };\r\n  });\r\n  const [loading, setLoading] = useState({\r\n    left: false,\r\n    right: false\r\n  });\r\n  const [thinking, setThinking] = useState({\r\n    left: false,\r\n    right: false\r\n  });\r\n  const [activeRequests, setActiveRequests] = useState({\r\n    left: null,\r\n    right: null\r\n  });\r\n  const [streamingResponses, setStreamingResponses] = useState({\r\n    left: '',\r\n    right: ''\r\n  });\r\n\r\n  // Save chats to localStorage whenever they change\r\n  useEffect(() => {\r\n    localStorage.setItem('chatHistories', JSON.stringify(chats));\r\n  }, [chats]);\r\n\r\n  const checkServer = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:5000/api/models');\r\n      setServerStatus(response.data.status);\r\n      setModels(response.data.models);\r\n    } catch (error) {\r\n      setServerStatus('offline');\r\n      setModels([]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkServer();\r\n    // Poll for server status every 30 seconds\r\n    const interval = setInterval(checkServer, 30000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const handleStopResponse = (chatId) => {\r\n    if (activeRequests[chatId]) {\r\n      activeRequests[chatId].abort();\r\n      setActiveRequests(prev => ({ ...prev, [chatId]: null }));\r\n      setLoading(prev => ({ ...prev, [chatId]: false }));\r\n      setThinking(prev => ({ ...prev, [chatId]: false }));\r\n      \r\n      if (streamingResponses[chatId]) {\r\n        setChats(prev => ({\r\n          ...prev,\r\n          [chatId]: [...prev[chatId], { \r\n            role: 'assistant', \r\n            content: streamingResponses[chatId],\r\n            timestamp: new Date().toISOString()\r\n          }]\r\n        }));\r\n        setStreamingResponses(prev => ({ ...prev, [chatId]: '' }));\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSendMessage = async (message, model, chatId) => {\r\n    const updatedChats = {\r\n      ...chats,\r\n      [chatId]: [...chats[chatId], { \r\n        role: 'user', \r\n        content: message,\r\n        timestamp: new Date().toISOString()\r\n      }]\r\n    };\r\n    setChats(updatedChats);\r\n    setLoading(prev => ({ ...prev, [chatId]: true }));\r\n    setThinking(prev => ({ ...prev, [chatId]: false }));\r\n    setStreamingResponses(prev => ({ ...prev, [chatId]: '' }));\r\n\r\n    const controller = new AbortController();\r\n    setActiveRequests(prev => ({ ...prev, [chatId]: controller }));\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/chat', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          chatId,\r\n          messages: updatedChats[chatId],\r\n          model\r\n        }),\r\n        signal: controller.signal\r\n      });\r\n\r\n      const reader = response.body.getReader();\r\n      const decoder = new TextDecoder();\r\n      let responseText = '';\r\n\r\n      while (true) {\r\n        const { value, done } = await reader.read();\r\n        if (done) break;\r\n\r\n        const chunk = decoder.decode(value);\r\n        const lines = chunk.split('\\n');\r\n\r\n        for (const line of lines) {\r\n          if (line.startsWith('data: ')) {\r\n            try {\r\n              const data = JSON.parse(line.slice(5));\r\n              \r\n              // Handle different streaming states\r\n              if (data.status === 'thinking') {\r\n                setThinking(prev => ({ ...prev, [chatId]: true }));\r\n              } else if (data.status === 'streaming') {\r\n                setThinking(prev => ({ ...prev, [chatId]: false }));\r\n              } else if (data.status === 'done') {\r\n                // Response is complete\r\n                continue;\r\n              } else if (data.chunk) {\r\n                responseText += data.chunk;\r\n                setStreamingResponses(prev => ({\r\n                  ...prev,\r\n                  [chatId]: responseText\r\n                }));\r\n              }\r\n            } catch (e) {\r\n              console.error('Error parsing SSE data:', e);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      setChats(prev => ({\r\n        ...prev,\r\n        [chatId]: [...prev[chatId], { \r\n          role: 'assistant', \r\n          content: responseText,\r\n          timestamp: new Date().toISOString()\r\n        }]\r\n      }));\r\n    } catch (error) {\r\n      if (error.name !== 'AbortError') {\r\n        console.error('Error sending message:', error);\r\n        setChats(prev => ({\r\n          ...prev,\r\n          [chatId]: [...prev[chatId], { \r\n            role: 'assistant', \r\n            content: '❌ Error: Failed to get response from AI. Please try again.',\r\n            timestamp: new Date().toISOString()\r\n          }]\r\n        }));\r\n      }\r\n    } finally {\r\n      setLoading(prev => ({ ...prev, [chatId]: false }));\r\n      setThinking(prev => ({ ...prev, [chatId]: false }));\r\n      setActiveRequests(prev => ({ ...prev, [chatId]: null }));\r\n      setStreamingResponses(prev => ({ ...prev, [chatId]: '' }));\r\n    }\r\n  };\r\n\r\n  const clearChatHistory = (chatId) => {\r\n    setChats(prev => ({\r\n      ...prev,\r\n      [chatId]: []\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\" sx={{ height: '100vh', py: 2 }}>\r\n      <Box sx={{ mb: 2, display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n        <Typography variant=\"h4\" component=\"h1\">\r\n          Dual Chat Interface\r\n        </Typography>\r\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n          <ServerStatus status={serverStatus} />\r\n          <IconButton onClick={checkServer} color=\"primary\">\r\n            <RefreshIcon />\r\n          </IconButton>\r\n        </Box>\r\n      </Box>\r\n\r\n      <Grid container spacing={2} sx={{ height: 'calc(100% - 80px)' }}>\r\n        <Grid item xs={6}>\r\n          <Paper elevation={3} sx={{ height: '100%', overflow: 'hidden' }}>\r\n            <ChatWindow\r\n              messages={chats.left}\r\n              streamingResponse={streamingResponses.left}\r\n              onSendMessage={(msg, model) => handleSendMessage(msg, model, 'left')}\r\n              onStopResponse={() => handleStopResponse('left')}\r\n              onClearHistory={() => clearChatHistory('left')}\r\n              title=\"Chat Window 1\"\r\n              models={models}\r\n              isLoading={loading.left}\r\n              isThinking={thinking.left}\r\n            />\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <Paper elevation={3} sx={{ height: '100%', overflow: 'hidden' }}>\r\n            <ChatWindow\r\n              messages={chats.right}\r\n              streamingResponse={streamingResponses.right}\r\n              onSendMessage={(msg, model) => handleSendMessage(msg, model, 'right')}\r\n              onStopResponse={() => handleStopResponse('right')}\r\n              onClearHistory={() => clearChatHistory('right')}\r\n              title=\"Chat Window 2\"\r\n              models={models}\r\n              isLoading={loading.right}\r\n              isThinking={thinking.right}\r\n            />\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}