{"ast":null,"code":"// Process a message with a specific assistant/panel\nexport const processWithAssistant = async (panelId, message, modelId = 'default', config = null) => {\n  try {\n    const response = await fetch('/api/brainstorm/process', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        panelId,\n        message,\n        model: modelId,\n        config\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to process with assistant');\n    }\n    const data = await response.json();\n    return {\n      thought_process: data.thought_process,\n      response: data.response,\n      model_id: data.model_id,\n      config: data.config,\n      timestamp: data.timestamp\n    };\n  } catch (error) {\n    console.error('Error processing with assistant:', error);\n    throw error;\n  }\n};\n\n// Generate a summary from all assistant responses\nexport const generateSummary = results => {\n  const summary = {\n    individual_responses: results.map((result, index) => ({\n      assistant: `Panel ${index + 1}`,\n      model: result.response.model_id,\n      config: result.response.config,\n      thought_process: result.response.thought_process,\n      response: result.response.response\n    })),\n    summary: summarizeResponses(results),\n    verdict: generateVerdict(results),\n    timestamp: new Date().toISOString()\n  };\n  return summary;\n};\n\n// Check health of specified models\nexport const checkModelHealth = async modelIds => {\n  try {\n    const response = await fetch('/api/models/health', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        modelIds\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to check model health');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error checking model health:', error);\n    throw error;\n  }\n};\n\n// Helper function to summarize all responses\nconst summarizeResponses = results => {\n  // Combine key points from all responses\n  const points = results.flatMap(result => result.response.response.split('\\n').filter(line => line.trim().length > 0));\n  return points.join('\\n');\n};\n\n// Helper function to generate a final verdict\nconst generateVerdict = results => {\n  // Analyze responses and generate a consensus or final decision\n  const consensus = results.reduce((acc, result) => {\n    return acc + '\\n' + result.response.response;\n  }, '');\n  return `Final Verdict:\\n${consensus}`;\n};","map":{"version":3,"names":["processWithAssistant","panelId","message","modelId","config","response","fetch","method","headers","body","JSON","stringify","model","ok","errorData","json","Error","error","data","thought_process","model_id","timestamp","console","generateSummary","results","summary","individual_responses","map","result","index","assistant","summarizeResponses","verdict","generateVerdict","Date","toISOString","checkModelHealth","modelIds","points","flatMap","split","filter","line","trim","length","join","consensus","reduce","acc"],"sources":["E:/Cline/allm/frontend/src/utils/brainstormUtils.js"],"sourcesContent":["// Process a message with a specific assistant/panel\r\nexport const processWithAssistant = async (panelId, message, modelId = 'default', config = null) => {\r\n  try {\r\n    const response = await fetch('/api/brainstorm/process', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        panelId,\r\n        message,\r\n        model: modelId,\r\n        config\r\n      }),\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.error || 'Failed to process with assistant');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return {\r\n      thought_process: data.thought_process,\r\n      response: data.response,\r\n      model_id: data.model_id,\r\n      config: data.config,\r\n      timestamp: data.timestamp,\r\n    };\r\n  } catch (error) {\r\n    console.error('Error processing with assistant:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Generate a summary from all assistant responses\r\nexport const generateSummary = (results) => {\r\n  const summary = {\r\n    individual_responses: results.map((result, index) => ({\r\n      assistant: `Panel ${index + 1}`,\r\n      model: result.response.model_id,\r\n      config: result.response.config,\r\n      thought_process: result.response.thought_process,\r\n      response: result.response.response,\r\n    })),\r\n    summary: summarizeResponses(results),\r\n    verdict: generateVerdict(results),\r\n    timestamp: new Date().toISOString(),\r\n  };\r\n  \r\n  return summary;\r\n};\r\n\r\n// Check health of specified models\r\nexport const checkModelHealth = async (modelIds) => {\r\n  try {\r\n    const response = await fetch('/api/models/health', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ modelIds }),\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to check model health');\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error checking model health:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Helper function to summarize all responses\r\nconst summarizeResponses = (results) => {\r\n  // Combine key points from all responses\r\n  const points = results.flatMap(result => \r\n    result.response.response.split('\\n')\r\n      .filter(line => line.trim().length > 0)\r\n  );\r\n  \r\n  return points.join('\\n');\r\n};\r\n\r\n// Helper function to generate a final verdict\r\nconst generateVerdict = (results) => {\r\n  // Analyze responses and generate a consensus or final decision\r\n  const consensus = results.reduce((acc, result) => {\r\n    return acc + '\\n' + result.response.response;\r\n  }, '');\r\n  \r\n  return `Final Verdict:\\n${consensus}`;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}