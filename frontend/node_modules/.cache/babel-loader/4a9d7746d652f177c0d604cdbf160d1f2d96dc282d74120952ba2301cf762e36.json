{"ast":null,"code":"const LM_STUDIO_ENDPOINTS = {\n  models: '/v1/models',\n  chat: '/v1/chat/completions',\n  completions: '/v1/completions',\n  embeddings: '/v1/embeddings'\n};\nconst DEFAULT_HEADERS = {\n  'Accept': 'application/json',\n  'Content-Type': 'application/json'\n};\n\n// Enhanced network diagnostics\nasync function runNetworkDiagnostics(serverUrl) {\n  const diagnostics = {\n    serverReachable: false,\n    endpoints: {\n      models: false,\n      chat: false,\n      completions: false,\n      embeddings: false\n    },\n    modelList: [],\n    details: [],\n    errors: []\n  };\n  try {\n    // Basic connection test with models endpoint\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 5000);\n    try {\n      // Try direct GET request\n      const response = await fetch(`${serverUrl}${LM_STUDIO_ENDPOINTS.models}`, {\n        method: 'GET',\n        headers: DEFAULT_HEADERS,\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      diagnostics.serverReachable = response.ok;\n      diagnostics.details.push(`Server connection: ${response.ok ? 'Success' : 'Failed'}`);\n      diagnostics.details.push(`Response status: ${response.status} ${response.statusText}`);\n      if (response.ok) {\n        const data = await response.json();\n        diagnostics.endpoints.models = true;\n        diagnostics.modelList = data.data || [];\n        diagnostics.details.push(`Available models: ${diagnostics.modelList.map(m => m.id).join(', ')}`);\n      } else {\n        try {\n          const errorText = await response.text();\n          diagnostics.errors.push(`Server response: ${errorText}`);\n        } catch (e) {\n          diagnostics.errors.push('Could not read error response');\n        }\n      }\n    } catch (error) {\n      if (error.name === 'AbortError') {\n        diagnostics.errors.push('Connection timed out after 5 seconds');\n      } else if (error.message === 'Failed to fetch') {\n        diagnostics.errors.push(`Network error: Unable to reach ${serverUrl}\\nPossible causes:\\n1. Server is not running\\n2. Network/firewall blocking connection\\n3. Incorrect server address`);\n      } else {\n        diagnostics.errors.push(`Connection error: ${error.message}`);\n      }\n    }\n\n    // Only test other endpoints if server is reachable\n    if (diagnostics.serverReachable && diagnostics.modelList.length > 0) {\n      const model = diagnostics.modelList[0].id;\n\n      // Test chat completions endpoint\n      try {\n        const chatResponse = await fetch(`${serverUrl}${LM_STUDIO_ENDPOINTS.chat}`, {\n          method: 'POST',\n          headers: DEFAULT_HEADERS,\n          body: JSON.stringify({\n            model,\n            messages: [{\n              role: 'user',\n              content: 'Test'\n            }],\n            stream: false,\n            max_tokens: 1\n          })\n        });\n        diagnostics.endpoints.chat = chatResponse.ok;\n        diagnostics.details.push(`Chat endpoint: ${chatResponse.ok ? 'Available' : 'Not Available'}`);\n        if (!chatResponse.ok) {\n          const errorText = await chatResponse.text();\n          diagnostics.errors.push(`Chat endpoint error: ${errorText}`);\n        }\n      } catch (error) {\n        diagnostics.errors.push(`Chat endpoint error: ${error.message}`);\n      }\n\n      // Test completions endpoint\n      try {\n        const completionsResponse = await fetch(`${serverUrl}${LM_STUDIO_ENDPOINTS.completions}`, {\n          method: 'POST',\n          headers: DEFAULT_HEADERS,\n          body: JSON.stringify({\n            model,\n            prompt: 'Test',\n            stream: false,\n            max_tokens: 1\n          })\n        });\n        diagnostics.endpoints.completions = completionsResponse.ok;\n        diagnostics.details.push(`Completions endpoint: ${completionsResponse.ok ? 'Available' : 'Not Available'}`);\n        if (!completionsResponse.ok) {\n          const errorText = await completionsResponse.text();\n          diagnostics.errors.push(`Completions endpoint error: ${errorText}`);\n        }\n      } catch (error) {\n        diagnostics.errors.push(`Completions endpoint error: ${error.message}`);\n      }\n\n      // Test embeddings endpoint\n      try {\n        const embeddingModel = diagnostics.modelList.find(m => m.id.includes('embed'));\n        if (embeddingModel) {\n          const embeddingsResponse = await fetch(`${serverUrl}${LM_STUDIO_ENDPOINTS.embeddings}`, {\n            method: 'POST',\n            headers: DEFAULT_HEADERS,\n            body: JSON.stringify({\n              model: embeddingModel.id,\n              input: 'Test'\n            })\n          });\n          diagnostics.endpoints.embeddings = embeddingsResponse.ok;\n          diagnostics.details.push(`Embeddings endpoint: ${embeddingsResponse.ok ? 'Available' : 'Not Available'}`);\n          if (!embeddingsResponse.ok) {\n            const errorText = await embeddingsResponse.text();\n            diagnostics.errors.push(`Embeddings endpoint error: ${errorText}`);\n          }\n        } else {\n          diagnostics.details.push('No embedding model available');\n        }\n      } catch (error) {\n        diagnostics.errors.push(`Embeddings endpoint error: ${error.message}`);\n      }\n    }\n  } catch (error) {\n    diagnostics.errors.push(`General error: ${error.message}`);\n  }\n  return diagnostics;\n}\nexport { runNetworkDiagnostics, LM_STUDIO_ENDPOINTS, DEFAULT_HEADERS };","map":{"version":3,"names":["LM_STUDIO_ENDPOINTS","models","chat","completions","embeddings","DEFAULT_HEADERS","runNetworkDiagnostics","serverUrl","diagnostics","serverReachable","endpoints","modelList","details","errors","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","method","headers","signal","clearTimeout","ok","push","status","statusText","data","json","map","m","id","join","errorText","text","e","error","name","message","length","model","chatResponse","body","JSON","stringify","messages","role","content","stream","max_tokens","completionsResponse","prompt","embeddingModel","find","includes","embeddingsResponse","input"],"sources":["E:/Cline/allm/frontend/src/utils/networkDiagnostics.js"],"sourcesContent":["const LM_STUDIO_ENDPOINTS = {\r\n  models: '/v1/models',\r\n  chat: '/v1/chat/completions',\r\n  completions: '/v1/completions',\r\n  embeddings: '/v1/embeddings'\r\n};\r\n\r\nconst DEFAULT_HEADERS = {\r\n  'Accept': 'application/json',\r\n  'Content-Type': 'application/json'\r\n};\r\n\r\n// Enhanced network diagnostics\r\nasync function runNetworkDiagnostics(serverUrl) {\r\n  const diagnostics = {\r\n    serverReachable: false,\r\n    endpoints: {\r\n      models: false,\r\n      chat: false,\r\n      completions: false,\r\n      embeddings: false\r\n    },\r\n    modelList: [],\r\n    details: [],\r\n    errors: []\r\n  };\r\n\r\n  try {\r\n    // Basic connection test with models endpoint\r\n    const controller = new AbortController();\r\n    const timeoutId = setTimeout(() => controller.abort(), 5000);\r\n    \r\n    try {\r\n      // Try direct GET request\r\n      const response = await fetch(`${serverUrl}${LM_STUDIO_ENDPOINTS.models}`, {\r\n        method: 'GET',\r\n        headers: DEFAULT_HEADERS,\r\n        signal: controller.signal\r\n      });\r\n\r\n      clearTimeout(timeoutId);\r\n\r\n      diagnostics.serverReachable = response.ok;\r\n      diagnostics.details.push(`Server connection: ${response.ok ? 'Success' : 'Failed'}`);\r\n      diagnostics.details.push(`Response status: ${response.status} ${response.statusText}`);\r\n      \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        diagnostics.endpoints.models = true;\r\n        diagnostics.modelList = data.data || [];\r\n        diagnostics.details.push(`Available models: ${diagnostics.modelList.map(m => m.id).join(', ')}`);\r\n      } else {\r\n        try {\r\n          const errorText = await response.text();\r\n          diagnostics.errors.push(`Server response: ${errorText}`);\r\n        } catch (e) {\r\n          diagnostics.errors.push('Could not read error response');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      if (error.name === 'AbortError') {\r\n        diagnostics.errors.push('Connection timed out after 5 seconds');\r\n      } else if (error.message === 'Failed to fetch') {\r\n        diagnostics.errors.push(`Network error: Unable to reach ${serverUrl}\\nPossible causes:\\n1. Server is not running\\n2. Network/firewall blocking connection\\n3. Incorrect server address`);\r\n      } else {\r\n        diagnostics.errors.push(`Connection error: ${error.message}`);\r\n      }\r\n    }\r\n\r\n    // Only test other endpoints if server is reachable\r\n    if (diagnostics.serverReachable && diagnostics.modelList.length > 0) {\r\n      const model = diagnostics.modelList[0].id;\r\n\r\n      // Test chat completions endpoint\r\n      try {\r\n        const chatResponse = await fetch(`${serverUrl}${LM_STUDIO_ENDPOINTS.chat}`, {\r\n          method: 'POST',\r\n          headers: DEFAULT_HEADERS,\r\n          body: JSON.stringify({\r\n            model,\r\n            messages: [{ role: 'user', content: 'Test' }],\r\n            stream: false,\r\n            max_tokens: 1\r\n          })\r\n        });\r\n        \r\n        diagnostics.endpoints.chat = chatResponse.ok;\r\n        diagnostics.details.push(`Chat endpoint: ${chatResponse.ok ? 'Available' : 'Not Available'}`);\r\n        \r\n        if (!chatResponse.ok) {\r\n          const errorText = await chatResponse.text();\r\n          diagnostics.errors.push(`Chat endpoint error: ${errorText}`);\r\n        }\r\n      } catch (error) {\r\n        diagnostics.errors.push(`Chat endpoint error: ${error.message}`);\r\n      }\r\n\r\n      // Test completions endpoint\r\n      try {\r\n        const completionsResponse = await fetch(`${serverUrl}${LM_STUDIO_ENDPOINTS.completions}`, {\r\n          method: 'POST',\r\n          headers: DEFAULT_HEADERS,\r\n          body: JSON.stringify({\r\n            model,\r\n            prompt: 'Test',\r\n            stream: false,\r\n            max_tokens: 1\r\n          })\r\n        });\r\n        \r\n        diagnostics.endpoints.completions = completionsResponse.ok;\r\n        diagnostics.details.push(`Completions endpoint: ${completionsResponse.ok ? 'Available' : 'Not Available'}`);\r\n        \r\n        if (!completionsResponse.ok) {\r\n          const errorText = await completionsResponse.text();\r\n          diagnostics.errors.push(`Completions endpoint error: ${errorText}`);\r\n        }\r\n      } catch (error) {\r\n        diagnostics.errors.push(`Completions endpoint error: ${error.message}`);\r\n      }\r\n\r\n      // Test embeddings endpoint\r\n      try {\r\n        const embeddingModel = diagnostics.modelList.find(m => m.id.includes('embed'));\r\n        if (embeddingModel) {\r\n          const embeddingsResponse = await fetch(`${serverUrl}${LM_STUDIO_ENDPOINTS.embeddings}`, {\r\n            method: 'POST',\r\n            headers: DEFAULT_HEADERS,\r\n            body: JSON.stringify({\r\n              model: embeddingModel.id,\r\n              input: 'Test'\r\n            })\r\n          });\r\n          \r\n          diagnostics.endpoints.embeddings = embeddingsResponse.ok;\r\n          diagnostics.details.push(`Embeddings endpoint: ${embeddingsResponse.ok ? 'Available' : 'Not Available'}`);\r\n          \r\n          if (!embeddingsResponse.ok) {\r\n            const errorText = await embeddingsResponse.text();\r\n            diagnostics.errors.push(`Embeddings endpoint error: ${errorText}`);\r\n          }\r\n        } else {\r\n          diagnostics.details.push('No embedding model available');\r\n        }\r\n      } catch (error) {\r\n        diagnostics.errors.push(`Embeddings endpoint error: ${error.message}`);\r\n      }\r\n    }\r\n  } catch (error) {\r\n    diagnostics.errors.push(`General error: ${error.message}`);\r\n  }\r\n\r\n  return diagnostics;\r\n}\r\n\r\nexport {\r\n  runNetworkDiagnostics,\r\n  LM_STUDIO_ENDPOINTS,\r\n  DEFAULT_HEADERS\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}