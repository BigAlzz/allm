{"ast":null,"code":"var _jsxFileName = \"E:\\\\Cline\\\\allm\\\\frontend\\\\src\\\\components\\\\ChatWindow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useCallback, useMemo } from 'react';\nimport { Box, Paper, TextField, IconButton, Typography, Avatar, Menu, MenuItem, Select, FormControl, CircularProgress, InputAdornment, Popover, Tooltip, ClickAwayListener, Divider } from '@mui/material';\nimport { Send as SendIcon, MoreVert as MoreIcon, VideoCall as VideoIcon, OpenInFull as ExpandIcon, Image as ImageIcon, EmojiEmotions as EmojiIcon, Stop as StopIcon, Add as AddIcon, NoteAdd as NoteAddIcon } from '@mui/icons-material';\nimport ReactMarkdown from 'react-markdown';\nimport { styled } from '@mui/material/styles';\nimport EmojiPicker from 'emoji-picker-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledPaper = styled(Paper)(({\n  theme\n}) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  height: '100%',\n  flex: 1,\n  overflow: 'hidden',\n  backgroundColor: theme.palette.background.paper,\n  borderRadius: theme.spacing(3)\n}));\n_c = StyledPaper;\nconst ChatHeader = styled(Box)(({\n  theme\n}) => ({\n  padding: theme.spacing(2),\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  borderBottom: `1px solid ${theme.palette.divider}`\n}));\n_c2 = ChatHeader;\nconst MessageList = styled(Box)(({\n  theme\n}) => ({\n  flexGrow: 1,\n  overflow: 'auto',\n  padding: theme.spacing(2),\n  backgroundColor: theme.palette.background.default,\n  '&::-webkit-scrollbar': {\n    width: '4px'\n  },\n  '&::-webkit-scrollbar-track': {\n    background: 'transparent'\n  },\n  '&::-webkit-scrollbar-thumb': {\n    background: theme.palette.grey[600],\n    borderRadius: '4px'\n  }\n}));\n_c3 = MessageList;\nconst Message = styled(Box)(({\n  theme,\n  align\n}) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: align === 'right' ? 'flex-end' : 'flex-start',\n  marginBottom: theme.spacing(2)\n}));\n_c4 = Message;\nconst MessageContent = styled(Box)(({\n  theme,\n  align\n}) => ({\n  maxWidth: '70%',\n  padding: theme.spacing(1.5),\n  borderRadius: theme.spacing(2),\n  backgroundColor: align === 'right' ? theme.palette.primary.main : theme.palette.background.paper,\n  color: align === 'right' ? theme.palette.primary.contrastText : theme.palette.text.primary,\n  boxShadow: theme.shadows[1],\n  '& p': {\n    margin: 0\n  },\n  '& pre': {\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(1),\n    borderRadius: theme.spacing(1),\n    overflow: 'auto',\n    margin: theme.spacing(1, 0),\n    fontFamily: 'monospace'\n  },\n  '& code': {\n    fontFamily: 'monospace',\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(0.25, 0.5),\n    borderRadius: theme.spacing(0.5)\n  },\n  '& ul, & ol': {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    paddingLeft: theme.spacing(3)\n  },\n  '& li': {\n    marginBottom: theme.spacing(0.5)\n  },\n  '& blockquote': {\n    borderLeft: `3px solid ${theme.palette.divider}`,\n    margin: theme.spacing(1, 0),\n    paddingLeft: theme.spacing(2),\n    color: theme.palette.text.secondary\n  }\n}));\n_c5 = MessageContent;\nconst ChatFooter = styled(Box)(({\n  theme\n}) => ({\n  padding: theme.spacing(2),\n  borderTop: `1px solid ${theme.palette.divider}`,\n  backgroundColor: theme.palette.background.paper\n}));\n_c6 = ChatFooter;\nconst InputContainer = styled(Box)(({\n  theme\n}) => ({\n  display: 'flex',\n  alignItems: 'center',\n  gap: theme.spacing(1),\n  backgroundColor: theme.palette.background.default,\n  borderRadius: theme.spacing(3),\n  padding: theme.spacing(1)\n}));\n_c7 = InputContainer;\nconst ErrorMessage = styled(Box)(({\n  theme\n}) => ({\n  padding: theme.spacing(1, 2),\n  backgroundColor: theme.palette.error.dark,\n  color: theme.palette.error.contrastText,\n  borderRadius: theme.spacing(1),\n  display: 'flex',\n  alignItems: 'center',\n  gap: theme.spacing(1),\n  marginBottom: theme.spacing(2)\n}));\nconst ModelSelector = styled(FormControl)(({\n  theme\n}) => ({\n  '& .MuiSelect-select': {\n    paddingBottom: 0\n  },\n  '& .MuiInput-underline:before': {\n    borderBottomColor: 'transparent'\n  }\n}));\n_c8 = ModelSelector;\nconst ConversationSelector = styled(FormControl)(({\n  theme\n}) => ({\n  minWidth: 200,\n  '& .MuiSelect-select': {\n    fontSize: '0.875rem'\n  }\n}));\n_c9 = ConversationSelector;\nfunction ChatWindow({\n  position,\n  models,\n  streamingResponse,\n  isThinking,\n  setStreamingResponses,\n  setThinking,\n  serverUrl\n}) {\n  _s();\n  var _models$find, _models$find2;\n  // Move startNewConversation definition before any hooks that use it\n  const startNewConversation = useCallback(() => {\n    const newId = Date.now().toString();\n    const newConversation = {\n      id: newId,\n      name: 'New Conversation',\n      messages: [],\n      timestamp: new Date().toISOString()\n    };\n    setConversations(prev => [newConversation, ...prev]);\n    setCurrentConversationId(newId);\n  }, []); // Empty dependency array since it only uses setState functions\n\n  // Initialize state with timestamp-based ID\n  const [conversations, setConversations] = useState(() => {\n    const saved = localStorage.getItem(`conversations-${position}`);\n    const initialId = Date.now().toString();\n    return saved ? JSON.parse(saved) : [{\n      id: initialId,\n      name: 'New Conversation',\n      messages: [],\n      timestamp: new Date().toISOString()\n    }];\n  });\n  const [currentConversationId, setCurrentConversationId] = useState(() => {\n    const saved = localStorage.getItem(`conversations-${position}`);\n    if (saved) {\n      var _parsedConversations$;\n      const parsedConversations = JSON.parse(saved);\n      return ((_parsedConversations$ = parsedConversations[0]) === null || _parsedConversations$ === void 0 ? void 0 : _parsedConversations$.id) || Date.now().toString();\n    }\n    return Date.now().toString();\n  });\n\n  // Remove separate messages state and use conversation messages directly\n  const currentConversation = useMemo(() => conversations.find(c => c.id === currentConversationId) || conversations[0], [conversations, currentConversationId]);\n  const [inputValue, setInputValue] = useState('');\n  const [selectedModel, setSelectedModel] = useState(() => {\n    const savedModel = localStorage.getItem(`selectedModel-${position}`);\n    return savedModel || '';\n  });\n  const [menuAnchor, setMenuAnchor] = useState(null);\n  const [emojiAnchor, setEmojiAnchor] = useState(null);\n  const [uploadError, setUploadError] = useState('');\n\n  // Refs\n  const fileInputRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  const abortControllerRef = useRef(null);\n  const responseBuffer = useRef('');\n  const updateTimeoutRef = useRef(null);\n\n  // Add health check state\n  const [lastHealthCheck, setLastHealthCheck] = useState(() => {\n    return parseInt(localStorage.getItem('lastHealthCheck') || '0');\n  });\n\n  // Add health check toggle state\n  const [healthChecksEnabled, setHealthChecksEnabled] = useState(() => {\n    return localStorage.getItem('healthChecksEnabled') !== 'false';\n  });\n\n  // Add loading state for model switching\n  const [isModelSwitching, setIsModelSwitching] = useState(false);\n\n  // Add model status tracking\n  const [modelStatus, setModelStatus] = useState({});\n  const lastNetworkCheck = useRef(0);\n  const networkCheckInterval = 60000; // 1 minute in milliseconds\n\n  // Cache models list with a longer interval\n  const [cachedModels, setCachedModels] = useState([]);\n  const modelListInterval = 60000; // 1 minute\n  const lastModelListCheck = useRef(0);\n\n  // Now handleModelChange can use unloadModel\n  const handleModelChange = useCallback(async newModelId => {\n    if (selectedModel === newModelId || isModelSwitching) return;\n    setIsModelSwitching(true);\n    try {\n      setSelectedModel(newModelId);\n      localStorage.setItem(`selectedModel-${position}`, newModelId);\n    } finally {\n      setIsModelSwitching(false);\n    }\n  }, [selectedModel, position, isModelSwitching]);\n\n  // Update checkServerHealth to respect the toggle\n  const checkServerHealth = useCallback(async () => {\n    // If health checks are disabled, always return true\n    if (!healthChecksEnabled) {\n      return true;\n    }\n    const now = Date.now();\n    if (now - lastNetworkCheck.current < networkCheckInterval) {\n      return true; // Return true if we checked recently\n    }\n    try {\n      const response = await fetch(`${serverUrl}/health`, {\n        method: 'HEAD',\n        signal: AbortSignal.timeout(5000)\n      });\n      if (response.ok) {\n        lastNetworkCheck.current = now;\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.warn('Health check failed:', error);\n      return false;\n    }\n  }, [serverUrl, healthChecksEnabled]);\n\n  // Add effect to save health check preference\n  useEffect(() => {\n    localStorage.setItem('healthChecksEnabled', healthChecksEnabled);\n  }, [healthChecksEnabled]);\n\n  // Replace models prop usage with cached models\n  useEffect(() => {\n    const fetchModels = async () => {\n      const now = Date.now();\n      if (now - lastModelListCheck.current < modelListInterval) {\n        return; // Use cached models if checked recently\n      }\n      try {\n        const response = await fetch(`${serverUrl}/v1/models`, {\n          method: 'GET',\n          headers: {\n            'Cache-Control': 'no-cache'\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          setCachedModels(data.data || []);\n          lastModelListCheck.current = now;\n        }\n      } catch (error) {\n        console.warn('Failed to fetch models:', error);\n      }\n    };\n    fetchModels();\n  }, [serverUrl]);\n\n  // Update model selection logic to use cached models\n  useEffect(() => {\n    if (cachedModels.length > 0 && !selectedModel) {\n      const savedModel = localStorage.getItem(`selectedModel-${position}`);\n\n      // Only use saved model if it exists in current available models\n      if (savedModel && cachedModels.some(m => m.id === savedModel)) {\n        handleModelChange(savedModel);\n      } else {\n        // If no saved model or it's not available, select the first available model\n        handleModelChange(cachedModels[0].id);\n      }\n    }\n  }, [cachedModels, selectedModel, handleModelChange, position]);\n\n  // Update conversation messages\n  const updateConversationMessages = useCallback(newMessages => {\n    setConversations(prev => prev.map(conv => conv.id === currentConversationId ? {\n      ...conv,\n      messages: newMessages\n    } : conv));\n  }, [currentConversationId]);\n\n  // Move cleanupConversation before handleConversationChange\n  const cleanupConversation = useCallback(conversationId => {\n    // Abort any ongoing requests\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n    }\n\n    // Clear streaming responses\n    setStreamingResponses(prev => ({\n      ...prev,\n      [position]: ''\n    }));\n\n    // Clear thinking state\n    setThinking(prev => ({\n      ...prev,\n      [position]: false\n    }));\n\n    // Clear response buffer\n    responseBuffer.current = '';\n\n    // Clear any pending timeouts\n    if (updateTimeoutRef.current) {\n      clearTimeout(updateTimeoutRef.current);\n      updateTimeoutRef.current = null;\n    }\n  }, [position, setStreamingResponses, setThinking]);\n\n  // Handle conversation switch\n  const handleConversationChange = useCallback(newId => {\n    if (!conversations.some(conv => conv.id === newId)) {\n      var _conversations$;\n      console.warn('Invalid conversation ID, selecting first available conversation');\n      newId = ((_conversations$ = conversations[0]) === null || _conversations$ === void 0 ? void 0 : _conversations$.id) || Date.now().toString();\n    }\n\n    // Clean up the current conversation before switching\n    cleanupConversation(currentConversationId);\n    setCurrentConversationId(newId);\n  }, [conversations, currentConversationId, cleanupConversation]);\n\n  // Optimize streaming updates\n  const updateStreamingResponse = useCallback(newContent => {\n    responseBuffer.current = newContent;\n    if (updateTimeoutRef.current) {\n      clearTimeout(updateTimeoutRef.current);\n    }\n    updateTimeoutRef.current = setTimeout(() => {\n      setStreamingResponses(prev => ({\n        ...prev,\n        [position]: responseBuffer.current\n      }));\n    }, 1500); // 1.5 second debounce\n  }, [position, setStreamingResponses]);\n\n  // Optimize chat completion request\n  const handleSendMessage = async () => {\n    if (!inputValue.trim() || !selectedModel || isModelSwitching) return;\n\n    // Only check server health once per minute\n    const isServerHealthy = await checkServerHealth();\n    if (!isServerHealthy) {\n      const errorMessage = 'Cannot connect to server. Please check that LM Studio is running.';\n      updateConversationMessages([...currentConversation.messages, {\n        content: errorMessage,\n        timestamp: new Date().toISOString(),\n        role: 'error'\n      }]);\n      return;\n    }\n    setStreamingResponses(prev => ({\n      ...prev,\n      [position]: ''\n    }));\n    responseBuffer.current = '';\n    const newMessage = {\n      content: inputValue,\n      timestamp: new Date().toISOString(),\n      role: 'user'\n    };\n    const updatedMessages = [...currentConversation.messages, newMessage];\n    updateConversationMessages(updatedMessages);\n    setInputValue('');\n    setThinking(prev => ({\n      ...prev,\n      [position]: true\n    }));\n    try {\n      abortControllerRef.current = new AbortController();\n      const timeoutId = setTimeout(() => {\n        if (abortControllerRef.current) {\n          abortControllerRef.current.abort();\n        }\n      }, 180000);\n      const response = await fetch(`${serverUrl}/v1/chat/completions`, {\n        method: 'POST',\n        signal: abortControllerRef.current.signal,\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          model: selectedModel,\n          messages: updatedMessages.map(msg => ({\n            role: msg.role === 'error' ? 'assistant' : msg.role,\n            content: msg.content\n          })),\n          stream: true,\n          temperature: 0.7,\n          max_tokens: 2000,\n          options: {\n            load_model_only_when_needed: false,\n            unload_model_after_completion: false,\n            // Never unload models\n            skip_embedding_model: true,\n            skip_model_load_test: true,\n            no_auto_model_selection: true,\n            unload_other_models: false // Never unload other models\n          }\n        })\n      });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        throw new Error(`Server returned ${response.status}: ${await response.text()}`);\n      }\n      if (response.body) {\n        const reader = response.body.getReader();\n        responseBuffer.current = '';\n        try {\n          const responseText = await processStreamingResponse(reader);\n          if (responseText) {\n            const updatedMessagesWithResponse = [...updatedMessages, {\n              content: responseText,\n              timestamp: new Date().toISOString(),\n              role: 'assistant'\n            }];\n            updateConversationMessages(updatedMessagesWithResponse);\n          }\n        } finally {\n          if (updateTimeoutRef.current) {\n            clearTimeout(updateTimeoutRef.current);\n            updateTimeoutRef.current = null;\n          }\n          setStreamingResponses(prev => ({\n            ...prev,\n            [position]: ''\n          }));\n          setThinking(prev => ({\n            ...prev,\n            [position]: false\n          }));\n          responseBuffer.current = '';\n          abortControllerRef.current = null;\n        }\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      let errorMessage = 'Unable to get response from LM Studio. ';\n      try {\n        var _errorData$error;\n        // Try to parse the error response\n        const errorData = error.message.includes('{') ? JSON.parse(error.message.substring(error.message.indexOf('{'))) : null;\n        if (errorData !== null && errorData !== void 0 && (_errorData$error = errorData.error) !== null && _errorData$error !== void 0 && _errorData$error.message) {\n          if (errorData.error.message.includes('Failed to load model')) {\n            errorMessage = `Model loading failed. Please ensure:\\n` + `1. The model file exists and is not corrupted\\n` + `2. You have sufficient RAM available\\n` + `3. Try restarting LM Studio\\n\\n` + `Technical details: ${errorData.error.message}`;\n          } else {\n            errorMessage += errorData.error.message;\n          }\n        } else if (error.name === 'AbortError') {\n          errorMessage += 'Request timed out. The model might be too slow or not responding.';\n        } else if (error.message === 'Failed to fetch') {\n          errorMessage += `Please check that:\\n1. LM Studio is still running\\n2. Local Server is active\\n3. Server address (${serverUrl}) is correct\\n4. Your internet connection is stable`;\n        } else {\n          errorMessage += error.message;\n        }\n      } catch (parseError) {\n        // If we can't parse the error, just use the original error message\n        errorMessage += error.message;\n      }\n      updateConversationMessages([...updatedMessages, {\n        content: errorMessage,\n        timestamp: new Date().toISOString(),\n        role: 'error'\n      }]);\n      setThinking(prev => ({\n        ...prev,\n        [position]: false\n      }));\n    }\n  };\n  useEffect(() => {\n    localStorage.setItem(`conversations-${position}`, JSON.stringify(conversations));\n  }, [conversations, position]);\n  const scrollToBottom = useCallback(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, []);\n  useEffect(() => {\n    const scrollTimer = setTimeout(() => {\n      scrollToBottom();\n    }, 1000); // Delay scroll to 1 second\n\n    return () => clearTimeout(scrollTimer);\n  }, [currentConversation.messages, streamingResponse, scrollToBottom]);\n  useEffect(() => {\n    setStreamingResponses(prev => ({\n      ...prev,\n      [position]: ''\n    }));\n  }, [currentConversationId, position, setStreamingResponses]);\n  const handleClearChat = useCallback(() => {\n    updateConversationMessages([]); // Clear messages in current conversation\n    setStreamingResponses(prev => ({\n      ...prev,\n      [position]: ''\n    }));\n    setThinking(prev => ({\n      ...prev,\n      [position]: false\n    }));\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n    }\n  }, [position, setStreamingResponses, setThinking, updateConversationMessages]);\n  const handleMenuAction = useCallback(action => {\n    switch (action) {\n      case 'new':\n        startNewConversation();\n        break;\n      case 'clear':\n        handleClearChat();\n        break;\n      case 'delete':\n        // Clean up the conversation before deleting\n        cleanupConversation(currentConversationId);\n        setConversations(prev => {\n          const updatedConversations = prev.filter(conv => conv.id !== currentConversationId);\n          if (updatedConversations.length === 0) {\n            const newId = Date.now().toString();\n            const newConversation = {\n              id: newId,\n              name: 'New Conversation',\n              messages: [],\n              timestamp: new Date().toISOString()\n            };\n            return [newConversation];\n          }\n          // Switch to the first conversation in the list\n          setCurrentConversationId(updatedConversations[0].id);\n          return updatedConversations;\n        });\n        break;\n      default:\n        break;\n    }\n    setMenuAnchor(null);\n  }, [currentConversationId, handleClearChat, startNewConversation, cleanupConversation]);\n  const handleStopResponse = () => {\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n      setThinking(prev => ({\n        ...prev,\n        [position]: false\n      }));\n      setStreamingResponses(prev => ({\n        ...prev,\n        [position]: ''\n      }));\n    }\n  };\n  const updateConversationName = (id, firstMessage) => {\n    if (!firstMessage) return;\n\n    // Extract first ~30 characters of the first message for the conversation name\n    const name = firstMessage.content.length > 30 ? firstMessage.content.substring(0, 30) + '...' : firstMessage.content;\n    setConversations(prev => prev.map(conv => conv.id === id ? {\n      ...conv,\n      name\n    } : conv));\n  };\n\n  // Batch updates for message list scrolling with longer delay\n  useEffect(() => {\n    const scrollTimer = setTimeout(() => {\n      scrollToBottom();\n    }, 1000); // Delay scroll to 1 second\n\n    return () => clearTimeout(scrollTimer);\n  }, [currentConversation.messages, streamingResponse, scrollToBottom]);\n\n  // Update streaming response handling\n  const processStreamingChunk = useCallback(chunk => {\n    const lines = chunk.split('\\n');\n    let accumulatedContent = '';\n    for (const line of lines) {\n      if (!line.trim() || line.includes('[DONE]')) continue;\n      try {\n        var _data$choices$, _data$choices$$delta;\n        const jsonStr = line.replace(/^data: /, '');\n        const data = JSON.parse(jsonStr);\n        if (data.choices && (_data$choices$ = data.choices[0]) !== null && _data$choices$ !== void 0 && (_data$choices$$delta = _data$choices$.delta) !== null && _data$choices$$delta !== void 0 && _data$choices$$delta.content) {\n          accumulatedContent += data.choices[0].delta.content;\n        }\n      } catch (e) {\n        console.warn('Error parsing chunk:', e);\n        continue;\n      }\n    }\n    return accumulatedContent;\n  }, []);\n  const processStreamingResponse = async (reader, responseText = '', maxIterations = 1000) => {\n    let iterations = 0;\n    let accumulatedContent = responseBuffer.current || '';\n    try {\n      while (iterations < maxIterations) {\n        iterations++;\n        const {\n          done,\n          value\n        } = await reader.read();\n        if (done) break;\n        const chunk = new TextDecoder().decode(value);\n        const newContent = processStreamingChunk(chunk);\n        accumulatedContent += newContent;\n        responseText += newContent;\n\n        // Update the streaming response with the accumulated content\n        setStreamingResponses(prev => ({\n          ...prev,\n          [position]: accumulatedContent\n        }));\n      }\n      return responseText;\n    } catch (error) {\n      console.error('Error processing stream:', error);\n      throw error;\n    }\n  };\n\n  // Update StreamingResponseComponent to handle paragraphs better\n  const StreamingResponseComponent = /*#__PURE__*/React.memo(({\n    content\n  }) => content ? /*#__PURE__*/_jsxDEV(Message, {\n    align: \"left\",\n    children: /*#__PURE__*/_jsxDEV(MessageContent, {\n      align: \"left\",\n      sx: {\n        backgroundColor: theme => theme.palette.background.paper,\n        minWidth: '200px',\n        width: 'fit-content',\n        maxWidth: '70%'\n      },\n      children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n        components: {\n          p: ({\n            children\n          }) => /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            component: \"p\",\n            sx: {\n              mb: 1,\n              '&:last-child': {\n                mb: 0\n              }\n            },\n            children: children\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 727,\n            columnNumber: 17\n          }, this),\n          pre: ({\n            node,\n            ...props\n          }) => /*#__PURE__*/_jsxDEV(\"pre\", {\n            style: {\n              backgroundColor: 'rgba(0, 0, 0, 0.1)',\n              padding: '8px',\n              borderRadius: '4px',\n              overflowX: 'auto'\n            },\n            ...props\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 739,\n            columnNumber: 17\n          }, this),\n          code: ({\n            node,\n            inline,\n            ...props\n          }) => inline ? /*#__PURE__*/_jsxDEV(\"code\", {\n            style: {\n              backgroundColor: 'rgba(0, 0, 0, 0.1)',\n              padding: '2px 4px',\n              borderRadius: '3px'\n            },\n            ...props\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 748,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"code\", {\n            ...props\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 753,\n            columnNumber: 19\n          }, this)\n        },\n        children: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 724,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 715,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 714,\n    columnNumber: 7\n  }, this) : null);\n\n  // Update ThinkingIndicator to be more precise\n  const ThinkingIndicator = /*#__PURE__*/React.memo(({\n    isThinking,\n    onStop\n  }) => isThinking && !streamingResponse && !currentConversation.messages.find(m => m.role === 'error') ? /*#__PURE__*/_jsxDEV(Message, {\n    align: \"left\",\n    children: /*#__PURE__*/_jsxDEV(MessageContent, {\n      align: \"left\",\n      sx: {\n        backgroundColor: 'rgba(0, 0, 0, 0.2)',\n        minWidth: '200px',\n        width: 'fit-content',\n        maxWidth: '70%',\n        position: 'relative',\n        padding: '12px 16px',\n        '& pre': {\n          margin: 0,\n          padding: 0,\n          backgroundColor: 'transparent',\n          fontFamily: 'inherit',\n          whiteSpace: 'pre-wrap',\n          fontSize: '0.875rem'\n        }\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          flexDirection: 'column',\n          gap: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"pre\", {\n          children: \"<think>\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 792,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          style: {\n            marginLeft: '8px'\n          },\n          children: \"Processing request and generating response...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 793,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: \"</think>\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 796,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'center',\n            gap: 1,\n            mt: 1,\n            pt: 1,\n            borderTop: '1px solid rgba(255, 255, 255, 0.1)'\n          },\n          children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 805,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: \"Thinking...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 806,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            size: \"small\",\n            onClick: onStop,\n            sx: {\n              ml: 'auto',\n              bgcolor: 'error.main',\n              color: 'error.contrastText',\n              '&:hover': {\n                bgcolor: 'error.dark'\n              },\n              width: 24,\n              height: 24\n            },\n            children: /*#__PURE__*/_jsxDEV(StopIcon, {\n              sx: {\n                fontSize: 16\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 821,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 807,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 797,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 787,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 768,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 767,\n    columnNumber: 7\n  }, this) : null);\n\n  // Update model status when a model is successfully used\n  const updateModelStatus = useCallback((modelId, isAvailable) => {\n    setModelStatus(prev => ({\n      ...prev,\n      [modelId]: {\n        available: isAvailable,\n        lastChecked: Date.now()\n      }\n    }));\n  }, []);\n\n  // Check if we need to verify model availability\n  const shouldCheckModel = useCallback(modelId => {\n    const status = modelStatus[modelId];\n    if (!status) return true;\n    const now = Date.now();\n    return now - status.lastChecked > networkCheckInterval;\n  }, [modelStatus]);\n\n  // Add model unload/refresh function\n  const handleModelAction = useCallback(async action => {\n    if (!selectedModel) return;\n    setIsModelSwitching(true);\n    try {\n      if (action === 'unload') {\n        await fetch(`${serverUrl}/v1/model/unload`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            model: selectedModel,\n            options: {\n              unload_other_models: false // Never unload other models\n            }\n          })\n        });\n      } else if (action === 'refresh') {\n        // First unload\n        await fetch(`${serverUrl}/v1/model/unload`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            model: selectedModel,\n            options: {\n              unload_other_models: false\n            }\n          })\n        });\n\n        // Then force a reload by sending a test completion\n        await fetch(`${serverUrl}/v1/chat/completions`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            model: selectedModel,\n            messages: [{\n              role: 'system',\n              content: 'test'\n            }],\n            stream: false,\n            max_tokens: 1,\n            options: {\n              load_model_only_when_needed: false,\n              unload_model_after_completion: false,\n              unload_other_models: false\n            }\n          })\n        });\n      }\n    } catch (error) {\n      console.warn(`Failed to ${action} model:`, error);\n    } finally {\n      setIsModelSwitching(false);\n    }\n  }, [selectedModel, serverUrl]);\n  return /*#__PURE__*/_jsxDEV(StyledPaper, {\n    elevation: 3,\n    children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center',\n          gap: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n          title: selectedModel ? ((_models$find = models.find(m => m.id === selectedModel)) === null || _models$find === void 0 ? void 0 : _models$find.name) || 'Select a model' : 'Select a model',\n          children: /*#__PURE__*/_jsxDEV(Avatar, {\n            sx: {\n              bgcolor: selectedModel ? getModelColor(((_models$find2 = models.find(m => m.id === selectedModel)) === null || _models$find2 === void 0 ? void 0 : _models$find2.name) || '') : 'primary.main',\n              transition: 'all 0.3s ease',\n              fontWeight: 600,\n              width: 40,\n              height: 40,\n              cursor: 'help',\n              '& img': {\n                width: '100%',\n                height: '100%',\n                objectFit: 'cover'\n              }\n            },\n            children: selectedModel ? (_models$find3 => {\n              const modelName = ((_models$find3 = models.find(m => m.id === selectedModel)) === null || _models$find3 === void 0 ? void 0 : _models$find3.name) || '';\n              const imagePath = getModelImage(modelName);\n              return imagePath ? /*#__PURE__*/_jsxDEV(\"img\", {\n                src: imagePath,\n                alt: modelName,\n                style: {\n                  width: '100%',\n                  height: '100%',\n                  objectFit: 'cover'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 935,\n                columnNumber: 21\n              }, this) : getModelLetter(modelName);\n            })() : 'A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 915,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 914,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flexDirection: 'column',\n            gap: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(ConversationSelector, {\n            size: \"small\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              value: currentConversationId,\n              onChange: e => handleConversationChange(e.target.value),\n              variant: \"standard\",\n              sx: {\n                fontSize: '0.875rem'\n              },\n              children: conversations.map(conv => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: conv.id,\n                children: conv.name || 'New Conversation'\n              }, conv.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 960,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 953,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 952,\n            columnNumber: 13\n          }, this), models.length > 0 ? /*#__PURE__*/_jsxDEV(ModelSelector, {\n            size: \"small\",\n            sx: {\n              minWidth: 200\n            },\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              value: selectedModel || '',\n              onChange: e => handleModelChange(e.target.value),\n              variant: \"standard\",\n              displayEmpty: true,\n              children: models.map(model => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: model.id,\n                children: model.name\n              }, model.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 975,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 968,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 967,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            color: \"error\",\n            children: \"No AI models available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 982,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 951,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 913,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          gap: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n          title: \"Drag messages here to add to notebook\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            id: \"notebook-target\",\n            sx: {\n              position: 'relative',\n              '&::after': {\n                content: '\"\"',\n                position: 'absolute',\n                top: -8,\n                right: -8,\n                bottom: -8,\n                left: -8,\n                borderRadius: '50%',\n                transition: 'all 0.2s ease',\n                zIndex: -1\n              },\n              '&.drag-over::after': {\n                backgroundColor: 'rgba(25, 118, 210, 0.1)',\n                transform: 'scale(1.2)'\n              },\n              '&:hover': {\n                '& .MuiSvgIcon-root': {\n                  transform: 'scale(1.1)'\n                }\n              },\n              '& .MuiSvgIcon-root': {\n                transition: 'transform 0.2s ease'\n              }\n            },\n            onDragOver: e => {\n              e.preventDefault();\n              e.currentTarget.classList.add('drag-over');\n              e.dataTransfer.dropEffect = 'copy';\n            },\n            onDragLeave: e => {\n              e.preventDefault();\n              e.currentTarget.classList.remove('drag-over');\n            },\n            onDrop: e => {\n              e.preventDefault();\n              e.currentTarget.classList.remove('drag-over');\n              try {\n                // Try to get rich data first\n                const jsonData = e.dataTransfer.getData('application/json');\n                if (jsonData) {\n                  const data = JSON.parse(jsonData);\n                  if (data.type === 'chat_message') {\n                    const event = new CustomEvent('addToNotebook', {\n                      detail: {\n                        ...data,\n                        source: 'drag_and_drop'\n                      }\n                    });\n                    window.dispatchEvent(event);\n                    // Show success feedback\n                    e.currentTarget.style.color = '#4caf50';\n                    setTimeout(() => {\n                      e.currentTarget.style.color = '';\n                    }, 500);\n                    return;\n                  }\n                }\n\n                // Fallback to plain text\n                const text = e.dataTransfer.getData('text/plain');\n                if (text) {\n                  const event = new CustomEvent('addToNotebook', {\n                    detail: {\n                      type: 'chat_message',\n                      content: text,\n                      timestamp: new Date().toISOString(),\n                      role: 'user',\n                      source: 'drag_and_drop'\n                    }\n                  });\n                  window.dispatchEvent(event);\n                  // Show success feedback\n                  e.currentTarget.style.color = '#4caf50';\n                  setTimeout(() => {\n                    e.currentTarget.style.color = '';\n                  }, 500);\n                }\n              } catch (error) {\n                console.warn('Invalid drag data:', error);\n                // Show error feedback\n                e.currentTarget.style.color = '#f44336';\n                setTimeout(() => {\n                  e.currentTarget.style.color = '';\n                }, 500);\n              }\n            },\n            children: /*#__PURE__*/_jsxDEV(NoteAddIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1081,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 990,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 989,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: startNewConversation,\n          title: \"New Conversation\",\n          children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1088,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1084,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: e => setMenuAnchor(e.currentTarget),\n          children: /*#__PURE__*/_jsxDEV(MoreIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1091,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1090,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 988,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 912,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n      children: [currentConversation.messages.map((msg, index) => /*#__PURE__*/_jsxDEV(MessageComponent, {\n        message: msg,\n        align: msg.role === 'user' ? 'right' : 'left'\n      }, `${msg.timestamp}-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1098,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(StreamingResponseComponent, {\n        content: streamingResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ThinkingIndicator, {\n        isThinking: isThinking,\n        onStop: handleStopResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1096,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatFooter, {\n      children: [/*#__PURE__*/_jsxDEV(InputContainer, {\n        onDragOver: e => {\n          e.preventDefault();\n          e.currentTarget.style.backgroundColor = 'rgba(25, 118, 210, 0.1)';\n          e.currentTarget.style.transform = 'scale(1.01)';\n          e.dataTransfer.dropEffect = 'copy';\n        },\n        onDragLeave: e => {\n          e.preventDefault();\n          e.currentTarget.style.backgroundColor = '';\n          e.currentTarget.style.transform = '';\n        },\n        onDrop: e => {\n          e.preventDefault();\n          e.currentTarget.style.backgroundColor = '';\n          e.currentTarget.style.transform = '';\n          const text = e.dataTransfer.getData('text/plain');\n          if (text) {\n            setInputValue(prev => {\n              const textarea = document.querySelector('textarea');\n              const cursorPosition = (textarea === null || textarea === void 0 ? void 0 : textarea.selectionStart) || prev.length;\n              return prev.slice(0, cursorPosition) + text + prev.slice(cursorPosition);\n            });\n            // Focus and scroll to end\n            const textarea = document.querySelector('textarea');\n            if (textarea) {\n              textarea.focus();\n              textarea.scrollTop = textarea.scrollHeight;\n            }\n          }\n        },\n        sx: {\n          transition: 'all 0.2s ease',\n          '&:hover': {\n            '&[data-dragging=\"true\"]': {\n              backgroundColor: 'rgba(25, 118, 210, 0.1)',\n              transform: 'scale(1.01)'\n            }\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          size: \"small\",\n          onClick: e => setEmojiAnchor(e.currentTarget),\n          children: /*#__PURE__*/_jsxDEV(EmojiIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1158,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Popover, {\n          open: Boolean(emojiAnchor),\n          anchorEl: emojiAnchor,\n          onClose: () => setEmojiAnchor(null),\n          anchorOrigin: {\n            vertical: 'top',\n            horizontal: 'left'\n          },\n          transformOrigin: {\n            vertical: 'bottom',\n            horizontal: 'left'\n          },\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              '.EmojiPickerReact': {\n                '--epr-bg-color': 'rgba(18, 18, 18, 0.95)',\n                '--epr-category-label-bg-color': 'rgba(18, 18, 18, 0.95)',\n                '--epr-hover-bg-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-focus-bg-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-highlight-color': 'rgba(255, 255, 255, 0.2)',\n                '--epr-search-border-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-border-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-text-color': '#fff',\n                border: 'none',\n                boxShadow: '0 4px 20px rgba(0, 0, 0, 0.3)'\n              }\n            },\n            children: /*#__PURE__*/_jsxDEV(EmojiPicker, {\n              onEmojiClick: handleEmojiClick,\n              autoFocusSearch: false,\n              theme: \"dark\",\n              searchPlaceHolder: \"Search emojis...\",\n              width: 320,\n              height: 400,\n              previewConfig: {\n                showPreview: false\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1187,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1173,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          ref: fileInputRef,\n          style: {\n            display: 'none'\n          },\n          onChange: handleFileUpload,\n          accept: \"image/*,.pdf,.txt,.doc,.docx\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1200,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: !selectedModel ? \"Please select a model first\" : !supportsFileUpload() ? \"This model doesn't support file uploads\" : \"Upload a file\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              size: \"small\",\n              disabled: !supportsFileUpload(),\n              onClick: () => {\n                var _fileInputRef$current;\n                return (_fileInputRef$current = fileInputRef.current) === null || _fileInputRef$current === void 0 ? void 0 : _fileInputRef$current.click();\n              },\n              children: /*#__PURE__*/_jsxDEV(ImageIcon, {\n                sx: {\n                  color: theme => !supportsFileUpload() ? theme.palette.action.disabled : 'inherit'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1218,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1213,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1212,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          multiline: true,\n          maxRows: 4,\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyPress: handleKeyPress,\n          placeholder: \"Type your message...\",\n          variant: \"standard\",\n          InputProps: {\n            disableUnderline: true,\n            endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"end\",\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: handleSendMessage,\n                disabled: !inputValue.trim() || !selectedModel,\n                color: \"primary\",\n                children: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1244,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1239,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1238,\n              columnNumber: 17\n            }, this)\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1226,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1113,\n        columnNumber: 9\n      }, this), uploadError && /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"caption\",\n        color: \"error\",\n        sx: {\n          mt: 1,\n          display: 'block'\n        },\n        onClick: () => setUploadError(''),\n        children: uploadError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1252,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Menu, {\n      anchorEl: menuAnchor,\n      open: Boolean(menuAnchor),\n      onClose: () => setMenuAnchor(null),\n      children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => handleMenuAction('new'),\n        children: \"New Conversation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1268,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => handleMenuAction('clear'),\n        children: \"Clear Current Conversation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => handleMenuAction('delete'),\n        children: \"Delete Current Conversation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1274,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => setHealthChecksEnabled(prev => !prev),\n        children: [healthChecksEnabled ? '✓ ' : '', \" Health Checks Enabled\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1277,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1280,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => handleModelAction('unload'),\n        disabled: !selectedModel || isModelSwitching,\n        children: \"Unload Current Model\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1281,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => handleModelAction('refresh'),\n        disabled: !selectedModel || isModelSwitching,\n        children: \"Refresh Current Model\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1287,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1263,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 911,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatWindow, \"4pr2CJYqBHs78Hlh7dJxM0K5Qyk=\");\n_c10 = ChatWindow;\nexport default ChatWindow;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10;\n$RefreshReg$(_c, \"StyledPaper\");\n$RefreshReg$(_c2, \"ChatHeader\");\n$RefreshReg$(_c3, \"MessageList\");\n$RefreshReg$(_c4, \"Message\");\n$RefreshReg$(_c5, \"MessageContent\");\n$RefreshReg$(_c6, \"ChatFooter\");\n$RefreshReg$(_c7, \"InputContainer\");\n$RefreshReg$(_c8, \"ModelSelector\");\n$RefreshReg$(_c9, \"ConversationSelector\");\n$RefreshReg$(_c10, \"ChatWindow\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","useMemo","Box","Paper","TextField","IconButton","Typography","Avatar","Menu","MenuItem","Select","FormControl","CircularProgress","InputAdornment","Popover","Tooltip","ClickAwayListener","Divider","Send","SendIcon","MoreVert","MoreIcon","VideoCall","VideoIcon","OpenInFull","ExpandIcon","Image","ImageIcon","EmojiEmotions","EmojiIcon","Stop","StopIcon","Add","AddIcon","NoteAdd","NoteAddIcon","ReactMarkdown","styled","EmojiPicker","jsxDEV","_jsxDEV","StyledPaper","theme","display","flexDirection","height","flex","overflow","backgroundColor","palette","background","paper","borderRadius","spacing","_c","ChatHeader","padding","alignItems","justifyContent","borderBottom","divider","_c2","MessageList","flexGrow","default","width","grey","_c3","Message","align","marginBottom","_c4","MessageContent","maxWidth","primary","main","color","contrastText","text","boxShadow","shadows","margin","fontFamily","marginTop","paddingLeft","borderLeft","secondary","_c5","ChatFooter","borderTop","_c6","InputContainer","gap","_c7","ErrorMessage","error","dark","ModelSelector","paddingBottom","borderBottomColor","_c8","ConversationSelector","minWidth","fontSize","_c9","ChatWindow","position","models","streamingResponse","isThinking","setStreamingResponses","setThinking","serverUrl","_s","_models$find","_models$find2","startNewConversation","newId","Date","now","toString","newConversation","id","name","messages","timestamp","toISOString","setConversations","prev","setCurrentConversationId","conversations","saved","localStorage","getItem","initialId","JSON","parse","currentConversationId","_parsedConversations$","parsedConversations","currentConversation","find","c","inputValue","setInputValue","selectedModel","setSelectedModel","savedModel","menuAnchor","setMenuAnchor","emojiAnchor","setEmojiAnchor","uploadError","setUploadError","fileInputRef","messagesEndRef","abortControllerRef","responseBuffer","updateTimeoutRef","lastHealthCheck","setLastHealthCheck","parseInt","healthChecksEnabled","setHealthChecksEnabled","isModelSwitching","setIsModelSwitching","modelStatus","setModelStatus","lastNetworkCheck","networkCheckInterval","cachedModels","setCachedModels","modelListInterval","lastModelListCheck","handleModelChange","newModelId","setItem","checkServerHealth","current","response","fetch","method","signal","AbortSignal","timeout","ok","console","warn","fetchModels","headers","data","json","length","some","m","updateConversationMessages","newMessages","map","conv","cleanupConversation","conversationId","abort","clearTimeout","handleConversationChange","_conversations$","updateStreamingResponse","newContent","setTimeout","handleSendMessage","trim","isServerHealthy","errorMessage","content","role","newMessage","updatedMessages","AbortController","timeoutId","body","stringify","model","msg","stream","temperature","max_tokens","options","load_model_only_when_needed","unload_model_after_completion","skip_embedding_model","skip_model_load_test","no_auto_model_selection","unload_other_models","Error","status","reader","getReader","responseText","processStreamingResponse","updatedMessagesWithResponse","_errorData$error","errorData","message","includes","substring","indexOf","parseError","scrollToBottom","scrollIntoView","behavior","scrollTimer","handleClearChat","handleMenuAction","action","updatedConversations","filter","handleStopResponse","updateConversationName","firstMessage","processStreamingChunk","chunk","lines","split","accumulatedContent","line","_data$choices$","_data$choices$$delta","jsonStr","replace","choices","delta","e","maxIterations","iterations","done","value","read","TextDecoder","decode","StreamingResponseComponent","memo","children","sx","components","p","variant","component","mb","fileName","_jsxFileName","lineNumber","columnNumber","pre","node","props","style","overflowX","code","inline","ThinkingIndicator","onStop","whiteSpace","marginLeft","mt","pt","size","onClick","ml","bgcolor","updateModelStatus","modelId","isAvailable","available","lastChecked","shouldCheckModel","handleModelAction","elevation","title","getModelColor","transition","fontWeight","cursor","objectFit","_models$find3","modelName","imagePath","getModelImage","src","alt","getModelLetter","onChange","target","displayEmpty","top","right","bottom","left","zIndex","transform","onDragOver","preventDefault","currentTarget","classList","add","dataTransfer","dropEffect","onDragLeave","remove","onDrop","jsonData","getData","type","event","CustomEvent","detail","source","window","dispatchEvent","index","MessageComponent","ref","textarea","document","querySelector","cursorPosition","selectionStart","slice","focus","scrollTop","scrollHeight","open","Boolean","anchorEl","onClose","anchorOrigin","vertical","horizontal","transformOrigin","border","onEmojiClick","handleEmojiClick","autoFocusSearch","searchPlaceHolder","previewConfig","showPreview","handleFileUpload","accept","supportsFileUpload","disabled","_fileInputRef$current","click","fullWidth","multiline","maxRows","onKeyPress","handleKeyPress","placeholder","InputProps","disableUnderline","endAdornment","_c10","$RefreshReg$"],"sources":["E:/Cline/allm/frontend/src/components/ChatWindow.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback, useMemo } from 'react';\nimport {\n  Box,\n  Paper,\n  TextField,\n  IconButton,\n  Typography,\n  Avatar,\n  Menu,\n  MenuItem,\n  Select,\n  FormControl,\n  CircularProgress,\n  InputAdornment,\n  Popover,\n  Tooltip,\n  ClickAwayListener,\n  Divider,\n} from '@mui/material';\nimport {\n  Send as SendIcon,\n  MoreVert as MoreIcon,\n  VideoCall as VideoIcon,\n  OpenInFull as ExpandIcon,\n  Image as ImageIcon,\n  EmojiEmotions as EmojiIcon,\n  Stop as StopIcon,\n  Add as AddIcon,\n  NoteAdd as NoteAddIcon,\n} from '@mui/icons-material';\nimport ReactMarkdown from 'react-markdown';\nimport { styled } from '@mui/material/styles';\nimport EmojiPicker from 'emoji-picker-react';\n\nconst StyledPaper = styled(Paper)(({ theme }) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  height: '100%',\n  flex: 1,\n  overflow: 'hidden',\n  backgroundColor: theme.palette.background.paper,\n  borderRadius: theme.spacing(3),\n}));\n\nconst ChatHeader = styled(Box)(({ theme }) => ({\n  padding: theme.spacing(2),\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  borderBottom: `1px solid ${theme.palette.divider}`,\n}));\n\nconst MessageList = styled(Box)(({ theme }) => ({\n  flexGrow: 1,\n  overflow: 'auto',\n  padding: theme.spacing(2),\n  backgroundColor: theme.palette.background.default,\n  '&::-webkit-scrollbar': {\n    width: '4px',\n  },\n  '&::-webkit-scrollbar-track': {\n    background: 'transparent',\n  },\n  '&::-webkit-scrollbar-thumb': {\n    background: theme.palette.grey[600],\n    borderRadius: '4px',\n  },\n}));\n\nconst Message = styled(Box)(({ theme, align }) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: align === 'right' ? 'flex-end' : 'flex-start',\n  marginBottom: theme.spacing(2),\n}));\n\nconst MessageContent = styled(Box)(({ theme, align }) => ({\n  maxWidth: '70%',\n  padding: theme.spacing(1.5),\n  borderRadius: theme.spacing(2),\n  backgroundColor: align === 'right' ? theme.palette.primary.main : theme.palette.background.paper,\n  color: align === 'right' ? theme.palette.primary.contrastText : theme.palette.text.primary,\n  boxShadow: theme.shadows[1],\n  '& p': {\n    margin: 0,\n  },\n  '& pre': {\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(1),\n    borderRadius: theme.spacing(1),\n    overflow: 'auto',\n    margin: theme.spacing(1, 0),\n    fontFamily: 'monospace',\n  },\n  '& code': {\n    fontFamily: 'monospace',\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(0.25, 0.5),\n    borderRadius: theme.spacing(0.5),\n  },\n  '& ul, & ol': {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    paddingLeft: theme.spacing(3),\n  },\n  '& li': {\n    marginBottom: theme.spacing(0.5),\n  },\n  '& blockquote': {\n    borderLeft: `3px solid ${theme.palette.divider}`,\n    margin: theme.spacing(1, 0),\n    paddingLeft: theme.spacing(2),\n    color: theme.palette.text.secondary,\n  },\n}));\n\nconst ChatFooter = styled(Box)(({ theme }) => ({\n  padding: theme.spacing(2),\n  borderTop: `1px solid ${theme.palette.divider}`,\n  backgroundColor: theme.palette.background.paper,\n}));\n\nconst InputContainer = styled(Box)(({ theme }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  gap: theme.spacing(1),\n  backgroundColor: theme.palette.background.default,\n  borderRadius: theme.spacing(3),\n  padding: theme.spacing(1),\n}));\n\nconst ErrorMessage = styled(Box)(({ theme }) => ({\n  padding: theme.spacing(1, 2),\n  backgroundColor: theme.palette.error.dark,\n  color: theme.palette.error.contrastText,\n  borderRadius: theme.spacing(1),\n  display: 'flex',\n  alignItems: 'center',\n  gap: theme.spacing(1),\n  marginBottom: theme.spacing(2),\n}));\n\nconst ModelSelector = styled(FormControl)(({ theme }) => ({\n  '& .MuiSelect-select': {\n    paddingBottom: 0,\n  },\n  '& .MuiInput-underline:before': {\n    borderBottomColor: 'transparent',\n  },\n}));\n\nconst ConversationSelector = styled(FormControl)(({ theme }) => ({\n  minWidth: 200,\n  '& .MuiSelect-select': {\n    fontSize: '0.875rem',\n  },\n}));\n\nfunction ChatWindow({\n  position,\n  models,\n  streamingResponse,\n  isThinking,\n  setStreamingResponses,\n  setThinking,\n  serverUrl,\n}) {\n  // Move startNewConversation definition before any hooks that use it\n  const startNewConversation = useCallback(() => {\n    const newId = Date.now().toString();\n    const newConversation = {\n      id: newId,\n      name: 'New Conversation',\n      messages: [],\n      timestamp: new Date().toISOString()\n    };\n    setConversations(prev => [newConversation, ...prev]);\n    setCurrentConversationId(newId);\n  }, []); // Empty dependency array since it only uses setState functions\n\n  // Initialize state with timestamp-based ID\n  const [conversations, setConversations] = useState(() => {\n    const saved = localStorage.getItem(`conversations-${position}`);\n    const initialId = Date.now().toString();\n    return saved ? JSON.parse(saved) : [{\n      id: initialId,\n      name: 'New Conversation',\n      messages: [],\n      timestamp: new Date().toISOString()\n    }];\n  });\n\n  const [currentConversationId, setCurrentConversationId] = useState(() => {\n    const saved = localStorage.getItem(`conversations-${position}`);\n    if (saved) {\n      const parsedConversations = JSON.parse(saved);\n      return parsedConversations[0]?.id || Date.now().toString();\n    }\n    return Date.now().toString();\n  });\n\n  // Remove separate messages state and use conversation messages directly\n  const currentConversation = useMemo(() => \n    conversations.find(c => c.id === currentConversationId) || conversations[0],\n    [conversations, currentConversationId]\n  );\n\n  const [inputValue, setInputValue] = useState('');\n  const [selectedModel, setSelectedModel] = useState(() => {\n    const savedModel = localStorage.getItem(`selectedModel-${position}`);\n    return savedModel || '';\n  });\n  const [menuAnchor, setMenuAnchor] = useState(null);\n  const [emojiAnchor, setEmojiAnchor] = useState(null);\n  const [uploadError, setUploadError] = useState('');\n\n  // Refs\n  const fileInputRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  const abortControllerRef = useRef(null);\n  const responseBuffer = useRef('');\n  const updateTimeoutRef = useRef(null);\n\n  // Add health check state\n  const [lastHealthCheck, setLastHealthCheck] = useState(() => {\n    return parseInt(localStorage.getItem('lastHealthCheck') || '0');\n  });\n\n  // Add health check toggle state\n  const [healthChecksEnabled, setHealthChecksEnabled] = useState(() => {\n    return localStorage.getItem('healthChecksEnabled') !== 'false';\n  });\n\n  // Add loading state for model switching\n  const [isModelSwitching, setIsModelSwitching] = useState(false);\n\n  // Add model status tracking\n  const [modelStatus, setModelStatus] = useState({});\n  const lastNetworkCheck = useRef(0);\n  const networkCheckInterval = 60000; // 1 minute in milliseconds\n\n  // Cache models list with a longer interval\n  const [cachedModels, setCachedModels] = useState([]);\n  const modelListInterval = 60000; // 1 minute\n  const lastModelListCheck = useRef(0);\n\n  // Now handleModelChange can use unloadModel\n  const handleModelChange = useCallback(async (newModelId) => {\n    if (selectedModel === newModelId || isModelSwitching) return;\n    \n    setIsModelSwitching(true);\n    try {\n      setSelectedModel(newModelId);\n      localStorage.setItem(`selectedModel-${position}`, newModelId);\n    } finally {\n      setIsModelSwitching(false);\n    }\n  }, [selectedModel, position, isModelSwitching]);\n\n  // Update checkServerHealth to respect the toggle\n  const checkServerHealth = useCallback(async () => {\n    // If health checks are disabled, always return true\n    if (!healthChecksEnabled) {\n      return true;\n    }\n\n    const now = Date.now();\n    if (now - lastNetworkCheck.current < networkCheckInterval) {\n      return true; // Return true if we checked recently\n    }\n\n    try {\n      const response = await fetch(`${serverUrl}/health`, {\n        method: 'HEAD',\n        signal: AbortSignal.timeout(5000)\n      });\n      \n      if (response.ok) {\n        lastNetworkCheck.current = now;\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.warn('Health check failed:', error);\n      return false;\n    }\n  }, [serverUrl, healthChecksEnabled]);\n\n  // Add effect to save health check preference\n  useEffect(() => {\n    localStorage.setItem('healthChecksEnabled', healthChecksEnabled);\n  }, [healthChecksEnabled]);\n\n  // Replace models prop usage with cached models\n  useEffect(() => {\n    const fetchModels = async () => {\n      const now = Date.now();\n      if (now - lastModelListCheck.current < modelListInterval) {\n        return; // Use cached models if checked recently\n      }\n\n      try {\n        const response = await fetch(`${serverUrl}/v1/models`, {\n          method: 'GET',\n          headers: { 'Cache-Control': 'no-cache' }\n        });\n        \n        if (response.ok) {\n          const data = await response.json();\n          setCachedModels(data.data || []);\n          lastModelListCheck.current = now;\n        }\n      } catch (error) {\n        console.warn('Failed to fetch models:', error);\n      }\n    };\n\n    fetchModels();\n  }, [serverUrl]);\n\n  // Update model selection logic to use cached models\n  useEffect(() => {\n    if (cachedModels.length > 0 && !selectedModel) {\n      const savedModel = localStorage.getItem(`selectedModel-${position}`);\n      \n      // Only use saved model if it exists in current available models\n      if (savedModel && cachedModels.some(m => m.id === savedModel)) {\n        handleModelChange(savedModel);\n      } else {\n        // If no saved model or it's not available, select the first available model\n        handleModelChange(cachedModels[0].id);\n      }\n    }\n  }, [cachedModels, selectedModel, handleModelChange, position]);\n\n  // Update conversation messages\n  const updateConversationMessages = useCallback((newMessages) => {\n    setConversations(prev => prev.map(conv => \n      conv.id === currentConversationId\n        ? { ...conv, messages: newMessages }\n        : conv\n    ));\n  }, [currentConversationId]);\n\n  // Move cleanupConversation before handleConversationChange\n  const cleanupConversation = useCallback((conversationId) => {\n    // Abort any ongoing requests\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n    }\n\n    // Clear streaming responses\n    setStreamingResponses(prev => ({\n      ...prev,\n      [position]: ''\n    }));\n\n    // Clear thinking state\n    setThinking(prev => ({\n      ...prev,\n      [position]: false\n    }));\n\n    // Clear response buffer\n    responseBuffer.current = '';\n\n    // Clear any pending timeouts\n    if (updateTimeoutRef.current) {\n      clearTimeout(updateTimeoutRef.current);\n      updateTimeoutRef.current = null;\n    }\n  }, [position, setStreamingResponses, setThinking]);\n\n  // Handle conversation switch\n  const handleConversationChange = useCallback((newId) => {\n    if (!conversations.some(conv => conv.id === newId)) {\n      console.warn('Invalid conversation ID, selecting first available conversation');\n      newId = conversations[0]?.id || Date.now().toString();\n    }\n    \n    // Clean up the current conversation before switching\n    cleanupConversation(currentConversationId);\n    setCurrentConversationId(newId);\n  }, [conversations, currentConversationId, cleanupConversation]);\n\n  // Optimize streaming updates\n  const updateStreamingResponse = useCallback((newContent) => {\n    responseBuffer.current = newContent;\n    \n    if (updateTimeoutRef.current) {\n      clearTimeout(updateTimeoutRef.current);\n    }\n\n    updateTimeoutRef.current = setTimeout(() => {\n      setStreamingResponses(prev => ({\n        ...prev,\n        [position]: responseBuffer.current\n      }));\n    }, 1500); // 1.5 second debounce\n  }, [position, setStreamingResponses]);\n\n  // Optimize chat completion request\n  const handleSendMessage = async () => {\n    if (!inputValue.trim() || !selectedModel || isModelSwitching) return;\n\n    // Only check server health once per minute\n    const isServerHealthy = await checkServerHealth();\n    if (!isServerHealthy) {\n      const errorMessage = 'Cannot connect to server. Please check that LM Studio is running.';\n      updateConversationMessages([\n        ...currentConversation.messages,\n        {\n          content: errorMessage,\n          timestamp: new Date().toISOString(),\n          role: 'error',\n        }\n      ]);\n      return;\n    }\n\n    setStreamingResponses(prev => ({ ...prev, [position]: '' }));\n    responseBuffer.current = '';\n    \n    const newMessage = {\n      content: inputValue,\n      timestamp: new Date().toISOString(),\n      role: 'user',\n    };\n\n    const updatedMessages = [...currentConversation.messages, newMessage];\n    updateConversationMessages(updatedMessages);\n    setInputValue('');\n    setThinking(prev => ({ ...prev, [position]: true }));\n\n    try {\n      abortControllerRef.current = new AbortController();\n      const timeoutId = setTimeout(() => {\n        if (abortControllerRef.current) {\n          abortControllerRef.current.abort();\n        }\n      }, 180000);\n\n      const response = await fetch(`${serverUrl}/v1/chat/completions`, {\n        method: 'POST',\n        signal: abortControllerRef.current.signal,\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          model: selectedModel,\n          messages: updatedMessages.map(msg => ({\n            role: msg.role === 'error' ? 'assistant' : msg.role,\n            content: msg.content\n          })),\n          stream: true,\n          temperature: 0.7,\n          max_tokens: 2000,\n          options: {\n            load_model_only_when_needed: false,\n            unload_model_after_completion: false, // Never unload models\n            skip_embedding_model: true,\n            skip_model_load_test: true,\n            no_auto_model_selection: true,\n            unload_other_models: false // Never unload other models\n          }\n        })\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        throw new Error(`Server returned ${response.status}: ${await response.text()}`);\n      }\n\n      if (response.body) {\n        const reader = response.body.getReader();\n        responseBuffer.current = '';\n        \n        try {\n          const responseText = await processStreamingResponse(reader);\n          \n          if (responseText) {\n            const updatedMessagesWithResponse = [...updatedMessages, {\n              content: responseText,\n              timestamp: new Date().toISOString(),\n              role: 'assistant',\n            }];\n            updateConversationMessages(updatedMessagesWithResponse);\n          }\n        } finally {\n          if (updateTimeoutRef.current) {\n            clearTimeout(updateTimeoutRef.current);\n            updateTimeoutRef.current = null;\n          }\n\n          setStreamingResponses(prev => ({ ...prev, [position]: '' }));\n          setThinking(prev => ({ ...prev, [position]: false }));\n          responseBuffer.current = '';\n          abortControllerRef.current = null;\n        }\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      let errorMessage = 'Unable to get response from LM Studio. ';\n      \n      try {\n        // Try to parse the error response\n        const errorData = error.message.includes('{') ? \n          JSON.parse(error.message.substring(error.message.indexOf('{'))) : null;\n        \n        if (errorData?.error?.message) {\n          if (errorData.error.message.includes('Failed to load model')) {\n            errorMessage = `Model loading failed. Please ensure:\\n` +\n              `1. The model file exists and is not corrupted\\n` +\n              `2. You have sufficient RAM available\\n` +\n              `3. Try restarting LM Studio\\n\\n` +\n              `Technical details: ${errorData.error.message}`;\n          } else {\n            errorMessage += errorData.error.message;\n          }\n        } else if (error.name === 'AbortError') {\n          errorMessage += 'Request timed out. The model might be too slow or not responding.';\n        } else if (error.message === 'Failed to fetch') {\n          errorMessage += `Please check that:\\n1. LM Studio is still running\\n2. Local Server is active\\n3. Server address (${serverUrl}) is correct\\n4. Your internet connection is stable`;\n        } else {\n          errorMessage += error.message;\n        }\n      } catch (parseError) {\n        // If we can't parse the error, just use the original error message\n        errorMessage += error.message;\n      }\n      \n      updateConversationMessages([\n        ...updatedMessages,\n        {\n          content: errorMessage,\n          timestamp: new Date().toISOString(),\n          role: 'error',\n        },\n      ]);\n      setThinking(prev => ({ ...prev, [position]: false }));\n    }\n  };\n\n  useEffect(() => {\n    localStorage.setItem(`conversations-${position}`, JSON.stringify(conversations));\n  }, [conversations, position]);\n\n  const scrollToBottom = useCallback(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, []);\n\n  useEffect(() => {\n    const scrollTimer = setTimeout(() => {\n      scrollToBottom();\n    }, 1000); // Delay scroll to 1 second\n\n    return () => clearTimeout(scrollTimer);\n  }, [currentConversation.messages, streamingResponse, scrollToBottom]);\n\n  useEffect(() => {\n    setStreamingResponses(prev => ({\n      ...prev,\n      [position]: ''\n    }));\n  }, [currentConversationId, position, setStreamingResponses]);\n\n  const handleClearChat = useCallback(() => {\n    updateConversationMessages([]); // Clear messages in current conversation\n    setStreamingResponses(prev => ({\n      ...prev,\n      [position]: ''\n    }));\n    setThinking(prev => ({\n      ...prev,\n      [position]: false\n    }));\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n    }\n  }, [position, setStreamingResponses, setThinking, updateConversationMessages]);\n\n  const handleMenuAction = useCallback((action) => {\n    switch (action) {\n      case 'new':\n        startNewConversation();\n        break;\n      case 'clear':\n        handleClearChat();\n        break;\n      case 'delete':\n        // Clean up the conversation before deleting\n        cleanupConversation(currentConversationId);\n        \n        setConversations(prev => {\n          const updatedConversations = prev.filter(conv => conv.id !== currentConversationId);\n          if (updatedConversations.length === 0) {\n            const newId = Date.now().toString();\n            const newConversation = {\n              id: newId,\n              name: 'New Conversation',\n              messages: [],\n              timestamp: new Date().toISOString()\n            };\n            return [newConversation];\n          }\n          // Switch to the first conversation in the list\n          setCurrentConversationId(updatedConversations[0].id);\n          return updatedConversations;\n        });\n        break;\n      default:\n        break;\n    }\n    setMenuAnchor(null);\n  }, [currentConversationId, handleClearChat, startNewConversation, cleanupConversation]);\n\n  const handleStopResponse = () => {\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n      setThinking(prev => ({ ...prev, [position]: false }));\n      setStreamingResponses(prev => ({ ...prev, [position]: '' }));\n    }\n  };\n\n  const updateConversationName = (id, firstMessage) => {\n    if (!firstMessage) return;\n    \n    // Extract first ~30 characters of the first message for the conversation name\n    const name = firstMessage.content.length > 30 \n      ? firstMessage.content.substring(0, 30) + '...'\n      : firstMessage.content;\n\n    setConversations(prev => \n      prev.map(conv => \n        conv.id === id \n          ? { ...conv, name } \n          : conv\n      )\n    );\n  };\n\n  // Batch updates for message list scrolling with longer delay\n  useEffect(() => {\n    const scrollTimer = setTimeout(() => {\n      scrollToBottom();\n    }, 1000); // Delay scroll to 1 second\n\n    return () => clearTimeout(scrollTimer);\n  }, [currentConversation.messages, streamingResponse, scrollToBottom]);\n\n  // Update streaming response handling\n  const processStreamingChunk = useCallback((chunk) => {\n    const lines = chunk.split('\\n');\n    let accumulatedContent = '';\n\n    for (const line of lines) {\n      if (!line.trim() || line.includes('[DONE]')) continue;\n\n      try {\n        const jsonStr = line.replace(/^data: /, '');\n        const data = JSON.parse(jsonStr);\n\n        if (data.choices && data.choices[0]?.delta?.content) {\n          accumulatedContent += data.choices[0].delta.content;\n        }\n      } catch (e) {\n        console.warn('Error parsing chunk:', e);\n        continue;\n      }\n    }\n\n    return accumulatedContent;\n  }, []);\n\n  const processStreamingResponse = async (reader, responseText = '', maxIterations = 1000) => {\n    let iterations = 0;\n    let accumulatedContent = responseBuffer.current || '';\n\n    try {\n      while (iterations < maxIterations) {\n        iterations++;\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        const chunk = new TextDecoder().decode(value);\n        const newContent = processStreamingChunk(chunk);\n        accumulatedContent += newContent;\n        responseText += newContent;\n\n        // Update the streaming response with the accumulated content\n        setStreamingResponses(prev => ({\n          ...prev,\n          [position]: accumulatedContent\n        }));\n      }\n\n      return responseText;\n    } catch (error) {\n      console.error('Error processing stream:', error);\n      throw error;\n    }\n  };\n\n  // Update StreamingResponseComponent to handle paragraphs better\n  const StreamingResponseComponent = React.memo(({ content }) => (\n    content ? (\n      <Message align=\"left\">\n        <MessageContent \n          align=\"left\"\n          sx={{ \n            backgroundColor: theme => theme.palette.background.paper,\n            minWidth: '200px',\n            width: 'fit-content',\n            maxWidth: '70%'\n          }}\n        >\n          <ReactMarkdown \n            components={{\n              p: ({ children }) => (\n                <Typography \n                  variant=\"body1\" \n                  component=\"p\" \n                  sx={{ \n                    mb: 1,\n                    '&:last-child': { mb: 0 }\n                  }}\n                >\n                  {children}\n                </Typography>\n              ),\n              pre: ({ node, ...props }) => (\n                <pre style={{ \n                  backgroundColor: 'rgba(0, 0, 0, 0.1)',\n                  padding: '8px',\n                  borderRadius: '4px',\n                  overflowX: 'auto',\n                }} {...props} />\n              ),\n              code: ({ node, inline, ...props }) => (\n                inline ? \n                  <code style={{ \n                    backgroundColor: 'rgba(0, 0, 0, 0.1)',\n                    padding: '2px 4px',\n                    borderRadius: '3px',\n                  }} {...props} /> :\n                  <code {...props} />\n              ),\n            }}\n          >\n            {content}\n          </ReactMarkdown>\n        </MessageContent>\n      </Message>\n    ) : null\n  ));\n\n  // Update ThinkingIndicator to be more precise\n  const ThinkingIndicator = React.memo(({ isThinking, onStop }) => (\n    isThinking && !streamingResponse && !currentConversation.messages.find(m => m.role === 'error') ? (\n      <Message align=\"left\">\n        <MessageContent \n          align=\"left\" \n          sx={{ \n            backgroundColor: 'rgba(0, 0, 0, 0.2)',\n            minWidth: '200px',\n            width: 'fit-content',\n            maxWidth: '70%',\n            position: 'relative',\n            padding: '12px 16px',\n            '& pre': {\n              margin: 0,\n              padding: 0,\n              backgroundColor: 'transparent',\n              fontFamily: 'inherit',\n              whiteSpace: 'pre-wrap',\n              fontSize: '0.875rem',\n            }\n          }}\n        >\n          <Box sx={{ \n            display: 'flex', \n            flexDirection: 'column',\n            gap: 1,\n          }}>\n            <pre>{\"<think>\"}</pre>\n            <pre style={{ marginLeft: '8px' }}>\n              {\"Processing request and generating response...\"}\n            </pre>\n            <pre>{\"</think>\"}</pre>\n            <Box sx={{ \n              display: 'flex', \n              alignItems: 'center', \n              gap: 1,\n              mt: 1,\n              pt: 1,\n              borderTop: '1px solid rgba(255, 255, 255, 0.1)',\n            }}>\n              <CircularProgress size={16} />\n              <Typography>Thinking...</Typography>\n              <IconButton \n                size=\"small\" \n                onClick={onStop}\n                sx={{ \n                  ml: 'auto',\n                  bgcolor: 'error.main',\n                  color: 'error.contrastText',\n                  '&:hover': {\n                    bgcolor: 'error.dark',\n                  },\n                  width: 24,\n                  height: 24,\n                }}\n              >\n                <StopIcon sx={{ fontSize: 16 }} />\n              </IconButton>\n            </Box>\n          </Box>\n        </MessageContent>\n      </Message>\n    ) : null\n  ));\n\n  // Update model status when a model is successfully used\n  const updateModelStatus = useCallback((modelId, isAvailable) => {\n    setModelStatus(prev => ({\n      ...prev,\n      [modelId]: {\n        available: isAvailable,\n        lastChecked: Date.now()\n      }\n    }));\n  }, []);\n\n  // Check if we need to verify model availability\n  const shouldCheckModel = useCallback((modelId) => {\n    const status = modelStatus[modelId];\n    if (!status) return true;\n    \n    const now = Date.now();\n    return now - status.lastChecked > networkCheckInterval;\n  }, [modelStatus]);\n\n  // Add model unload/refresh function\n  const handleModelAction = useCallback(async (action) => {\n    if (!selectedModel) return;\n    \n    setIsModelSwitching(true);\n    try {\n      if (action === 'unload') {\n        await fetch(`${serverUrl}/v1/model/unload`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            model: selectedModel,\n            options: {\n              unload_other_models: false // Never unload other models\n            }\n          })\n        });\n      } else if (action === 'refresh') {\n        // First unload\n        await fetch(`${serverUrl}/v1/model/unload`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            model: selectedModel,\n            options: {\n              unload_other_models: false\n            }\n          })\n        });\n        \n        // Then force a reload by sending a test completion\n        await fetch(`${serverUrl}/v1/chat/completions`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            model: selectedModel,\n            messages: [{ role: 'system', content: 'test' }],\n            stream: false,\n            max_tokens: 1,\n            options: {\n              load_model_only_when_needed: false,\n              unload_model_after_completion: false,\n              unload_other_models: false\n            }\n          })\n        });\n      }\n    } catch (error) {\n      console.warn(`Failed to ${action} model:`, error);\n    } finally {\n      setIsModelSwitching(false);\n    }\n  }, [selectedModel, serverUrl]);\n\n  return (\n    <StyledPaper elevation={3}>\n      <ChatHeader>\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n          <Tooltip title={selectedModel ? (models.find(m => m.id === selectedModel)?.name || 'Select a model') : 'Select a model'}>\n            <Avatar sx={{ \n              bgcolor: selectedModel ? \n                getModelColor(models.find(m => m.id === selectedModel)?.name || '') :\n                'primary.main',\n              transition: 'all 0.3s ease',\n              fontWeight: 600,\n              width: 40,\n              height: 40,\n              cursor: 'help',\n              '& img': {\n                width: '100%',\n                height: '100%',\n                objectFit: 'cover',\n              }\n            }}>\n              {selectedModel ? (\n                (() => {\n                  const modelName = models.find(m => m.id === selectedModel)?.name || '';\n                  const imagePath = getModelImage(modelName);\n                  return imagePath ? (\n                    <img \n                      src={imagePath} \n                      alt={modelName}\n                      style={{\n                        width: '100%',\n                        height: '100%',\n                        objectFit: 'cover',\n                      }}\n                    />\n                  ) : (\n                    getModelLetter(modelName)\n                  );\n                })()\n              ) : 'A'}\n            </Avatar>\n          </Tooltip>\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n            <ConversationSelector size=\"small\">\n              <Select\n                value={currentConversationId}\n                onChange={(e) => handleConversationChange(e.target.value)}\n                variant=\"standard\"\n                sx={{ fontSize: '0.875rem' }}\n              >\n                {conversations.map((conv) => (\n                  <MenuItem key={conv.id} value={conv.id}>\n                    {conv.name || 'New Conversation'}\n                  </MenuItem>\n                ))}\n              </Select>\n            </ConversationSelector>\n            {models.length > 0 ? (\n              <ModelSelector size=\"small\" sx={{ minWidth: 200 }}>\n                <Select\n                  value={selectedModel || ''}\n                  onChange={(e) => handleModelChange(e.target.value)}\n                  variant=\"standard\"\n                  displayEmpty\n                >\n                  {models.map((model) => (\n                    <MenuItem key={model.id} value={model.id}>\n                      {model.name}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </ModelSelector>\n            ) : (\n              <Typography variant=\"caption\" color=\"error\">\n                No AI models available\n              </Typography>\n            )}\n          </Box>\n        </Box>\n        <Box sx={{ display: 'flex', gap: 1 }}>\n          <Tooltip title=\"Drag messages here to add to notebook\">\n            <IconButton \n              id=\"notebook-target\"\n              sx={{\n                position: 'relative',\n                '&::after': {\n                  content: '\"\"',\n                  position: 'absolute',\n                  top: -8,\n                  right: -8,\n                  bottom: -8,\n                  left: -8,\n                  borderRadius: '50%',\n                  transition: 'all 0.2s ease',\n                  zIndex: -1,\n                },\n                '&.drag-over::after': {\n                  backgroundColor: 'rgba(25, 118, 210, 0.1)',\n                  transform: 'scale(1.2)',\n                },\n                '&:hover': {\n                  '& .MuiSvgIcon-root': {\n                    transform: 'scale(1.1)',\n                  }\n                },\n                '& .MuiSvgIcon-root': {\n                  transition: 'transform 0.2s ease',\n                }\n              }}\n              onDragOver={(e) => {\n                e.preventDefault();\n                e.currentTarget.classList.add('drag-over');\n                e.dataTransfer.dropEffect = 'copy';\n              }}\n              onDragLeave={(e) => {\n                e.preventDefault();\n                e.currentTarget.classList.remove('drag-over');\n              }}\n              onDrop={(e) => {\n                e.preventDefault();\n                e.currentTarget.classList.remove('drag-over');\n                try {\n                  // Try to get rich data first\n                  const jsonData = e.dataTransfer.getData('application/json');\n                  if (jsonData) {\n                    const data = JSON.parse(jsonData);\n                    if (data.type === 'chat_message') {\n                      const event = new CustomEvent('addToNotebook', {\n                        detail: {\n                          ...data,\n                          source: 'drag_and_drop'\n                        }\n                      });\n                      window.dispatchEvent(event);\n                      // Show success feedback\n                      e.currentTarget.style.color = '#4caf50';\n                      setTimeout(() => {\n                        e.currentTarget.style.color = '';\n                      }, 500);\n                      return;\n                    }\n                  }\n                  \n                  // Fallback to plain text\n                  const text = e.dataTransfer.getData('text/plain');\n                  if (text) {\n                    const event = new CustomEvent('addToNotebook', {\n                      detail: {\n                        type: 'chat_message',\n                        content: text,\n                        timestamp: new Date().toISOString(),\n                        role: 'user',\n                        source: 'drag_and_drop'\n                      }\n                    });\n                    window.dispatchEvent(event);\n                    // Show success feedback\n                    e.currentTarget.style.color = '#4caf50';\n                    setTimeout(() => {\n                      e.currentTarget.style.color = '';\n                    }, 500);\n                  }\n                } catch (error) {\n                  console.warn('Invalid drag data:', error);\n                  // Show error feedback\n                  e.currentTarget.style.color = '#f44336';\n                  setTimeout(() => {\n                    e.currentTarget.style.color = '';\n                  }, 500);\n                }\n              }}\n            >\n              <NoteAddIcon />\n            </IconButton>\n          </Tooltip>\n          <IconButton \n            onClick={startNewConversation}\n            title=\"New Conversation\"\n          >\n            <AddIcon />\n          </IconButton>\n          <IconButton onClick={(e) => setMenuAnchor(e.currentTarget)}>\n            <MoreIcon />\n          </IconButton>\n        </Box>\n      </ChatHeader>\n\n      <MessageList>\n        {currentConversation.messages.map((msg, index) => (\n          <MessageComponent\n            key={`${msg.timestamp}-${index}`}\n            message={msg}\n            align={msg.role === 'user' ? 'right' : 'left'}\n          />\n        ))}\n        <StreamingResponseComponent content={streamingResponse} />\n        <ThinkingIndicator \n          isThinking={isThinking} \n          onStop={handleStopResponse}\n        />\n        <div ref={messagesEndRef} />\n      </MessageList>\n\n      <ChatFooter>\n        <InputContainer\n          onDragOver={(e) => {\n            e.preventDefault();\n            e.currentTarget.style.backgroundColor = 'rgba(25, 118, 210, 0.1)';\n            e.currentTarget.style.transform = 'scale(1.01)';\n            e.dataTransfer.dropEffect = 'copy';\n          }}\n          onDragLeave={(e) => {\n            e.preventDefault();\n            e.currentTarget.style.backgroundColor = '';\n            e.currentTarget.style.transform = '';\n          }}\n          onDrop={(e) => {\n            e.preventDefault();\n            e.currentTarget.style.backgroundColor = '';\n            e.currentTarget.style.transform = '';\n            const text = e.dataTransfer.getData('text/plain');\n            if (text) {\n              setInputValue(prev => {\n                const textarea = document.querySelector('textarea');\n                const cursorPosition = textarea?.selectionStart || prev.length;\n                return prev.slice(0, cursorPosition) + text + prev.slice(cursorPosition);\n              });\n              // Focus and scroll to end\n              const textarea = document.querySelector('textarea');\n              if (textarea) {\n                textarea.focus();\n                textarea.scrollTop = textarea.scrollHeight;\n              }\n            }\n          }}\n          sx={{\n            transition: 'all 0.2s ease',\n            '&:hover': {\n              '&[data-dragging=\"true\"]': {\n                backgroundColor: 'rgba(25, 118, 210, 0.1)',\n                transform: 'scale(1.01)'\n              }\n            }\n          }}\n        >\n          <IconButton \n            size=\"small\" \n            onClick={(e) => setEmojiAnchor(e.currentTarget)}\n          >\n            <EmojiIcon />\n          </IconButton>\n          <Popover\n            open={Boolean(emojiAnchor)}\n            anchorEl={emojiAnchor}\n            onClose={() => setEmojiAnchor(null)}\n            anchorOrigin={{\n              vertical: 'top',\n              horizontal: 'left',\n            }}\n            transformOrigin={{\n              vertical: 'bottom',\n              horizontal: 'left',\n            }}\n          >\n            <Box sx={{ \n              '.EmojiPickerReact': {\n                '--epr-bg-color': 'rgba(18, 18, 18, 0.95)',\n                '--epr-category-label-bg-color': 'rgba(18, 18, 18, 0.95)',\n                '--epr-hover-bg-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-focus-bg-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-highlight-color': 'rgba(255, 255, 255, 0.2)',\n                '--epr-search-border-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-border-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-text-color': '#fff',\n                border: 'none',\n                boxShadow: '0 4px 20px rgba(0, 0, 0, 0.3)',\n              }\n            }}>\n              <EmojiPicker\n                onEmojiClick={handleEmojiClick}\n                autoFocusSearch={false}\n                theme=\"dark\"\n                searchPlaceHolder=\"Search emojis...\"\n                width={320}\n                height={400}\n                previewConfig={{\n                  showPreview: false\n                }}\n              />\n            </Box>\n          </Popover>\n          <input\n            type=\"file\"\n            ref={fileInputRef}\n            style={{ display: 'none' }}\n            onChange={handleFileUpload}\n            accept=\"image/*,.pdf,.txt,.doc,.docx\"\n          />\n          <Tooltip title={\n            !selectedModel ? \"Please select a model first\" :\n            !supportsFileUpload() ? \"This model doesn't support file uploads\" :\n            \"Upload a file\"\n          }>\n            <span>\n              <IconButton \n                size=\"small\"\n                disabled={!supportsFileUpload()}\n                onClick={() => fileInputRef.current?.click()}\n              >\n                <ImageIcon sx={{ \n                  color: theme => !supportsFileUpload() ? \n                    theme.palette.action.disabled : \n                    'inherit'\n                }} />\n              </IconButton>\n            </span>\n          </Tooltip>\n          <TextField\n            fullWidth\n            multiline\n            maxRows={4}\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyPress={handleKeyPress}\n            placeholder=\"Type your message...\"\n            variant=\"standard\"\n            InputProps={{\n              disableUnderline: true,\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    onClick={handleSendMessage}\n                    disabled={!inputValue.trim() || !selectedModel}\n                    color=\"primary\"\n                  >\n                    <SendIcon />\n                  </IconButton>\n                </InputAdornment>\n              ),\n            }}\n          />\n        </InputContainer>\n        {uploadError && (\n          <Typography \n            variant=\"caption\" \n            color=\"error\" \n            sx={{ mt: 1, display: 'block' }}\n            onClick={() => setUploadError('')}\n          >\n            {uploadError}\n          </Typography>\n        )}\n      </ChatFooter>\n\n      <Menu\n        anchorEl={menuAnchor}\n        open={Boolean(menuAnchor)}\n        onClose={() => setMenuAnchor(null)}\n      >\n        <MenuItem onClick={() => handleMenuAction('new')}>\n          New Conversation\n        </MenuItem>\n        <MenuItem onClick={() => handleMenuAction('clear')}>\n          Clear Current Conversation\n        </MenuItem>\n        <MenuItem onClick={() => handleMenuAction('delete')}>\n          Delete Current Conversation\n        </MenuItem>\n        <MenuItem onClick={() => setHealthChecksEnabled(prev => !prev)}>\n          {healthChecksEnabled ? '✓ ' : ''} Health Checks Enabled\n        </MenuItem>\n        <Divider />\n        <MenuItem \n          onClick={() => handleModelAction('unload')}\n          disabled={!selectedModel || isModelSwitching}\n        >\n          Unload Current Model\n        </MenuItem>\n        <MenuItem \n          onClick={() => handleModelAction('refresh')}\n          disabled={!selectedModel || isModelSwitching}\n        >\n          Refresh Current Model\n        </MenuItem>\n      </Menu>\n    </StyledPaper>\n  );\n}\n\nexport default ChatWindow; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}