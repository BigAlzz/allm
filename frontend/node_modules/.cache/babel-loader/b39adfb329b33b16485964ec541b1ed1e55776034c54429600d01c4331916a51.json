{"ast":null,"code":"var _jsxFileName = \"E:\\\\Cline\\\\allm\\\\frontend\\\\src\\\\components\\\\ChatWindow.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useCallback, useMemo } from 'react';\nimport { Box, Paper, TextField, IconButton, Typography, Avatar, Menu, MenuItem, Select, FormControl, CircularProgress, InputAdornment, Popover, Tooltip, ClickAwayListener, Divider } from '@mui/material';\nimport { Send as SendIcon, MoreVert as MoreIcon, VideoCall as VideoIcon, OpenInFull as ExpandIcon, Image as ImageIcon, EmojiEmotions as EmojiIcon, Stop as StopIcon, Add as AddIcon, NoteAdd as NoteAddIcon, Psychology as BrainstormIcon } from '@mui/icons-material';\nimport ReactMarkdown from 'react-markdown';\nimport { styled } from '@mui/material/styles';\nimport EmojiPicker from 'emoji-picker-react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledPaper = styled(Paper)(({\n  theme\n}) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  height: '100%',\n  flex: 1,\n  overflow: 'hidden',\n  backgroundColor: theme.palette.background.paper,\n  borderRadius: theme.spacing(3)\n}));\n_c = StyledPaper;\nconst ChatHeader = styled(Box)(({\n  theme\n}) => ({\n  padding: theme.spacing(2),\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  borderBottom: `1px solid ${theme.palette.divider}`\n}));\n_c2 = ChatHeader;\nconst MessageList = styled(Box)(({\n  theme\n}) => ({\n  flexGrow: 1,\n  overflow: 'auto',\n  padding: theme.spacing(2),\n  backgroundColor: theme.palette.background.default,\n  '&::-webkit-scrollbar': {\n    width: '4px'\n  },\n  '&::-webkit-scrollbar-track': {\n    background: 'transparent'\n  },\n  '&::-webkit-scrollbar-thumb': {\n    background: theme.palette.grey[600],\n    borderRadius: '4px'\n  }\n}));\n_c3 = MessageList;\nconst Message = styled(Box)(({\n  theme,\n  align\n}) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: align === 'right' ? 'flex-end' : 'flex-start',\n  marginBottom: theme.spacing(2)\n}));\n_c4 = Message;\nconst MessageContent = styled(Box)(({\n  theme,\n  align\n}) => ({\n  maxWidth: '70%',\n  padding: theme.spacing(1.5),\n  borderRadius: theme.spacing(2),\n  backgroundColor: align === 'right' ? theme.palette.primary.main : theme.palette.background.paper,\n  color: align === 'right' ? theme.palette.primary.contrastText : theme.palette.text.primary,\n  boxShadow: theme.shadows[1],\n  '& p': {\n    margin: 0\n  },\n  '& pre': {\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(1),\n    borderRadius: theme.spacing(1),\n    overflow: 'auto',\n    margin: theme.spacing(1, 0),\n    fontFamily: 'monospace'\n  },\n  '& code': {\n    fontFamily: 'monospace',\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(0.25, 0.5),\n    borderRadius: theme.spacing(0.5)\n  },\n  '& ul, & ol': {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    paddingLeft: theme.spacing(3)\n  },\n  '& li': {\n    marginBottom: theme.spacing(0.5)\n  },\n  '& blockquote': {\n    borderLeft: `3px solid ${theme.palette.divider}`,\n    margin: theme.spacing(1, 0),\n    paddingLeft: theme.spacing(2),\n    color: theme.palette.text.secondary\n  }\n}));\n_c5 = MessageContent;\nconst ChatFooter = styled(Box)(({\n  theme\n}) => ({\n  padding: theme.spacing(2),\n  borderTop: `1px solid ${theme.palette.divider}`,\n  backgroundColor: theme.palette.background.paper\n}));\n_c6 = ChatFooter;\nconst InputContainer = styled(Box)(({\n  theme\n}) => ({\n  display: 'flex',\n  alignItems: 'center',\n  gap: theme.spacing(1),\n  backgroundColor: theme.palette.background.default,\n  borderRadius: theme.spacing(3),\n  padding: theme.spacing(1)\n}));\n_c7 = InputContainer;\nconst ErrorMessage = styled(Box)(({\n  theme\n}) => ({\n  padding: theme.spacing(1, 2),\n  backgroundColor: theme.palette.error.dark,\n  color: theme.palette.error.contrastText,\n  borderRadius: theme.spacing(1),\n  display: 'flex',\n  alignItems: 'center',\n  gap: theme.spacing(1),\n  marginBottom: theme.spacing(2)\n}));\n_c8 = ErrorMessage;\nconst ModelSelector = styled(FormControl)(({\n  theme\n}) => ({\n  '& .MuiSelect-select': {\n    paddingBottom: 0\n  },\n  '& .MuiInput-underline:before': {\n    borderBottomColor: 'transparent'\n  }\n}));\n_c9 = ModelSelector;\nconst ConversationSelector = styled(FormControl)(({\n  theme\n}) => ({\n  minWidth: 200,\n  '& .MuiSelect-select': {\n    fontSize: '0.875rem'\n  }\n}));\n_c10 = ConversationSelector;\nfunction ChatWindow({\n  position,\n  models,\n  streamingResponse,\n  isThinking,\n  setStreamingResponses,\n  setThinking,\n  serverUrl,\n  otherPanelMessages,\n  onBrainstormMessage\n}) {\n  _s2();\n  var _s = $RefreshSig$(),\n    _models$find4,\n    _models$find5;\n  // Move startNewConversation definition before any hooks that use it\n  const startNewConversation = useCallback(() => {\n    const newId = Date.now().toString();\n    const newConversation = {\n      id: newId,\n      name: 'New Conversation',\n      messages: [],\n      timestamp: new Date().toISOString()\n    };\n    setConversations(prev => [newConversation, ...prev]);\n    setCurrentConversationId(newId);\n  }, []); // Empty dependency array since it only uses setState functions\n\n  // Initialize state with timestamp-based ID\n  const [conversations, setConversations] = useState(() => {\n    const saved = localStorage.getItem(`conversations-${position}`);\n    const initialId = Date.now().toString();\n    return saved ? JSON.parse(saved) : [{\n      id: initialId,\n      name: 'New Conversation',\n      messages: [],\n      timestamp: new Date().toISOString()\n    }];\n  });\n  const [currentConversationId, setCurrentConversationId] = useState(() => {\n    const saved = localStorage.getItem(`conversations-${position}`);\n    if (saved) {\n      var _parsedConversations$;\n      const parsedConversations = JSON.parse(saved);\n      return ((_parsedConversations$ = parsedConversations[0]) === null || _parsedConversations$ === void 0 ? void 0 : _parsedConversations$.id) || Date.now().toString();\n    }\n    return Date.now().toString();\n  });\n\n  // Remove separate messages state and use conversation messages directly\n  const currentConversation = useMemo(() => conversations.find(c => c.id === currentConversationId) || conversations[0], [conversations, currentConversationId]);\n  const [inputValue, setInputValue] = useState('');\n  const [selectedModel, setSelectedModel] = useState(() => {\n    const savedModel = localStorage.getItem(`selectedModel-${position}`);\n    return savedModel || '';\n  });\n  const [menuAnchor, setMenuAnchor] = useState(null);\n  const [emojiAnchor, setEmojiAnchor] = useState(null);\n  const [uploadError, setUploadError] = useState('');\n\n  // Refs\n  const fileInputRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  const abortControllerRef = useRef(null);\n  const responseBuffer = useRef('');\n  const updateTimeoutRef = useRef(null);\n\n  // Add health check state\n  const [lastHealthCheck, setLastHealthCheck] = useState(() => {\n    return parseInt(localStorage.getItem('lastHealthCheck') || '0');\n  });\n\n  // Add health check toggle state\n  const [healthChecksEnabled, setHealthChecksEnabled] = useState(() => {\n    return localStorage.getItem('healthChecksEnabled') !== 'false';\n  });\n\n  // Add loading state for model switching\n  const [isModelSwitching, setIsModelSwitching] = useState(false);\n\n  // Add model status tracking\n  const [modelStatus, setModelStatus] = useState({});\n  const lastNetworkCheck = useRef(0);\n  const networkCheckInterval = 60000; // 1 minute in milliseconds\n\n  // Cache models list with a longer interval\n  const [cachedModels, setCachedModels] = useState([]);\n  const modelListInterval = 60000; // 1 minute\n  const lastModelListCheck = useRef(0);\n\n  // Add brainstorm state\n  const [brainstormEnabled, setBrainstormEnabled] = useState(() => {\n    return localStorage.getItem(`brainstorm-enabled-${position}`) === 'true';\n  });\n\n  // Add state for scroll management\n  const [userHasScrolled, setUserHasScrolled] = useState(false);\n  const messageListRef = useRef(null);\n\n  // Function to check if scrolled to bottom\n  const isScrolledToBottom = useCallback(() => {\n    if (!messageListRef.current) return true;\n    const {\n      scrollHeight,\n      scrollTop,\n      clientHeight\n    } = messageListRef.current;\n    // Consider \"almost\" at bottom (within 100px) as at bottom\n    return scrollHeight - scrollTop - clientHeight < 100;\n  }, []);\n\n  // Handle scroll events\n  const handleScroll = useCallback(e => {\n    // Only set userHasScrolled if the scroll was manual (wheel or drag)\n    if (e.type === 'wheel' || e.type === 'touchmove') {\n      const wasAtBottom = isScrolledToBottom();\n      setUserHasScrolled(!wasAtBottom);\n    }\n  }, [isScrolledToBottom]);\n\n  // Scroll to bottom function\n  const scrollToBottom = useCallback(() => {\n    if (messagesEndRef.current && (!userHasScrolled || isScrolledToBottom())) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [userHasScrolled, isScrolledToBottom]);\n\n  // Update scroll effect\n  useEffect(() => {\n    if (!messageListRef.current) return;\n    const messageList = messageListRef.current;\n    messageList.addEventListener('wheel', handleScroll);\n    messageList.addEventListener('touchmove', handleScroll);\n    return () => {\n      messageList.removeEventListener('wheel', handleScroll);\n      messageList.removeEventListener('touchmove', handleScroll);\n    };\n  }, [handleScroll]);\n\n  // Update auto-scroll effect\n  useEffect(() => {\n    const scrollTimer = setTimeout(() => {\n      scrollToBottom();\n    }, 100);\n    return () => clearTimeout(scrollTimer);\n  }, [currentConversation.messages, streamingResponse, scrollToBottom]);\n\n  // Now handleModelChange can use unloadModel\n  const handleModelChange = useCallback(async newModelId => {\n    if (selectedModel === newModelId || isModelSwitching) return;\n    setIsModelSwitching(true);\n    try {\n      setSelectedModel(newModelId);\n      localStorage.setItem(`selectedModel-${position}`, newModelId);\n    } finally {\n      setIsModelSwitching(false);\n    }\n  }, [selectedModel, position, isModelSwitching]);\n\n  // Update checkServerHealth to respect the toggle\n  const checkServerHealth = useCallback(async () => {\n    // If health checks are disabled, always return true\n    if (!healthChecksEnabled) {\n      return true;\n    }\n    const now = Date.now();\n    if (now - lastNetworkCheck.current < networkCheckInterval) {\n      return true; // Return true if we checked recently\n    }\n    try {\n      const response = await fetch(`${serverUrl}/health`, {\n        method: 'HEAD',\n        signal: AbortSignal.timeout(5000)\n      });\n      if (response.ok) {\n        lastNetworkCheck.current = now;\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.warn('Health check failed:', error);\n      return false;\n    }\n  }, [serverUrl, healthChecksEnabled]);\n\n  // Add effect to save health check preference\n  useEffect(() => {\n    localStorage.setItem('healthChecksEnabled', healthChecksEnabled);\n  }, [healthChecksEnabled]);\n\n  // Replace models prop usage with cached models\n  useEffect(() => {\n    const fetchModels = async () => {\n      const now = Date.now();\n      if (now - lastModelListCheck.current < modelListInterval) {\n        return; // Use cached models if checked recently\n      }\n      try {\n        const response = await fetch(`${serverUrl}/v1/models`, {\n          method: 'GET',\n          headers: {\n            'Cache-Control': 'no-cache'\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          setCachedModels(data.data || []);\n          lastModelListCheck.current = now;\n        }\n      } catch (error) {\n        console.warn('Failed to fetch models:', error);\n      }\n    };\n    fetchModels();\n  }, [serverUrl]);\n\n  // Update model selection logic to use cached models\n  useEffect(() => {\n    if (cachedModels.length > 0 && !selectedModel) {\n      const savedModel = localStorage.getItem(`selectedModel-${position}`);\n\n      // Only use saved model if it exists in current available models\n      if (savedModel && cachedModels.some(m => m.id === savedModel)) {\n        handleModelChange(savedModel);\n      } else {\n        // If no saved model or it's not available, select the first available model\n        handleModelChange(cachedModels[0].id);\n      }\n    }\n  }, [cachedModels, selectedModel, handleModelChange, position]);\n\n  // Update conversation messages\n  const updateConversationMessages = useCallback(newMessages => {\n    setConversations(prev => prev.map(conv => conv.id === currentConversationId ? {\n      ...conv,\n      messages: newMessages\n    } : conv));\n  }, [currentConversationId]);\n\n  // Move cleanupConversation before handleConversationChange\n  const cleanupConversation = useCallback(conversationId => {\n    // Abort any ongoing requests\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n    }\n\n    // Clear streaming responses\n    setStreamingResponses(prev => ({\n      ...prev,\n      [position]: ''\n    }));\n\n    // Clear thinking state\n    setThinking(prev => ({\n      ...prev,\n      [position]: false\n    }));\n\n    // Clear response buffer\n    responseBuffer.current = '';\n\n    // Clear any pending timeouts\n    if (updateTimeoutRef.current) {\n      clearTimeout(updateTimeoutRef.current);\n      updateTimeoutRef.current = null;\n    }\n  }, [position, setStreamingResponses, setThinking]);\n\n  // Handle conversation switch\n  const handleConversationChange = useCallback(newId => {\n    if (!conversations.some(conv => conv.id === newId)) {\n      var _conversations$;\n      console.warn('Invalid conversation ID, selecting first available conversation');\n      newId = ((_conversations$ = conversations[0]) === null || _conversations$ === void 0 ? void 0 : _conversations$.id) || Date.now().toString();\n    }\n\n    // Clean up the current conversation before switching\n    cleanupConversation(currentConversationId);\n    setCurrentConversationId(newId);\n  }, [conversations, currentConversationId, cleanupConversation]);\n\n  // Optimize streaming updates\n  const updateStreamingResponse = useCallback(newContent => {\n    responseBuffer.current = newContent;\n    if (updateTimeoutRef.current) {\n      clearTimeout(updateTimeoutRef.current);\n    }\n    updateTimeoutRef.current = setTimeout(() => {\n      setStreamingResponses(prev => ({\n        ...prev,\n        [position]: responseBuffer.current\n      }));\n    }, 1500); // 1.5 second debounce\n  }, [position, setStreamingResponses]);\n\n  // Update effect to watch for messages from the other panel\n  useEffect(() => {\n    var _lastMessage$metadata;\n    if (!brainstormEnabled || !selectedModel || isThinking || !(otherPanelMessages !== null && otherPanelMessages !== void 0 && otherPanelMessages.length)) return;\n    const lastMessage = otherPanelMessages[otherPanelMessages.length - 1];\n    if ((lastMessage === null || lastMessage === void 0 ? void 0 : lastMessage.role) === 'assistant' && !lastMessage.processed && ((_lastMessage$metadata = lastMessage.metadata) === null || _lastMessage$metadata === void 0 ? void 0 : _lastMessage$metadata.fromPanel) !== position) {\n      // Mark the message as processed to prevent loops\n      lastMessage.processed = true;\n\n      // Automatically set input and trigger send\n      setInputValue(lastMessage.content);\n      // Small delay for natural conversation flow\n      setTimeout(() => {\n        handleSendMessage(lastMessage.content);\n      }, 800);\n    }\n  }, [brainstormEnabled, otherPanelMessages, selectedModel, isThinking, position]);\n\n  // Update handleSendMessage to accept optional content parameter\n  const handleSendMessage = async (contentOverride = null) => {\n    const messageContent = contentOverride || inputValue;\n    if (!messageContent.trim() || !selectedModel || isModelSwitching) return;\n\n    // Only check server health once per minute\n    const isServerHealthy = await checkServerHealth();\n    if (!isServerHealthy) {\n      const errorMessage = 'Cannot connect to server. Please check that LM Studio is running.';\n      updateConversationMessages([...currentConversation.messages, {\n        content: errorMessage,\n        timestamp: new Date().toISOString(),\n        role: 'error'\n      }]);\n      return;\n    }\n    setStreamingResponses(prev => ({\n      ...prev,\n      [position]: ''\n    }));\n    responseBuffer.current = '';\n    const newMessage = {\n      content: messageContent,\n      timestamp: new Date().toISOString(),\n      role: 'user'\n    };\n    const updatedMessages = [...currentConversation.messages, newMessage];\n    updateConversationMessages(updatedMessages);\n    setInputValue('');\n    setThinking(prev => ({\n      ...prev,\n      [position]: true\n    }));\n    try {\n      abortControllerRef.current = new AbortController();\n      const timeoutId = setTimeout(() => {\n        if (abortControllerRef.current) {\n          abortControllerRef.current.abort();\n        }\n      }, 180000);\n      const response = await fetch(`${serverUrl}/v1/chat/completions`, {\n        method: 'POST',\n        signal: abortControllerRef.current.signal,\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          model: selectedModel,\n          messages: updatedMessages.map(msg => ({\n            role: msg.role === 'error' ? 'assistant' : msg.role,\n            content: msg.content\n          })),\n          stream: true,\n          temperature: 0.7,\n          max_tokens: 2000,\n          options: {\n            load_model_only_when_needed: false,\n            unload_model_after_completion: false,\n            // Never unload models\n            skip_embedding_model: true,\n            skip_model_load_test: true,\n            no_auto_model_selection: true,\n            unload_other_models: false // Never unload other models\n          }\n        })\n      });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        throw new Error(`Server returned ${response.status}: ${await response.text()}`);\n      }\n      if (response.body) {\n        const reader = response.body.getReader();\n        responseBuffer.current = '';\n        try {\n          const responseText = await processStreamingResponse(reader);\n          if (responseText) {\n            var _models$find;\n            const newMessage = {\n              content: responseText,\n              timestamp: new Date().toISOString(),\n              role: 'assistant',\n              metadata: {\n                fromPanel: position,\n                model: selectedModel,\n                modelName: (_models$find = models.find(m => m.id === selectedModel)) === null || _models$find === void 0 ? void 0 : _models$find.name\n              }\n            };\n            const updatedMessagesWithResponse = [...updatedMessages, newMessage];\n            updateConversationMessages(updatedMessagesWithResponse);\n\n            // If brainstorm is enabled, notify the other panel\n            if (brainstormEnabled) {\n              onBrainstormMessage === null || onBrainstormMessage === void 0 ? void 0 : onBrainstormMessage(newMessage);\n            }\n          }\n        } finally {\n          if (updateTimeoutRef.current) {\n            clearTimeout(updateTimeoutRef.current);\n            updateTimeoutRef.current = null;\n          }\n          setStreamingResponses(prev => ({\n            ...prev,\n            [position]: ''\n          }));\n          setThinking(prev => ({\n            ...prev,\n            [position]: false\n          }));\n          responseBuffer.current = '';\n          abortControllerRef.current = null;\n        }\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      let errorMessage = 'Unable to get response from LM Studio. ';\n      try {\n        var _errorData$error;\n        // Try to parse the error response\n        const errorData = error.message.includes('{') ? JSON.parse(error.message.substring(error.message.indexOf('{'))) : null;\n        if (errorData !== null && errorData !== void 0 && (_errorData$error = errorData.error) !== null && _errorData$error !== void 0 && _errorData$error.message) {\n          if (errorData.error.message.includes('Failed to load model')) {\n            errorMessage = `Model loading failed. Please ensure:\\n` + `1. The model file exists and is not corrupted\\n` + `2. You have sufficient RAM available\\n` + `3. Try restarting LM Studio\\n\\n` + `Technical details: ${errorData.error.message}`;\n          } else {\n            errorMessage += errorData.error.message;\n          }\n        } else if (error.name === 'AbortError') {\n          errorMessage += 'Request timed out. The model might be too slow or not responding.';\n        } else if (error.message === 'Failed to fetch') {\n          errorMessage += `Please check that:\\n1. LM Studio is still running\\n2. Local Server is active\\n3. Server address (${serverUrl}) is correct\\n4. Your internet connection is stable`;\n        } else {\n          errorMessage += error.message;\n        }\n      } catch (parseError) {\n        // If we can't parse the error, just use the original error message\n        errorMessage += error.message;\n      }\n      updateConversationMessages([...updatedMessages, {\n        content: errorMessage,\n        timestamp: new Date().toISOString(),\n        role: 'error'\n      }]);\n      setThinking(prev => ({\n        ...prev,\n        [position]: false\n      }));\n    }\n  };\n  useEffect(() => {\n    localStorage.setItem(`conversations-${position}`, JSON.stringify(conversations));\n  }, [conversations, position]);\n  const handleClearChat = useCallback(() => {\n    updateConversationMessages([]); // Clear messages in current conversation\n    setStreamingResponses(prev => ({\n      ...prev,\n      [position]: ''\n    }));\n    setThinking(prev => ({\n      ...prev,\n      [position]: false\n    }));\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n    }\n  }, [position, setStreamingResponses, setThinking, updateConversationMessages]);\n  const handleMenuAction = useCallback(action => {\n    switch (action) {\n      case 'new':\n        startNewConversation();\n        break;\n      case 'clear':\n        handleClearChat();\n        break;\n      case 'delete':\n        // Clean up the conversation before deleting\n        cleanupConversation(currentConversationId);\n        setConversations(prev => {\n          const updatedConversations = prev.filter(conv => conv.id !== currentConversationId);\n          if (updatedConversations.length === 0) {\n            const newId = Date.now().toString();\n            const newConversation = {\n              id: newId,\n              name: 'New Conversation',\n              messages: [],\n              timestamp: new Date().toISOString()\n            };\n            return [newConversation];\n          }\n          // Switch to the first conversation in the list\n          setCurrentConversationId(updatedConversations[0].id);\n          return updatedConversations;\n        });\n        break;\n      default:\n        break;\n    }\n    setMenuAnchor(null);\n  }, [currentConversationId, handleClearChat, startNewConversation, cleanupConversation]);\n  const handleStopResponse = () => {\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n      setThinking(prev => ({\n        ...prev,\n        [position]: false\n      }));\n      setStreamingResponses(prev => ({\n        ...prev,\n        [position]: ''\n      }));\n    }\n  };\n  const updateConversationName = (id, firstMessage) => {\n    if (!firstMessage) return;\n\n    // Extract first ~30 characters of the first message for the conversation name\n    const name = firstMessage.content.length > 30 ? firstMessage.content.substring(0, 30) + '...' : firstMessage.content;\n    setConversations(prev => prev.map(conv => conv.id === id ? {\n      ...conv,\n      name\n    } : conv));\n  };\n\n  // Batch updates for message list scrolling with longer delay\n  useEffect(() => {\n    const scrollTimer = setTimeout(() => {\n      scrollToBottom();\n    }, 1000); // Delay scroll to 1 second\n\n    return () => clearTimeout(scrollTimer);\n  }, [currentConversation.messages, streamingResponse, scrollToBottom]);\n\n  // Update streaming response handling\n  const processStreamingChunk = useCallback(chunk => {\n    const lines = chunk.split('\\n');\n    let accumulatedContent = '';\n    for (const line of lines) {\n      if (!line.trim() || line.includes('[DONE]')) continue;\n      try {\n        var _data$choices$, _data$choices$$delta;\n        const jsonStr = line.replace(/^data: /, '');\n        const data = JSON.parse(jsonStr);\n        if (data.choices && (_data$choices$ = data.choices[0]) !== null && _data$choices$ !== void 0 && (_data$choices$$delta = _data$choices$.delta) !== null && _data$choices$$delta !== void 0 && _data$choices$$delta.content) {\n          accumulatedContent += data.choices[0].delta.content;\n        }\n      } catch (e) {\n        console.warn('Error parsing chunk:', e);\n        continue;\n      }\n    }\n    return accumulatedContent;\n  }, []);\n  const processStreamingResponse = async (reader, responseText = '', maxIterations = 1000) => {\n    let iterations = 0;\n    let accumulatedContent = responseBuffer.current || '';\n    try {\n      while (iterations < maxIterations) {\n        iterations++;\n        const {\n          done,\n          value\n        } = await reader.read();\n        if (done) break;\n        const chunk = new TextDecoder().decode(value);\n        const newContent = processStreamingChunk(chunk);\n        accumulatedContent += newContent;\n        responseText += newContent;\n\n        // Update the streaming response with the accumulated content\n        setStreamingResponses(prev => ({\n          ...prev,\n          [position]: accumulatedContent\n        }));\n      }\n      return responseText;\n    } catch (error) {\n      console.error('Error processing stream:', error);\n      throw error;\n    }\n  };\n\n  // Update StreamingResponseComponent to handle paragraphs better\n  const StreamingResponseComponent = /*#__PURE__*/React.memo(({\n    content\n  }) => content ? /*#__PURE__*/_jsxDEV(Message, {\n    align: \"left\",\n    children: /*#__PURE__*/_jsxDEV(MessageContent, {\n      align: \"left\",\n      sx: {\n        backgroundColor: theme => theme.palette.background.paper,\n        minWidth: '200px',\n        width: 'fit-content',\n        maxWidth: '70%'\n      },\n      children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n        components: {\n          p: ({\n            children\n          }) => /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            component: \"p\",\n            sx: {\n              mb: 1,\n              '&:last-child': {\n                mb: 0\n              }\n            },\n            children: children\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 796,\n            columnNumber: 17\n          }, this),\n          pre: ({\n            node,\n            ...props\n          }) => /*#__PURE__*/_jsxDEV(\"pre\", {\n            style: {\n              backgroundColor: 'rgba(0, 0, 0, 0.1)',\n              padding: '8px',\n              borderRadius: '4px',\n              overflowX: 'auto'\n            },\n            ...props\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 808,\n            columnNumber: 17\n          }, this),\n          code: ({\n            node,\n            inline,\n            ...props\n          }) => inline ? /*#__PURE__*/_jsxDEV(\"code\", {\n            style: {\n              backgroundColor: 'rgba(0, 0, 0, 0.1)',\n              padding: '2px 4px',\n              borderRadius: '3px'\n            },\n            ...props\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 817,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"code\", {\n            ...props\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 822,\n            columnNumber: 19\n          }, this)\n        },\n        children: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 793,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 784,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 783,\n    columnNumber: 7\n  }, this) : null);\n\n  // Update ThinkingIndicator to be more precise\n  const ThinkingIndicator = /*#__PURE__*/React.memo(({\n    isThinking,\n    onStop\n  }) => isThinking && !streamingResponse && !currentConversation.messages.find(m => m.role === 'error') ? /*#__PURE__*/_jsxDEV(Message, {\n    align: \"left\",\n    children: /*#__PURE__*/_jsxDEV(MessageContent, {\n      align: \"left\",\n      sx: {\n        backgroundColor: 'rgba(0, 0, 0, 0.2)',\n        minWidth: '200px',\n        width: 'fit-content',\n        maxWidth: '70%',\n        position: 'relative',\n        padding: '12px 16px',\n        '& pre': {\n          margin: 0,\n          padding: 0,\n          backgroundColor: 'transparent',\n          fontFamily: 'inherit',\n          whiteSpace: 'pre-wrap',\n          fontSize: '0.875rem'\n        }\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          flexDirection: 'column',\n          gap: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"pre\", {\n          children: \"<think>\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 861,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          style: {\n            marginLeft: '8px'\n          },\n          children: \"Processing request and generating response...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 862,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: \"</think>\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 865,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'center',\n            gap: 1,\n            mt: 1,\n            pt: 1,\n            borderTop: '1px solid rgba(255, 255, 255, 0.1)'\n          },\n          children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 874,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: \"Thinking...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 875,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            size: \"small\",\n            onClick: onStop,\n            sx: {\n              ml: 'auto',\n              bgcolor: 'error.main',\n              color: 'error.contrastText',\n              '&:hover': {\n                bgcolor: 'error.dark'\n              },\n              width: 24,\n              height: 24\n            },\n            children: /*#__PURE__*/_jsxDEV(StopIcon, {\n              sx: {\n                fontSize: 16\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 890,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 876,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 866,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 856,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 837,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 836,\n    columnNumber: 7\n  }, this) : null);\n\n  // Update model status when a model is successfully used\n  const updateModelStatus = useCallback((modelId, isAvailable) => {\n    setModelStatus(prev => ({\n      ...prev,\n      [modelId]: {\n        available: isAvailable,\n        lastChecked: Date.now()\n      }\n    }));\n  }, []);\n\n  // Check if we need to verify model availability\n  const shouldCheckModel = useCallback(modelId => {\n    const status = modelStatus[modelId];\n    if (!status) return true;\n    const now = Date.now();\n    return now - status.lastChecked > networkCheckInterval;\n  }, [modelStatus]);\n\n  // Add model unload/refresh function\n  const handleModelAction = useCallback(async action => {\n    if (!selectedModel) return;\n    setIsModelSwitching(true);\n    try {\n      if (action === 'unload') {\n        await fetch(`${serverUrl}/v1/model/unload`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            model: selectedModel,\n            options: {\n              unload_other_models: false // Never unload other models\n            }\n          })\n        });\n      } else if (action === 'refresh') {\n        // First unload\n        await fetch(`${serverUrl}/v1/model/unload`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            model: selectedModel,\n            options: {\n              unload_other_models: false\n            }\n          })\n        });\n\n        // Then force a reload by sending a test completion\n        await fetch(`${serverUrl}/v1/chat/completions`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            model: selectedModel,\n            messages: [{\n              role: 'system',\n              content: 'test'\n            }],\n            stream: false,\n            max_tokens: 1,\n            options: {\n              load_model_only_when_needed: false,\n              unload_model_after_completion: false,\n              unload_other_models: false\n            }\n          })\n        });\n      }\n    } catch (error) {\n      console.warn(`Failed to ${action} model:`, error);\n    } finally {\n      setIsModelSwitching(false);\n    }\n  }, [selectedModel, serverUrl]);\n\n  // Add back the missing utility functions\n  const getModelColor = modelName => {\n    if (!modelName) return 'primary.main';\n    const name = modelName.trim().toLowerCase();\n\n    // Use a consistent color scheme based on model name\n    const colors = {\n      hermes: '#00BFA5',\n      // Teal\n      nomic: '#4A90E2',\n      // Blue\n      llama: '#2E7D32',\n      // Green\n      mistral: '#ED6C02',\n      // Orange\n      openchat: '#1976D2',\n      // Light blue\n      qwen: '#9C27B0',\n      // Purple\n      gemma: '#FF4081',\n      // Pink\n      default: '#757575' // Grey\n    };\n\n    // Find the first matching model name in the colors object\n    const modelType = Object.keys(colors).find(key => name.includes(key));\n    return modelType ? colors[modelType] : colors.default;\n  };\n  const getModelImage = modelName => {\n    if (!modelName) return null;\n    const name = modelName.trim().toLowerCase();\n\n    // Map of model names to their image files\n    const modelImages = {\n      hermes: './Images/Hermes.jpg',\n      nomic: './Images/Nomic.png',\n      qwen: './Images/Qwen2.png',\n      starcoder: './Images/StarCoder.jpg',\n      gemma: './Images/Gemma.png'\n    };\n\n    // Find the first matching model name in the images object\n    const modelType = Object.keys(modelImages).find(key => name.includes(key));\n    return modelType ? modelImages[modelType] : null;\n  };\n  const getModelLetter = modelName => {\n    if (!modelName) return 'A';\n    return modelName.charAt(0).toUpperCase();\n  };\n  const handleKeyPress = event => {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      event.preventDefault();\n      handleSendMessage();\n    }\n  };\n  const handleEmojiClick = emojiData => {\n    const emoji = emojiData.emoji;\n    const cursorPosition = document.querySelector('textarea').selectionStart;\n    const updatedText = inputValue.slice(0, cursorPosition) + emoji + inputValue.slice(cursorPosition);\n    setInputValue(updatedText);\n    setEmojiAnchor(null);\n  };\n  const handleFileUpload = async event => {\n    var _event$target$files;\n    const file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];\n    if (!file) return;\n\n    // Reset file input\n    event.target.value = '';\n\n    // Check file size (limit to 10MB)\n    if (file.size > 10 * 1024 * 1024) {\n      setUploadError('File size must be less than 10MB');\n      return;\n    }\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('model', selectedModel);\n      setThinking(prev => ({\n        ...prev,\n        [position]: true\n      }));\n      const response = await fetch(`${serverUrl}/v1/files`, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error(`Upload failed: ${response.statusText}`);\n      }\n      const data = await response.json();\n\n      // Add file message to chat\n      updateConversationMessages([...currentConversation.messages, {\n        content: `📎 Uploaded file: ${file.name}`,\n        timestamp: new Date().toISOString(),\n        role: 'user',\n        fileId: data.id\n      }]);\n    } catch (error) {\n      console.error('Upload error:', error);\n      setUploadError(error.message);\n      updateConversationMessages([...currentConversation.messages, {\n        content: `Failed to upload file: ${error.message}`,\n        timestamp: new Date().toISOString(),\n        role: 'error'\n      }]);\n    } finally {\n      setThinking(prev => ({\n        ...prev,\n        [position]: false\n      }));\n    }\n  };\n  const supportsFileUpload = () => {\n    var _currentModel$name, _currentModel$capabil;\n    if (!selectedModel || !models.length) return false;\n    const currentModel = models.find(m => m.id === selectedModel);\n    const modelName = (currentModel === null || currentModel === void 0 ? void 0 : (_currentModel$name = currentModel.name) === null || _currentModel$name === void 0 ? void 0 : _currentModel$name.toLowerCase()) || '';\n\n    // Enable file uploads for both deepseek and qwen models\n    if (modelName.includes('deepseek') || modelName.includes('qwen')) {\n      return true;\n    }\n    // Fallback to checking capabilities if model has them defined\n    return (currentModel === null || currentModel === void 0 ? void 0 : (_currentModel$capabil = currentModel.capabilities) === null || _currentModel$capabil === void 0 ? void 0 : _currentModel$capabil.includes('file_upload')) || false;\n  };\n\n  // Add back MessageComponent\n  const MessageComponent = /*#__PURE__*/_s(/*#__PURE__*/React.memo(_s(({\n    message,\n    align\n  }) => {\n    _s();\n    const [menuAnchor, setMenuAnchor] = useState(null);\n    const [isDragging, setIsDragging] = useState(false);\n    const handleDragStart = e => {\n      var _models$find2;\n      setIsDragging(true);\n      // Set both text and rich data for different drop targets\n      e.dataTransfer.setData('text/plain', message.content);\n      e.dataTransfer.setData('application/json', JSON.stringify({\n        type: 'chat_message',\n        content: message.content,\n        timestamp: message.timestamp,\n        role: message.role,\n        metadata: {\n          model: selectedModel,\n          modelName: (_models$find2 = models.find(m => m.id === selectedModel)) === null || _models$find2 === void 0 ? void 0 : _models$find2.name,\n          conversationId: currentConversationId,\n          conversationName: currentConversation.name\n        }\n      }));\n      e.dataTransfer.effectAllowed = 'copyMove';\n\n      // Create a custom drag image\n      const dragPreview = document.createElement('div');\n      dragPreview.className = 'message-drag-preview';\n      dragPreview.innerHTML = `\n        <div style=\"\n          padding: 8px 12px;\n          background: rgba(25, 118, 210, 0.9);\n          border-radius: 8px;\n          color: white;\n          font-size: 14px;\n          max-width: 200px;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          white-space: nowrap;\n          box-shadow: 0 2px 8px rgba(0,0,0,0.2);\n        \">\n          ${message.content.substring(0, 50)}${message.content.length > 50 ? '...' : ''}\n        </div>\n      `;\n      document.body.appendChild(dragPreview);\n      e.dataTransfer.setDragImage(dragPreview, 0, 0);\n      setTimeout(() => document.body.removeChild(dragPreview), 0);\n      e.currentTarget.classList.add('dragging');\n    };\n    const handleDragEnd = e => {\n      setIsDragging(false);\n      e.currentTarget.classList.remove('dragging');\n      setTimeout(() => setIsDragging(false), 100);\n    };\n    const handleMessageClick = event => {\n      if (!isDragging) {\n        // Only show menu if not dragging\n        event.preventDefault();\n        setMenuAnchor(event.currentTarget);\n      }\n    };\n    const handleAddToNotebook = useCallback(() => {\n      var _models$find3;\n      const event = new CustomEvent('addToNotebook', {\n        detail: {\n          type: 'chat_message',\n          content: message.content,\n          timestamp: message.timestamp,\n          role: message.role,\n          metadata: {\n            model: selectedModel,\n            modelName: (_models$find3 = models.find(m => m.id === selectedModel)) === null || _models$find3 === void 0 ? void 0 : _models$find3.name,\n            conversationId: currentConversationId,\n            conversationName: currentConversation.name\n          },\n          source: 'menu'\n        }\n      });\n      window.dispatchEvent(event);\n      setMenuAnchor(null);\n    }, [message]);\n    return /*#__PURE__*/_jsxDEV(Message, {\n      align: align,\n      draggable: true,\n      onDragStart: handleDragStart,\n      onDragEnd: handleDragEnd,\n      onClick: handleMessageClick,\n      sx: {\n        cursor: isDragging ? 'grabbing' : 'grab',\n        '&:hover': {\n          '& .message-content': {\n            boxShadow: 2,\n            transform: 'translateY(-1px)'\n          }\n        },\n        '&.dragging .message-content': {\n          opacity: 0.7,\n          boxShadow: 4,\n          transform: 'scale(0.98)'\n        },\n        '& .message-content': {\n          transition: 'all 0.2s ease'\n        }\n      },\n      children: [message.role === 'error' ? /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 16,\n          color: \"error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1222,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: message.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1223,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1221,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(MessageContent, {\n          align: align,\n          className: \"message-content\",\n          sx: {\n            transition: 'all 0.2s ease'\n          },\n          children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n            components: {\n              pre: ({\n                node,\n                ...props\n              }) => /*#__PURE__*/_jsxDEV(\"pre\", {\n                style: {\n                  backgroundColor: 'rgba(0, 0, 0, 0.1)',\n                  padding: '8px',\n                  borderRadius: '4px',\n                  overflowX: 'auto'\n                },\n                ...props\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1237,\n                columnNumber: 21\n              }, this),\n              code: ({\n                node,\n                inline,\n                ...props\n              }) => inline ? /*#__PURE__*/_jsxDEV(\"code\", {\n                style: {\n                  backgroundColor: 'rgba(0, 0, 0, 0.1)',\n                  padding: '2px 4px',\n                  borderRadius: '3px'\n                },\n                ...props\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1246,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(\"code\", {\n                ...props\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1251,\n                columnNumber: 23\n              }, this)\n            },\n            children: message.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1234,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1227,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          color: \"textSecondary\",\n          sx: {\n            mt: 0.5,\n            opacity: 0.7,\n            fontSize: '0.7rem'\n          },\n          children: new Date(message.timestamp).toLocaleTimeString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1258,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(Menu, {\n        anchorEl: menuAnchor,\n        open: Boolean(menuAnchor),\n        onClose: () => setMenuAnchor(null),\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: align === 'right' ? 'right' : 'left'\n        },\n        transformOrigin: {\n          vertical: 'top',\n          horizontal: align === 'right' ? 'right' : 'left'\n        },\n        children: /*#__PURE__*/_jsxDEV(MenuItem, {\n          onClick: handleAddToNotebook,\n          children: [/*#__PURE__*/_jsxDEV(NoteAddIcon, {\n            sx: {\n              mr: 1,\n              fontSize: 20\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1285,\n            columnNumber: 13\n          }, this), \"Add to Notebook\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1284,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1271,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1196,\n      columnNumber: 7\n    }, this);\n  }, \"KojSGaG6LI5sGBT6AQwRE19oOsg=\")), \"KojSGaG6LI5sGBT6AQwRE19oOsg=\");\n\n  // Save brainstorm state\n  useEffect(() => {\n    localStorage.setItem(`brainstorm-enabled-${position}`, brainstormEnabled);\n  }, [brainstormEnabled, position]);\n  return /*#__PURE__*/_jsxDEV(StyledPaper, {\n    elevation: 3,\n    children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center',\n          gap: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n          title: selectedModel ? ((_models$find4 = models.find(m => m.id === selectedModel)) === null || _models$find4 === void 0 ? void 0 : _models$find4.name) || 'Select a model' : 'Select a model',\n          children: /*#__PURE__*/_jsxDEV(Avatar, {\n            sx: {\n              bgcolor: selectedModel ? getModelColor(((_models$find5 = models.find(m => m.id === selectedModel)) === null || _models$find5 === void 0 ? void 0 : _models$find5.name) || '') : 'primary.main',\n              transition: 'all 0.3s ease',\n              fontWeight: 600,\n              width: 40,\n              height: 40,\n              cursor: 'help',\n              '& img': {\n                width: '100%',\n                height: '100%',\n                objectFit: 'cover'\n              }\n            },\n            children: selectedModel ? (_models$find6 => {\n              const modelName = ((_models$find6 = models.find(m => m.id === selectedModel)) === null || _models$find6 === void 0 ? void 0 : _models$find6.name) || '';\n              const imagePath = getModelImage(modelName);\n              return imagePath ? /*#__PURE__*/_jsxDEV(\"img\", {\n                src: imagePath,\n                alt: modelName,\n                style: {\n                  width: '100%',\n                  height: '100%',\n                  objectFit: 'cover'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1323,\n                columnNumber: 21\n              }, this) : getModelLetter(modelName);\n            })() : 'A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1303,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1302,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flexDirection: 'column',\n            gap: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(ConversationSelector, {\n            size: \"small\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              value: currentConversationId,\n              onChange: e => handleConversationChange(e.target.value),\n              variant: \"standard\",\n              sx: {\n                fontSize: '0.875rem'\n              },\n              children: conversations.map(conv => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: conv.id,\n                children: conv.name || 'New Conversation'\n              }, conv.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1348,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1341,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1340,\n            columnNumber: 13\n          }, this), models.length > 0 ? /*#__PURE__*/_jsxDEV(ModelSelector, {\n            size: \"small\",\n            sx: {\n              minWidth: 200\n            },\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              value: selectedModel || '',\n              onChange: e => handleModelChange(e.target.value),\n              variant: \"standard\",\n              displayEmpty: true,\n              children: models.map(model => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: model.id,\n                children: model.name\n              }, model.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1363,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1356,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1355,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            color: \"error\",\n            children: \"No AI models available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1370,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1339,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1301,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          gap: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n          title: brainstormEnabled ? \"AI Brainstorm Active\" : \"Enable AI Brainstorm\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: () => setBrainstormEnabled(prev => !prev),\n            color: brainstormEnabled ? \"primary\" : \"default\",\n            sx: {\n              position: 'relative',\n              '&::after': brainstormEnabled ? {\n                content: '\"\"',\n                position: 'absolute',\n                top: '50%',\n                left: '50%',\n                width: '120%',\n                height: '120%',\n                borderRadius: '50%',\n                transform: 'translate(-50%, -50%)',\n                animation: 'pulse 2s infinite',\n                backgroundColor: 'primary.main',\n                opacity: 0.2\n              } : {},\n              '@keyframes pulse': {\n                '0%': {\n                  transform: 'translate(-50%, -50%) scale(0.95)',\n                  opacity: 0.5\n                },\n                '70%': {\n                  transform: 'translate(-50%, -50%) scale(1.1)',\n                  opacity: 0.2\n                },\n                '100%': {\n                  transform: 'translate(-50%, -50%) scale(0.95)',\n                  opacity: 0.5\n                }\n              }\n            },\n            children: /*#__PURE__*/_jsxDEV(BrainstormIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1412,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1378,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1377,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: startNewConversation,\n          title: \"New Conversation\",\n          children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1419,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1415,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: e => setMenuAnchor(e.currentTarget),\n          children: /*#__PURE__*/_jsxDEV(MoreIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1422,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1421,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1376,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1300,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n      ref: messageListRef,\n      onScroll: e => {\n        // If user scrolls to bottom, reattach auto-scroll\n        if (isScrolledToBottom()) {\n          setUserHasScrolled(false);\n        }\n      },\n      children: [currentConversation.messages.map((msg, index) => /*#__PURE__*/_jsxDEV(MessageComponent, {\n        message: msg,\n        align: msg.role === 'user' ? 'right' : 'left'\n      }, `${msg.timestamp}-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1437,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(StreamingResponseComponent, {\n        content: streamingResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1443,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ThinkingIndicator, {\n        isThinking: isThinking,\n        onStop: handleStopResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1444,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1448,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1427,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatFooter, {\n      children: [/*#__PURE__*/_jsxDEV(InputContainer, {\n        onDragOver: e => {\n          e.preventDefault();\n          e.currentTarget.style.backgroundColor = 'rgba(25, 118, 210, 0.1)';\n          e.dataTransfer.dropEffect = 'copy';\n        },\n        onDragLeave: e => {\n          e.preventDefault();\n          e.currentTarget.style.backgroundColor = '';\n        },\n        onDrop: e => {\n          e.preventDefault();\n          e.currentTarget.style.backgroundColor = '';\n          const text = e.dataTransfer.getData('text/plain');\n          if (text) {\n            setInputValue(prev => {\n              const textarea = document.querySelector('textarea');\n              const cursorPosition = (textarea === null || textarea === void 0 ? void 0 : textarea.selectionStart) || prev.length;\n              return prev.slice(0, cursorPosition) + text + prev.slice(cursorPosition);\n            });\n            // Focus and scroll to end\n            const textarea = document.querySelector('textarea');\n            if (textarea) {\n              textarea.focus();\n              textarea.scrollTop = textarea.scrollHeight;\n            }\n          }\n        },\n        sx: {\n          transition: 'all 0.2s ease',\n          '&:hover': {\n            '&[data-dragging=\"true\"]': {\n              backgroundColor: 'rgba(25, 118, 210, 0.1)'\n            }\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          size: \"small\",\n          onClick: e => setEmojiAnchor(e.currentTarget),\n          children: /*#__PURE__*/_jsxDEV(EmojiIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1493,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1489,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Popover, {\n          open: Boolean(emojiAnchor),\n          anchorEl: emojiAnchor,\n          onClose: () => setEmojiAnchor(null),\n          anchorOrigin: {\n            vertical: 'top',\n            horizontal: 'left'\n          },\n          transformOrigin: {\n            vertical: 'bottom',\n            horizontal: 'left'\n          },\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              '.EmojiPickerReact': {\n                '--epr-bg-color': 'rgba(18, 18, 18, 0.95)',\n                '--epr-category-label-bg-color': 'rgba(18, 18, 18, 0.95)',\n                '--epr-hover-bg-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-focus-bg-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-highlight-color': 'rgba(255, 255, 255, 0.2)',\n                '--epr-search-border-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-border-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-text-color': '#fff',\n                border: 'none',\n                boxShadow: '0 4px 20px rgba(0, 0, 0, 0.3)'\n              }\n            },\n            children: /*#__PURE__*/_jsxDEV(EmojiPicker, {\n              onEmojiClick: handleEmojiClick,\n              autoFocusSearch: false,\n              theme: \"dark\",\n              searchPlaceHolder: \"Search emojis...\",\n              width: 320,\n              height: 400,\n              previewConfig: {\n                showPreview: false\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1522,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1508,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1495,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          ref: fileInputRef,\n          style: {\n            display: 'none'\n          },\n          onChange: handleFileUpload,\n          accept: \"image/*,.pdf,.txt,.doc,.docx\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1535,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: !selectedModel ? \"Please select a model first\" : !supportsFileUpload() ? \"This model doesn't support file uploads\" : \"Upload a file\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              size: \"small\",\n              disabled: !supportsFileUpload(),\n              onClick: () => {\n                var _fileInputRef$current;\n                return (_fileInputRef$current = fileInputRef.current) === null || _fileInputRef$current === void 0 ? void 0 : _fileInputRef$current.click();\n              },\n              children: /*#__PURE__*/_jsxDEV(ImageIcon, {\n                sx: {\n                  color: theme => !supportsFileUpload() ? theme.palette.action.disabled : 'inherit'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1553,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1548,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1547,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1542,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          multiline: true,\n          maxRows: 4,\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyPress: handleKeyPress,\n          placeholder: \"Type your message...\",\n          variant: \"standard\",\n          InputProps: {\n            disableUnderline: true,\n            endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"end\",\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: () => handleSendMessage(),\n                disabled: !inputValue.trim() || !selectedModel,\n                color: \"primary\",\n                children: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1579,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1574,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1573,\n              columnNumber: 17\n            }, this)\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1561,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1452,\n        columnNumber: 9\n      }, this), uploadError && /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"caption\",\n        color: \"error\",\n        sx: {\n          mt: 1,\n          display: 'block'\n        },\n        onClick: () => setUploadError(''),\n        children: uploadError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1587,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1451,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Menu, {\n      anchorEl: menuAnchor,\n      open: Boolean(menuAnchor),\n      onClose: () => setMenuAnchor(null),\n      children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => handleMenuAction('new'),\n        children: \"New Conversation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1603,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => handleMenuAction('clear'),\n        children: \"Clear Current Conversation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1606,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => handleMenuAction('delete'),\n        children: \"Delete Current Conversation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1609,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => setHealthChecksEnabled(prev => !prev),\n        children: [healthChecksEnabled ? '✓ ' : '', \" Health Checks Enabled\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1612,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1615,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => handleModelAction('unload'),\n        disabled: !selectedModel || isModelSwitching,\n        children: \"Unload Current Model\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1616,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => handleModelAction('refresh'),\n        disabled: !selectedModel || isModelSwitching,\n        children: \"Refresh Current Model\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1622,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1598,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1299,\n    columnNumber: 5\n  }, this);\n}\n_s2(ChatWindow, \"AONsJ+quQalvN0vXfjVKK/wb1G8=\");\n_c11 = ChatWindow;\nexport default ChatWindow;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;\n$RefreshReg$(_c, \"StyledPaper\");\n$RefreshReg$(_c2, \"ChatHeader\");\n$RefreshReg$(_c3, \"MessageList\");\n$RefreshReg$(_c4, \"Message\");\n$RefreshReg$(_c5, \"MessageContent\");\n$RefreshReg$(_c6, \"ChatFooter\");\n$RefreshReg$(_c7, \"InputContainer\");\n$RefreshReg$(_c8, \"ErrorMessage\");\n$RefreshReg$(_c9, \"ModelSelector\");\n$RefreshReg$(_c10, \"ConversationSelector\");\n$RefreshReg$(_c11, \"ChatWindow\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","useMemo","Box","Paper","TextField","IconButton","Typography","Avatar","Menu","MenuItem","Select","FormControl","CircularProgress","InputAdornment","Popover","Tooltip","ClickAwayListener","Divider","Send","SendIcon","MoreVert","MoreIcon","VideoCall","VideoIcon","OpenInFull","ExpandIcon","Image","ImageIcon","EmojiEmotions","EmojiIcon","Stop","StopIcon","Add","AddIcon","NoteAdd","NoteAddIcon","Psychology","BrainstormIcon","ReactMarkdown","styled","EmojiPicker","jsxDEV","_jsxDEV","Fragment","_Fragment","StyledPaper","theme","display","flexDirection","height","flex","overflow","backgroundColor","palette","background","paper","borderRadius","spacing","_c","ChatHeader","padding","alignItems","justifyContent","borderBottom","divider","_c2","MessageList","flexGrow","default","width","grey","_c3","Message","align","marginBottom","_c4","MessageContent","maxWidth","primary","main","color","contrastText","text","boxShadow","shadows","margin","fontFamily","marginTop","paddingLeft","borderLeft","secondary","_c5","ChatFooter","borderTop","_c6","InputContainer","gap","_c7","ErrorMessage","error","dark","_c8","ModelSelector","paddingBottom","borderBottomColor","_c9","ConversationSelector","minWidth","fontSize","_c10","ChatWindow","position","models","streamingResponse","isThinking","setStreamingResponses","setThinking","serverUrl","otherPanelMessages","onBrainstormMessage","_s2","_s","$RefreshSig$","_models$find4","_models$find5","startNewConversation","newId","Date","now","toString","newConversation","id","name","messages","timestamp","toISOString","setConversations","prev","setCurrentConversationId","conversations","saved","localStorage","getItem","initialId","JSON","parse","currentConversationId","_parsedConversations$","parsedConversations","currentConversation","find","c","inputValue","setInputValue","selectedModel","setSelectedModel","savedModel","menuAnchor","setMenuAnchor","emojiAnchor","setEmojiAnchor","uploadError","setUploadError","fileInputRef","messagesEndRef","abortControllerRef","responseBuffer","updateTimeoutRef","lastHealthCheck","setLastHealthCheck","parseInt","healthChecksEnabled","setHealthChecksEnabled","isModelSwitching","setIsModelSwitching","modelStatus","setModelStatus","lastNetworkCheck","networkCheckInterval","cachedModels","setCachedModels","modelListInterval","lastModelListCheck","brainstormEnabled","setBrainstormEnabled","userHasScrolled","setUserHasScrolled","messageListRef","isScrolledToBottom","current","scrollHeight","scrollTop","clientHeight","handleScroll","e","type","wasAtBottom","scrollToBottom","scrollIntoView","behavior","messageList","addEventListener","removeEventListener","scrollTimer","setTimeout","clearTimeout","handleModelChange","newModelId","setItem","checkServerHealth","response","fetch","method","signal","AbortSignal","timeout","ok","console","warn","fetchModels","headers","data","json","length","some","m","updateConversationMessages","newMessages","map","conv","cleanupConversation","conversationId","abort","handleConversationChange","_conversations$","updateStreamingResponse","newContent","_lastMessage$metadata","lastMessage","role","processed","metadata","fromPanel","content","handleSendMessage","contentOverride","messageContent","trim","isServerHealthy","errorMessage","newMessage","updatedMessages","AbortController","timeoutId","body","stringify","model","msg","stream","temperature","max_tokens","options","load_model_only_when_needed","unload_model_after_completion","skip_embedding_model","skip_model_load_test","no_auto_model_selection","unload_other_models","Error","status","reader","getReader","responseText","processStreamingResponse","_models$find","modelName","updatedMessagesWithResponse","_errorData$error","errorData","message","includes","substring","indexOf","parseError","handleClearChat","handleMenuAction","action","updatedConversations","filter","handleStopResponse","updateConversationName","firstMessage","processStreamingChunk","chunk","lines","split","accumulatedContent","line","_data$choices$","_data$choices$$delta","jsonStr","replace","choices","delta","maxIterations","iterations","done","value","read","TextDecoder","decode","StreamingResponseComponent","memo","children","sx","components","p","variant","component","mb","fileName","_jsxFileName","lineNumber","columnNumber","pre","node","props","style","overflowX","code","inline","ThinkingIndicator","onStop","whiteSpace","marginLeft","mt","pt","size","onClick","ml","bgcolor","updateModelStatus","modelId","isAvailable","available","lastChecked","shouldCheckModel","handleModelAction","getModelColor","toLowerCase","colors","hermes","nomic","llama","mistral","openchat","qwen","gemma","modelType","Object","keys","key","getModelImage","modelImages","starcoder","getModelLetter","charAt","toUpperCase","handleKeyPress","event","shiftKey","preventDefault","handleEmojiClick","emojiData","emoji","cursorPosition","document","querySelector","selectionStart","updatedText","slice","handleFileUpload","_event$target$files","file","target","files","formData","FormData","append","statusText","fileId","supportsFileUpload","_currentModel$name","_currentModel$capabil","currentModel","capabilities","MessageComponent","isDragging","setIsDragging","handleDragStart","_models$find2","dataTransfer","setData","conversationName","effectAllowed","dragPreview","createElement","className","innerHTML","appendChild","setDragImage","removeChild","currentTarget","classList","add","handleDragEnd","remove","handleMessageClick","handleAddToNotebook","_models$find3","CustomEvent","detail","source","window","dispatchEvent","draggable","onDragStart","onDragEnd","cursor","transform","opacity","transition","toLocaleTimeString","anchorEl","open","Boolean","onClose","anchorOrigin","vertical","horizontal","transformOrigin","mr","elevation","title","fontWeight","objectFit","_models$find6","imagePath","src","alt","onChange","displayEmpty","top","left","animation","ref","onScroll","index","onDragOver","dropEffect","onDragLeave","onDrop","getData","textarea","focus","border","onEmojiClick","autoFocusSearch","searchPlaceHolder","previewConfig","showPreview","accept","disabled","_fileInputRef$current","click","fullWidth","multiline","maxRows","onKeyPress","placeholder","InputProps","disableUnderline","endAdornment","_c11","$RefreshReg$"],"sources":["E:/Cline/allm/frontend/src/components/ChatWindow.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback, useMemo } from 'react';\nimport {\n  Box,\n  Paper,\n  TextField,\n  IconButton,\n  Typography,\n  Avatar,\n  Menu,\n  MenuItem,\n  Select,\n  FormControl,\n  CircularProgress,\n  InputAdornment,\n  Popover,\n  Tooltip,\n  ClickAwayListener,\n  Divider,\n} from '@mui/material';\nimport {\n  Send as SendIcon,\n  MoreVert as MoreIcon,\n  VideoCall as VideoIcon,\n  OpenInFull as ExpandIcon,\n  Image as ImageIcon,\n  EmojiEmotions as EmojiIcon,\n  Stop as StopIcon,\n  Add as AddIcon,\n  NoteAdd as NoteAddIcon,\n  Psychology as BrainstormIcon,\n} from '@mui/icons-material';\nimport ReactMarkdown from 'react-markdown';\nimport { styled } from '@mui/material/styles';\nimport EmojiPicker from 'emoji-picker-react';\n\nconst StyledPaper = styled(Paper)(({ theme }) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  height: '100%',\n  flex: 1,\n  overflow: 'hidden',\n  backgroundColor: theme.palette.background.paper,\n  borderRadius: theme.spacing(3),\n}));\n\nconst ChatHeader = styled(Box)(({ theme }) => ({\n  padding: theme.spacing(2),\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  borderBottom: `1px solid ${theme.palette.divider}`,\n}));\n\nconst MessageList = styled(Box)(({ theme }) => ({\n  flexGrow: 1,\n  overflow: 'auto',\n  padding: theme.spacing(2),\n  backgroundColor: theme.palette.background.default,\n  '&::-webkit-scrollbar': {\n    width: '4px',\n  },\n  '&::-webkit-scrollbar-track': {\n    background: 'transparent',\n  },\n  '&::-webkit-scrollbar-thumb': {\n    background: theme.palette.grey[600],\n    borderRadius: '4px',\n  },\n}));\n\nconst Message = styled(Box)(({ theme, align }) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: align === 'right' ? 'flex-end' : 'flex-start',\n  marginBottom: theme.spacing(2),\n}));\n\nconst MessageContent = styled(Box)(({ theme, align }) => ({\n  maxWidth: '70%',\n  padding: theme.spacing(1.5),\n  borderRadius: theme.spacing(2),\n  backgroundColor: align === 'right' ? theme.palette.primary.main : theme.palette.background.paper,\n  color: align === 'right' ? theme.palette.primary.contrastText : theme.palette.text.primary,\n  boxShadow: theme.shadows[1],\n  '& p': {\n    margin: 0,\n  },\n  '& pre': {\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(1),\n    borderRadius: theme.spacing(1),\n    overflow: 'auto',\n    margin: theme.spacing(1, 0),\n    fontFamily: 'monospace',\n  },\n  '& code': {\n    fontFamily: 'monospace',\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(0.25, 0.5),\n    borderRadius: theme.spacing(0.5),\n  },\n  '& ul, & ol': {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    paddingLeft: theme.spacing(3),\n  },\n  '& li': {\n    marginBottom: theme.spacing(0.5),\n  },\n  '& blockquote': {\n    borderLeft: `3px solid ${theme.palette.divider}`,\n    margin: theme.spacing(1, 0),\n    paddingLeft: theme.spacing(2),\n    color: theme.palette.text.secondary,\n  },\n}));\n\nconst ChatFooter = styled(Box)(({ theme }) => ({\n  padding: theme.spacing(2),\n  borderTop: `1px solid ${theme.palette.divider}`,\n  backgroundColor: theme.palette.background.paper,\n}));\n\nconst InputContainer = styled(Box)(({ theme }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  gap: theme.spacing(1),\n  backgroundColor: theme.palette.background.default,\n  borderRadius: theme.spacing(3),\n  padding: theme.spacing(1),\n}));\n\nconst ErrorMessage = styled(Box)(({ theme }) => ({\n  padding: theme.spacing(1, 2),\n  backgroundColor: theme.palette.error.dark,\n  color: theme.palette.error.contrastText,\n  borderRadius: theme.spacing(1),\n  display: 'flex',\n  alignItems: 'center',\n  gap: theme.spacing(1),\n  marginBottom: theme.spacing(2),\n}));\n\nconst ModelSelector = styled(FormControl)(({ theme }) => ({\n  '& .MuiSelect-select': {\n    paddingBottom: 0,\n  },\n  '& .MuiInput-underline:before': {\n    borderBottomColor: 'transparent',\n  },\n}));\n\nconst ConversationSelector = styled(FormControl)(({ theme }) => ({\n  minWidth: 200,\n  '& .MuiSelect-select': {\n    fontSize: '0.875rem',\n  },\n}));\n\nfunction ChatWindow({\n  position,\n  models,\n  streamingResponse,\n  isThinking,\n  setStreamingResponses,\n  setThinking,\n  serverUrl,\n  otherPanelMessages,\n  onBrainstormMessage,\n}) {\n  // Move startNewConversation definition before any hooks that use it\n  const startNewConversation = useCallback(() => {\n    const newId = Date.now().toString();\n    const newConversation = {\n      id: newId,\n      name: 'New Conversation',\n      messages: [],\n      timestamp: new Date().toISOString()\n    };\n    setConversations(prev => [newConversation, ...prev]);\n    setCurrentConversationId(newId);\n  }, []); // Empty dependency array since it only uses setState functions\n\n  // Initialize state with timestamp-based ID\n  const [conversations, setConversations] = useState(() => {\n    const saved = localStorage.getItem(`conversations-${position}`);\n    const initialId = Date.now().toString();\n    return saved ? JSON.parse(saved) : [{\n      id: initialId,\n      name: 'New Conversation',\n      messages: [],\n      timestamp: new Date().toISOString()\n    }];\n  });\n\n  const [currentConversationId, setCurrentConversationId] = useState(() => {\n    const saved = localStorage.getItem(`conversations-${position}`);\n    if (saved) {\n      const parsedConversations = JSON.parse(saved);\n      return parsedConversations[0]?.id || Date.now().toString();\n    }\n    return Date.now().toString();\n  });\n\n  // Remove separate messages state and use conversation messages directly\n  const currentConversation = useMemo(() => \n    conversations.find(c => c.id === currentConversationId) || conversations[0],\n    [conversations, currentConversationId]\n  );\n\n  const [inputValue, setInputValue] = useState('');\n  const [selectedModel, setSelectedModel] = useState(() => {\n    const savedModel = localStorage.getItem(`selectedModel-${position}`);\n    return savedModel || '';\n  });\n  const [menuAnchor, setMenuAnchor] = useState(null);\n  const [emojiAnchor, setEmojiAnchor] = useState(null);\n  const [uploadError, setUploadError] = useState('');\n\n  // Refs\n  const fileInputRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  const abortControllerRef = useRef(null);\n  const responseBuffer = useRef('');\n  const updateTimeoutRef = useRef(null);\n\n  // Add health check state\n  const [lastHealthCheck, setLastHealthCheck] = useState(() => {\n    return parseInt(localStorage.getItem('lastHealthCheck') || '0');\n  });\n\n  // Add health check toggle state\n  const [healthChecksEnabled, setHealthChecksEnabled] = useState(() => {\n    return localStorage.getItem('healthChecksEnabled') !== 'false';\n  });\n\n  // Add loading state for model switching\n  const [isModelSwitching, setIsModelSwitching] = useState(false);\n\n  // Add model status tracking\n  const [modelStatus, setModelStatus] = useState({});\n  const lastNetworkCheck = useRef(0);\n  const networkCheckInterval = 60000; // 1 minute in milliseconds\n\n  // Cache models list with a longer interval\n  const [cachedModels, setCachedModels] = useState([]);\n  const modelListInterval = 60000; // 1 minute\n  const lastModelListCheck = useRef(0);\n\n  // Add brainstorm state\n  const [brainstormEnabled, setBrainstormEnabled] = useState(() => {\n    return localStorage.getItem(`brainstorm-enabled-${position}`) === 'true';\n  });\n\n  // Add state for scroll management\n  const [userHasScrolled, setUserHasScrolled] = useState(false);\n  const messageListRef = useRef(null);\n  \n  // Function to check if scrolled to bottom\n  const isScrolledToBottom = useCallback(() => {\n    if (!messageListRef.current) return true;\n    const { scrollHeight, scrollTop, clientHeight } = messageListRef.current;\n    // Consider \"almost\" at bottom (within 100px) as at bottom\n    return scrollHeight - scrollTop - clientHeight < 100;\n  }, []);\n\n  // Handle scroll events\n  const handleScroll = useCallback((e) => {\n    // Only set userHasScrolled if the scroll was manual (wheel or drag)\n    if (e.type === 'wheel' || e.type === 'touchmove') {\n      const wasAtBottom = isScrolledToBottom();\n      setUserHasScrolled(!wasAtBottom);\n    }\n  }, [isScrolledToBottom]);\n\n  // Scroll to bottom function\n  const scrollToBottom = useCallback(() => {\n    if (messagesEndRef.current && (!userHasScrolled || isScrolledToBottom())) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [userHasScrolled, isScrolledToBottom]);\n\n  // Update scroll effect\n  useEffect(() => {\n    if (!messageListRef.current) return;\n    \n    const messageList = messageListRef.current;\n    messageList.addEventListener('wheel', handleScroll);\n    messageList.addEventListener('touchmove', handleScroll);\n    \n    return () => {\n      messageList.removeEventListener('wheel', handleScroll);\n      messageList.removeEventListener('touchmove', handleScroll);\n    };\n  }, [handleScroll]);\n\n  // Update auto-scroll effect\n  useEffect(() => {\n    const scrollTimer = setTimeout(() => {\n      scrollToBottom();\n    }, 100);\n\n    return () => clearTimeout(scrollTimer);\n  }, [currentConversation.messages, streamingResponse, scrollToBottom]);\n\n  // Now handleModelChange can use unloadModel\n  const handleModelChange = useCallback(async (newModelId) => {\n    if (selectedModel === newModelId || isModelSwitching) return;\n    \n    setIsModelSwitching(true);\n    try {\n      setSelectedModel(newModelId);\n      localStorage.setItem(`selectedModel-${position}`, newModelId);\n    } finally {\n      setIsModelSwitching(false);\n    }\n  }, [selectedModel, position, isModelSwitching]);\n\n  // Update checkServerHealth to respect the toggle\n  const checkServerHealth = useCallback(async () => {\n    // If health checks are disabled, always return true\n    if (!healthChecksEnabled) {\n      return true;\n    }\n\n    const now = Date.now();\n    if (now - lastNetworkCheck.current < networkCheckInterval) {\n      return true; // Return true if we checked recently\n    }\n\n    try {\n      const response = await fetch(`${serverUrl}/health`, {\n        method: 'HEAD',\n        signal: AbortSignal.timeout(5000)\n      });\n      \n      if (response.ok) {\n        lastNetworkCheck.current = now;\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.warn('Health check failed:', error);\n      return false;\n    }\n  }, [serverUrl, healthChecksEnabled]);\n\n  // Add effect to save health check preference\n  useEffect(() => {\n    localStorage.setItem('healthChecksEnabled', healthChecksEnabled);\n  }, [healthChecksEnabled]);\n\n  // Replace models prop usage with cached models\n  useEffect(() => {\n    const fetchModels = async () => {\n      const now = Date.now();\n      if (now - lastModelListCheck.current < modelListInterval) {\n        return; // Use cached models if checked recently\n      }\n\n      try {\n        const response = await fetch(`${serverUrl}/v1/models`, {\n          method: 'GET',\n          headers: { 'Cache-Control': 'no-cache' }\n        });\n        \n        if (response.ok) {\n          const data = await response.json();\n          setCachedModels(data.data || []);\n          lastModelListCheck.current = now;\n        }\n      } catch (error) {\n        console.warn('Failed to fetch models:', error);\n      }\n    };\n\n    fetchModels();\n  }, [serverUrl]);\n\n  // Update model selection logic to use cached models\n  useEffect(() => {\n    if (cachedModels.length > 0 && !selectedModel) {\n      const savedModel = localStorage.getItem(`selectedModel-${position}`);\n      \n      // Only use saved model if it exists in current available models\n      if (savedModel && cachedModels.some(m => m.id === savedModel)) {\n        handleModelChange(savedModel);\n      } else {\n        // If no saved model or it's not available, select the first available model\n        handleModelChange(cachedModels[0].id);\n      }\n    }\n  }, [cachedModels, selectedModel, handleModelChange, position]);\n\n  // Update conversation messages\n  const updateConversationMessages = useCallback((newMessages) => {\n    setConversations(prev => prev.map(conv => \n      conv.id === currentConversationId\n        ? { ...conv, messages: newMessages }\n        : conv\n    ));\n  }, [currentConversationId]);\n\n  // Move cleanupConversation before handleConversationChange\n  const cleanupConversation = useCallback((conversationId) => {\n    // Abort any ongoing requests\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n    }\n\n    // Clear streaming responses\n    setStreamingResponses(prev => ({\n      ...prev,\n      [position]: ''\n    }));\n\n    // Clear thinking state\n    setThinking(prev => ({\n      ...prev,\n      [position]: false\n    }));\n\n    // Clear response buffer\n    responseBuffer.current = '';\n\n    // Clear any pending timeouts\n    if (updateTimeoutRef.current) {\n      clearTimeout(updateTimeoutRef.current);\n      updateTimeoutRef.current = null;\n    }\n  }, [position, setStreamingResponses, setThinking]);\n\n  // Handle conversation switch\n  const handleConversationChange = useCallback((newId) => {\n    if (!conversations.some(conv => conv.id === newId)) {\n      console.warn('Invalid conversation ID, selecting first available conversation');\n      newId = conversations[0]?.id || Date.now().toString();\n    }\n    \n    // Clean up the current conversation before switching\n    cleanupConversation(currentConversationId);\n    setCurrentConversationId(newId);\n  }, [conversations, currentConversationId, cleanupConversation]);\n\n  // Optimize streaming updates\n  const updateStreamingResponse = useCallback((newContent) => {\n    responseBuffer.current = newContent;\n    \n    if (updateTimeoutRef.current) {\n      clearTimeout(updateTimeoutRef.current);\n    }\n\n    updateTimeoutRef.current = setTimeout(() => {\n      setStreamingResponses(prev => ({\n        ...prev,\n        [position]: responseBuffer.current\n      }));\n    }, 1500); // 1.5 second debounce\n  }, [position, setStreamingResponses]);\n\n  // Update effect to watch for messages from the other panel\n  useEffect(() => {\n    if (!brainstormEnabled || !selectedModel || isThinking || !otherPanelMessages?.length) return;\n\n    const lastMessage = otherPanelMessages[otherPanelMessages.length - 1];\n    if (lastMessage?.role === 'assistant' && !lastMessage.processed && lastMessage.metadata?.fromPanel !== position) {\n      // Mark the message as processed to prevent loops\n      lastMessage.processed = true;\n      \n      // Automatically set input and trigger send\n      setInputValue(lastMessage.content);\n      // Small delay for natural conversation flow\n      setTimeout(() => {\n        handleSendMessage(lastMessage.content);\n      }, 800);\n    }\n  }, [brainstormEnabled, otherPanelMessages, selectedModel, isThinking, position]);\n\n  // Update handleSendMessage to accept optional content parameter\n  const handleSendMessage = async (contentOverride = null) => {\n    const messageContent = contentOverride || inputValue;\n    if (!messageContent.trim() || !selectedModel || isModelSwitching) return;\n\n    // Only check server health once per minute\n    const isServerHealthy = await checkServerHealth();\n    if (!isServerHealthy) {\n      const errorMessage = 'Cannot connect to server. Please check that LM Studio is running.';\n      updateConversationMessages([\n        ...currentConversation.messages,\n        {\n          content: errorMessage,\n          timestamp: new Date().toISOString(),\n          role: 'error',\n        }\n      ]);\n      return;\n    }\n\n    setStreamingResponses(prev => ({ ...prev, [position]: '' }));\n    responseBuffer.current = '';\n    \n    const newMessage = {\n      content: messageContent,\n      timestamp: new Date().toISOString(),\n      role: 'user',\n    };\n\n    const updatedMessages = [...currentConversation.messages, newMessage];\n    updateConversationMessages(updatedMessages);\n    setInputValue('');\n    setThinking(prev => ({ ...prev, [position]: true }));\n\n    try {\n      abortControllerRef.current = new AbortController();\n      const timeoutId = setTimeout(() => {\n        if (abortControllerRef.current) {\n          abortControllerRef.current.abort();\n        }\n      }, 180000);\n\n      const response = await fetch(`${serverUrl}/v1/chat/completions`, {\n        method: 'POST',\n        signal: abortControllerRef.current.signal,\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          model: selectedModel,\n          messages: updatedMessages.map(msg => ({\n            role: msg.role === 'error' ? 'assistant' : msg.role,\n            content: msg.content\n          })),\n          stream: true,\n          temperature: 0.7,\n          max_tokens: 2000,\n          options: {\n            load_model_only_when_needed: false,\n            unload_model_after_completion: false, // Never unload models\n            skip_embedding_model: true,\n            skip_model_load_test: true,\n            no_auto_model_selection: true,\n            unload_other_models: false // Never unload other models\n          }\n        })\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        throw new Error(`Server returned ${response.status}: ${await response.text()}`);\n      }\n\n      if (response.body) {\n        const reader = response.body.getReader();\n        responseBuffer.current = '';\n        \n        try {\n          const responseText = await processStreamingResponse(reader);\n          \n          if (responseText) {\n            const newMessage = {\n              content: responseText,\n              timestamp: new Date().toISOString(),\n              role: 'assistant',\n              metadata: {\n                fromPanel: position,\n                model: selectedModel,\n                modelName: models.find(m => m.id === selectedModel)?.name\n              }\n            };\n\n            const updatedMessagesWithResponse = [...updatedMessages, newMessage];\n            updateConversationMessages(updatedMessagesWithResponse);\n\n            // If brainstorm is enabled, notify the other panel\n            if (brainstormEnabled) {\n              onBrainstormMessage?.(newMessage);\n            }\n          }\n        } finally {\n          if (updateTimeoutRef.current) {\n            clearTimeout(updateTimeoutRef.current);\n            updateTimeoutRef.current = null;\n          }\n\n          setStreamingResponses(prev => ({ ...prev, [position]: '' }));\n          setThinking(prev => ({ ...prev, [position]: false }));\n          responseBuffer.current = '';\n          abortControllerRef.current = null;\n        }\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      let errorMessage = 'Unable to get response from LM Studio. ';\n      \n      try {\n        // Try to parse the error response\n        const errorData = error.message.includes('{') ? \n          JSON.parse(error.message.substring(error.message.indexOf('{'))) : null;\n        \n        if (errorData?.error?.message) {\n          if (errorData.error.message.includes('Failed to load model')) {\n            errorMessage = `Model loading failed. Please ensure:\\n` +\n              `1. The model file exists and is not corrupted\\n` +\n              `2. You have sufficient RAM available\\n` +\n              `3. Try restarting LM Studio\\n\\n` +\n              `Technical details: ${errorData.error.message}`;\n          } else {\n            errorMessage += errorData.error.message;\n          }\n        } else if (error.name === 'AbortError') {\n          errorMessage += 'Request timed out. The model might be too slow or not responding.';\n        } else if (error.message === 'Failed to fetch') {\n          errorMessage += `Please check that:\\n1. LM Studio is still running\\n2. Local Server is active\\n3. Server address (${serverUrl}) is correct\\n4. Your internet connection is stable`;\n        } else {\n          errorMessage += error.message;\n        }\n      } catch (parseError) {\n        // If we can't parse the error, just use the original error message\n        errorMessage += error.message;\n      }\n      \n      updateConversationMessages([\n        ...updatedMessages,\n        {\n          content: errorMessage,\n          timestamp: new Date().toISOString(),\n          role: 'error',\n        },\n      ]);\n      setThinking(prev => ({ ...prev, [position]: false }));\n    }\n  };\n\n  useEffect(() => {\n    localStorage.setItem(`conversations-${position}`, JSON.stringify(conversations));\n  }, [conversations, position]);\n\n  const handleClearChat = useCallback(() => {\n    updateConversationMessages([]); // Clear messages in current conversation\n    setStreamingResponses(prev => ({\n      ...prev,\n      [position]: ''\n    }));\n    setThinking(prev => ({\n      ...prev,\n      [position]: false\n    }));\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n    }\n  }, [position, setStreamingResponses, setThinking, updateConversationMessages]);\n\n  const handleMenuAction = useCallback((action) => {\n    switch (action) {\n      case 'new':\n        startNewConversation();\n        break;\n      case 'clear':\n        handleClearChat();\n        break;\n      case 'delete':\n        // Clean up the conversation before deleting\n        cleanupConversation(currentConversationId);\n        \n        setConversations(prev => {\n          const updatedConversations = prev.filter(conv => conv.id !== currentConversationId);\n          if (updatedConversations.length === 0) {\n            const newId = Date.now().toString();\n            const newConversation = {\n              id: newId,\n              name: 'New Conversation',\n              messages: [],\n              timestamp: new Date().toISOString()\n            };\n            return [newConversation];\n          }\n          // Switch to the first conversation in the list\n          setCurrentConversationId(updatedConversations[0].id);\n          return updatedConversations;\n        });\n        break;\n      default:\n        break;\n    }\n    setMenuAnchor(null);\n  }, [currentConversationId, handleClearChat, startNewConversation, cleanupConversation]);\n\n  const handleStopResponse = () => {\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = null;\n      setThinking(prev => ({ ...prev, [position]: false }));\n      setStreamingResponses(prev => ({ ...prev, [position]: '' }));\n    }\n  };\n\n  const updateConversationName = (id, firstMessage) => {\n    if (!firstMessage) return;\n    \n    // Extract first ~30 characters of the first message for the conversation name\n    const name = firstMessage.content.length > 30 \n      ? firstMessage.content.substring(0, 30) + '...'\n      : firstMessage.content;\n\n    setConversations(prev => \n      prev.map(conv => \n        conv.id === id \n          ? { ...conv, name } \n          : conv\n      )\n    );\n  };\n\n  // Batch updates for message list scrolling with longer delay\n  useEffect(() => {\n    const scrollTimer = setTimeout(() => {\n      scrollToBottom();\n    }, 1000); // Delay scroll to 1 second\n\n    return () => clearTimeout(scrollTimer);\n  }, [currentConversation.messages, streamingResponse, scrollToBottom]);\n\n  // Update streaming response handling\n  const processStreamingChunk = useCallback((chunk) => {\n    const lines = chunk.split('\\n');\n    let accumulatedContent = '';\n\n    for (const line of lines) {\n      if (!line.trim() || line.includes('[DONE]')) continue;\n\n      try {\n        const jsonStr = line.replace(/^data: /, '');\n        const data = JSON.parse(jsonStr);\n\n        if (data.choices && data.choices[0]?.delta?.content) {\n          accumulatedContent += data.choices[0].delta.content;\n        }\n      } catch (e) {\n        console.warn('Error parsing chunk:', e);\n        continue;\n      }\n    }\n\n    return accumulatedContent;\n  }, []);\n\n  const processStreamingResponse = async (reader, responseText = '', maxIterations = 1000) => {\n    let iterations = 0;\n    let accumulatedContent = responseBuffer.current || '';\n\n    try {\n      while (iterations < maxIterations) {\n        iterations++;\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        const chunk = new TextDecoder().decode(value);\n        const newContent = processStreamingChunk(chunk);\n        accumulatedContent += newContent;\n        responseText += newContent;\n\n        // Update the streaming response with the accumulated content\n        setStreamingResponses(prev => ({\n          ...prev,\n          [position]: accumulatedContent\n        }));\n      }\n\n      return responseText;\n    } catch (error) {\n      console.error('Error processing stream:', error);\n      throw error;\n    }\n  };\n\n  // Update StreamingResponseComponent to handle paragraphs better\n  const StreamingResponseComponent = React.memo(({ content }) => (\n    content ? (\n      <Message align=\"left\">\n        <MessageContent \n          align=\"left\"\n          sx={{ \n            backgroundColor: theme => theme.palette.background.paper,\n            minWidth: '200px',\n            width: 'fit-content',\n            maxWidth: '70%'\n          }}\n        >\n          <ReactMarkdown \n            components={{\n              p: ({ children }) => (\n                <Typography \n                  variant=\"body1\" \n                  component=\"p\" \n                  sx={{ \n                    mb: 1,\n                    '&:last-child': { mb: 0 }\n                  }}\n                >\n                  {children}\n                </Typography>\n              ),\n              pre: ({ node, ...props }) => (\n                <pre style={{ \n                  backgroundColor: 'rgba(0, 0, 0, 0.1)',\n                  padding: '8px',\n                  borderRadius: '4px',\n                  overflowX: 'auto',\n                }} {...props} />\n              ),\n              code: ({ node, inline, ...props }) => (\n                inline ? \n                  <code style={{ \n                    backgroundColor: 'rgba(0, 0, 0, 0.1)',\n                    padding: '2px 4px',\n                    borderRadius: '3px',\n                  }} {...props} /> :\n                  <code {...props} />\n              ),\n            }}\n          >\n            {content}\n          </ReactMarkdown>\n        </MessageContent>\n      </Message>\n    ) : null\n  ));\n\n  // Update ThinkingIndicator to be more precise\n  const ThinkingIndicator = React.memo(({ isThinking, onStop }) => (\n    isThinking && !streamingResponse && !currentConversation.messages.find(m => m.role === 'error') ? (\n      <Message align=\"left\">\n        <MessageContent \n          align=\"left\" \n          sx={{ \n            backgroundColor: 'rgba(0, 0, 0, 0.2)',\n            minWidth: '200px',\n            width: 'fit-content',\n            maxWidth: '70%',\n            position: 'relative',\n            padding: '12px 16px',\n            '& pre': {\n              margin: 0,\n              padding: 0,\n              backgroundColor: 'transparent',\n              fontFamily: 'inherit',\n              whiteSpace: 'pre-wrap',\n              fontSize: '0.875rem',\n            }\n          }}\n        >\n          <Box sx={{ \n            display: 'flex', \n            flexDirection: 'column',\n            gap: 1,\n          }}>\n            <pre>{\"<think>\"}</pre>\n            <pre style={{ marginLeft: '8px' }}>\n              {\"Processing request and generating response...\"}\n            </pre>\n            <pre>{\"</think>\"}</pre>\n            <Box sx={{ \n              display: 'flex', \n              alignItems: 'center', \n              gap: 1,\n              mt: 1,\n              pt: 1,\n              borderTop: '1px solid rgba(255, 255, 255, 0.1)',\n            }}>\n              <CircularProgress size={16} />\n              <Typography>Thinking...</Typography>\n              <IconButton \n                size=\"small\" \n                onClick={onStop}\n                sx={{ \n                  ml: 'auto',\n                  bgcolor: 'error.main',\n                  color: 'error.contrastText',\n                  '&:hover': {\n                    bgcolor: 'error.dark',\n                  },\n                  width: 24,\n                  height: 24,\n                }}\n              >\n                <StopIcon sx={{ fontSize: 16 }} />\n              </IconButton>\n            </Box>\n          </Box>\n        </MessageContent>\n      </Message>\n    ) : null\n  ));\n\n  // Update model status when a model is successfully used\n  const updateModelStatus = useCallback((modelId, isAvailable) => {\n    setModelStatus(prev => ({\n      ...prev,\n      [modelId]: {\n        available: isAvailable,\n        lastChecked: Date.now()\n      }\n    }));\n  }, []);\n\n  // Check if we need to verify model availability\n  const shouldCheckModel = useCallback((modelId) => {\n    const status = modelStatus[modelId];\n    if (!status) return true;\n    \n    const now = Date.now();\n    return now - status.lastChecked > networkCheckInterval;\n  }, [modelStatus]);\n\n  // Add model unload/refresh function\n  const handleModelAction = useCallback(async (action) => {\n    if (!selectedModel) return;\n    \n    setIsModelSwitching(true);\n    try {\n      if (action === 'unload') {\n        await fetch(`${serverUrl}/v1/model/unload`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            model: selectedModel,\n            options: {\n              unload_other_models: false // Never unload other models\n            }\n          })\n        });\n      } else if (action === 'refresh') {\n        // First unload\n        await fetch(`${serverUrl}/v1/model/unload`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            model: selectedModel,\n            options: {\n              unload_other_models: false\n            }\n          })\n        });\n        \n        // Then force a reload by sending a test completion\n        await fetch(`${serverUrl}/v1/chat/completions`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            model: selectedModel,\n            messages: [{ role: 'system', content: 'test' }],\n            stream: false,\n            max_tokens: 1,\n            options: {\n              load_model_only_when_needed: false,\n              unload_model_after_completion: false,\n              unload_other_models: false\n            }\n          })\n        });\n      }\n    } catch (error) {\n      console.warn(`Failed to ${action} model:`, error);\n    } finally {\n      setIsModelSwitching(false);\n    }\n  }, [selectedModel, serverUrl]);\n\n  // Add back the missing utility functions\n  const getModelColor = (modelName) => {\n    if (!modelName) return 'primary.main';\n    const name = modelName.trim().toLowerCase();\n    \n    // Use a consistent color scheme based on model name\n    const colors = {\n      hermes: '#00BFA5',    // Teal\n      nomic: '#4A90E2',     // Blue\n      llama: '#2E7D32',     // Green\n      mistral: '#ED6C02',   // Orange\n      openchat: '#1976D2',  // Light blue\n      qwen: '#9C27B0',      // Purple\n      gemma: '#FF4081',     // Pink\n      default: '#757575'    // Grey\n    };\n\n    // Find the first matching model name in the colors object\n    const modelType = Object.keys(colors).find(key => name.includes(key));\n    return modelType ? colors[modelType] : colors.default;\n  };\n\n  const getModelImage = (modelName) => {\n    if (!modelName) return null;\n    const name = modelName.trim().toLowerCase();\n    \n    // Map of model names to their image files\n    const modelImages = {\n      hermes: './Images/Hermes.jpg',\n      nomic: './Images/Nomic.png',\n      qwen: './Images/Qwen2.png',\n      starcoder: './Images/StarCoder.jpg',\n      gemma: './Images/Gemma.png'\n    };\n\n    // Find the first matching model name in the images object\n    const modelType = Object.keys(modelImages).find(key => name.includes(key));\n    return modelType ? modelImages[modelType] : null;\n  };\n\n  const getModelLetter = (modelName) => {\n    if (!modelName) return 'A';\n    return modelName.charAt(0).toUpperCase();\n  };\n\n  const handleKeyPress = (event) => {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      event.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const handleEmojiClick = (emojiData) => {\n    const emoji = emojiData.emoji;\n    const cursorPosition = document.querySelector('textarea').selectionStart;\n    const updatedText = \n      inputValue.slice(0, cursorPosition) + \n      emoji + \n      inputValue.slice(cursorPosition);\n    setInputValue(updatedText);\n    setEmojiAnchor(null);\n  };\n\n  const handleFileUpload = async (event) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Reset file input\n    event.target.value = '';\n\n    // Check file size (limit to 10MB)\n    if (file.size > 10 * 1024 * 1024) {\n      setUploadError('File size must be less than 10MB');\n      return;\n    }\n\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('model', selectedModel);\n\n      setThinking(prev => ({ ...prev, [position]: true }));\n\n      const response = await fetch(`${serverUrl}/v1/files`, {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error(`Upload failed: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      \n      // Add file message to chat\n      updateConversationMessages([\n        ...currentConversation.messages,\n        {\n          content: `📎 Uploaded file: ${file.name}`,\n          timestamp: new Date().toISOString(),\n          role: 'user',\n          fileId: data.id,\n        },\n      ]);\n\n    } catch (error) {\n      console.error('Upload error:', error);\n      setUploadError(error.message);\n      updateConversationMessages([\n        ...currentConversation.messages,\n        {\n          content: `Failed to upload file: ${error.message}`,\n          timestamp: new Date().toISOString(),\n          role: 'error',\n        },\n      ]);\n    } finally {\n      setThinking(prev => ({ ...prev, [position]: false }));\n    }\n  };\n\n  const supportsFileUpload = () => {\n    if (!selectedModel || !models.length) return false;\n    const currentModel = models.find(m => m.id === selectedModel);\n    const modelName = currentModel?.name?.toLowerCase() || '';\n    \n    // Enable file uploads for both deepseek and qwen models\n    if (modelName.includes('deepseek') || modelName.includes('qwen')) {\n      return true;\n    }\n    // Fallback to checking capabilities if model has them defined\n    return currentModel?.capabilities?.includes('file_upload') || false;\n  };\n\n  // Add back MessageComponent\n  const MessageComponent = React.memo(({ message, align }) => {\n    const [menuAnchor, setMenuAnchor] = useState(null);\n    const [isDragging, setIsDragging] = useState(false);\n\n    const handleDragStart = (e) => {\n      setIsDragging(true);\n      // Set both text and rich data for different drop targets\n      e.dataTransfer.setData('text/plain', message.content);\n      e.dataTransfer.setData('application/json', JSON.stringify({\n        type: 'chat_message',\n        content: message.content,\n        timestamp: message.timestamp,\n        role: message.role,\n        metadata: {\n          model: selectedModel,\n          modelName: models.find(m => m.id === selectedModel)?.name,\n          conversationId: currentConversationId,\n          conversationName: currentConversation.name\n        }\n      }));\n      e.dataTransfer.effectAllowed = 'copyMove';\n      \n      // Create a custom drag image\n      const dragPreview = document.createElement('div');\n      dragPreview.className = 'message-drag-preview';\n      dragPreview.innerHTML = `\n        <div style=\"\n          padding: 8px 12px;\n          background: rgba(25, 118, 210, 0.9);\n          border-radius: 8px;\n          color: white;\n          font-size: 14px;\n          max-width: 200px;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          white-space: nowrap;\n          box-shadow: 0 2px 8px rgba(0,0,0,0.2);\n        \">\n          ${message.content.substring(0, 50)}${message.content.length > 50 ? '...' : ''}\n        </div>\n      `;\n      document.body.appendChild(dragPreview);\n      e.dataTransfer.setDragImage(dragPreview, 0, 0);\n      setTimeout(() => document.body.removeChild(dragPreview), 0);\n\n      e.currentTarget.classList.add('dragging');\n    };\n\n    const handleDragEnd = (e) => {\n      setIsDragging(false);\n      e.currentTarget.classList.remove('dragging');\n      setTimeout(() => setIsDragging(false), 100);\n    };\n\n    const handleMessageClick = (event) => {\n      if (!isDragging) {  // Only show menu if not dragging\n        event.preventDefault();\n        setMenuAnchor(event.currentTarget);\n      }\n    };\n\n    const handleAddToNotebook = useCallback(() => {\n      const event = new CustomEvent('addToNotebook', {\n        detail: {\n          type: 'chat_message',\n          content: message.content,\n          timestamp: message.timestamp,\n          role: message.role,\n          metadata: {\n            model: selectedModel,\n            modelName: models.find(m => m.id === selectedModel)?.name,\n            conversationId: currentConversationId,\n            conversationName: currentConversation.name\n          },\n          source: 'menu'\n        }\n      });\n      window.dispatchEvent(event);\n      setMenuAnchor(null);\n    }, [message]);\n\n    return (\n      <Message \n        align={align}\n        draggable={true}\n        onDragStart={handleDragStart}\n        onDragEnd={handleDragEnd}\n        onClick={handleMessageClick}\n        sx={{ \n          cursor: isDragging ? 'grabbing' : 'grab',\n          '&:hover': {\n            '& .message-content': {\n              boxShadow: 2,\n              transform: 'translateY(-1px)',\n            }\n          },\n          '&.dragging .message-content': {\n            opacity: 0.7,\n            boxShadow: 4,\n            transform: 'scale(0.98)',\n          },\n          '& .message-content': {\n            transition: 'all 0.2s ease',\n          }\n        }}\n      >\n        {message.role === 'error' ? (\n          <ErrorMessage>\n            <CircularProgress size={16} color=\"error\" />\n            <Typography variant=\"body2\">{message.content}</Typography>\n          </ErrorMessage>\n        ) : (\n          <>\n            <MessageContent \n              align={align} \n              className=\"message-content\"\n              sx={{ \n                transition: 'all 0.2s ease',\n              }}\n            >\n              <ReactMarkdown \n                components={{\n                  pre: ({ node, ...props }) => (\n                    <pre style={{ \n                      backgroundColor: 'rgba(0, 0, 0, 0.1)',\n                      padding: '8px',\n                      borderRadius: '4px',\n                      overflowX: 'auto',\n                    }} {...props} />\n                  ),\n                  code: ({ node, inline, ...props }) => (\n                    inline ? \n                      <code style={{ \n                        backgroundColor: 'rgba(0, 0, 0, 0.1)',\n                        padding: '2px 4px',\n                        borderRadius: '3px',\n                      }} {...props} /> :\n                      <code {...props} />\n                  ),\n                }}\n              >\n                {message.content}\n              </ReactMarkdown>\n            </MessageContent>\n            <Typography \n              variant=\"caption\" \n              color=\"textSecondary\" \n              sx={{ \n                mt: 0.5,\n                opacity: 0.7,\n                fontSize: '0.7rem',\n              }}\n            >\n              {new Date(message.timestamp).toLocaleTimeString()}\n            </Typography>\n          </>\n        )}\n        <Menu\n          anchorEl={menuAnchor}\n          open={Boolean(menuAnchor)}\n          onClose={() => setMenuAnchor(null)}\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: align === 'right' ? 'right' : 'left',\n          }}\n          transformOrigin={{\n            vertical: 'top',\n            horizontal: align === 'right' ? 'right' : 'left',\n          }}\n        >\n          <MenuItem onClick={handleAddToNotebook}>\n            <NoteAddIcon sx={{ mr: 1, fontSize: 20 }} />\n            Add to Notebook\n          </MenuItem>\n        </Menu>\n      </Message>\n    );\n  });\n\n  // Save brainstorm state\n  useEffect(() => {\n    localStorage.setItem(`brainstorm-enabled-${position}`, brainstormEnabled);\n  }, [brainstormEnabled, position]);\n\n  return (\n    <StyledPaper elevation={3}>\n      <ChatHeader>\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n          <Tooltip title={selectedModel ? (models.find(m => m.id === selectedModel)?.name || 'Select a model') : 'Select a model'}>\n            <Avatar sx={{ \n              bgcolor: selectedModel ? \n                getModelColor(models.find(m => m.id === selectedModel)?.name || '') :\n                'primary.main',\n              transition: 'all 0.3s ease',\n              fontWeight: 600,\n              width: 40,\n              height: 40,\n              cursor: 'help',\n              '& img': {\n                width: '100%',\n                height: '100%',\n                objectFit: 'cover',\n              }\n            }}>\n              {selectedModel ? (\n                (() => {\n                  const modelName = models.find(m => m.id === selectedModel)?.name || '';\n                  const imagePath = getModelImage(modelName);\n                  return imagePath ? (\n                    <img \n                      src={imagePath} \n                      alt={modelName}\n                      style={{\n                        width: '100%',\n                        height: '100%',\n                        objectFit: 'cover',\n                      }}\n                    />\n                  ) : (\n                    getModelLetter(modelName)\n                  );\n                })()\n              ) : 'A'}\n            </Avatar>\n          </Tooltip>\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n            <ConversationSelector size=\"small\">\n              <Select\n                value={currentConversationId}\n                onChange={(e) => handleConversationChange(e.target.value)}\n                variant=\"standard\"\n                sx={{ fontSize: '0.875rem' }}\n              >\n                {conversations.map((conv) => (\n                  <MenuItem key={conv.id} value={conv.id}>\n                    {conv.name || 'New Conversation'}\n                  </MenuItem>\n                ))}\n              </Select>\n            </ConversationSelector>\n            {models.length > 0 ? (\n              <ModelSelector size=\"small\" sx={{ minWidth: 200 }}>\n                <Select\n                  value={selectedModel || ''}\n                  onChange={(e) => handleModelChange(e.target.value)}\n                  variant=\"standard\"\n                  displayEmpty\n                >\n                  {models.map((model) => (\n                    <MenuItem key={model.id} value={model.id}>\n                      {model.name}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </ModelSelector>\n            ) : (\n              <Typography variant=\"caption\" color=\"error\">\n                No AI models available\n              </Typography>\n            )}\n          </Box>\n        </Box>\n        <Box sx={{ display: 'flex', gap: 1 }}>\n          <Tooltip title={brainstormEnabled ? \"AI Brainstorm Active\" : \"Enable AI Brainstorm\"}>\n            <IconButton \n              onClick={() => setBrainstormEnabled(prev => !prev)}\n              color={brainstormEnabled ? \"primary\" : \"default\"}\n              sx={{\n                position: 'relative',\n                '&::after': brainstormEnabled ? {\n                  content: '\"\"',\n                  position: 'absolute',\n                  top: '50%',\n                  left: '50%',\n                  width: '120%',\n                  height: '120%',\n                  borderRadius: '50%',\n                  transform: 'translate(-50%, -50%)',\n                  animation: 'pulse 2s infinite',\n                  backgroundColor: 'primary.main',\n                  opacity: 0.2,\n                } : {},\n                '@keyframes pulse': {\n                  '0%': {\n                    transform: 'translate(-50%, -50%) scale(0.95)',\n                    opacity: 0.5,\n                  },\n                  '70%': {\n                    transform: 'translate(-50%, -50%) scale(1.1)',\n                    opacity: 0.2,\n                  },\n                  '100%': {\n                    transform: 'translate(-50%, -50%) scale(0.95)',\n                    opacity: 0.5,\n                  },\n                },\n              }}\n            >\n              <BrainstormIcon />\n            </IconButton>\n          </Tooltip>\n          <IconButton \n            onClick={startNewConversation}\n            title=\"New Conversation\"\n          >\n            <AddIcon />\n          </IconButton>\n          <IconButton onClick={(e) => setMenuAnchor(e.currentTarget)}>\n            <MoreIcon />\n          </IconButton>\n        </Box>\n      </ChatHeader>\n\n      <MessageList\n        ref={messageListRef}\n        onScroll={(e) => {\n          // If user scrolls to bottom, reattach auto-scroll\n          if (isScrolledToBottom()) {\n            setUserHasScrolled(false);\n          }\n        }}\n      >\n        {currentConversation.messages.map((msg, index) => (\n          <MessageComponent\n            key={`${msg.timestamp}-${index}`}\n            message={msg}\n            align={msg.role === 'user' ? 'right' : 'left'}\n          />\n        ))}\n        <StreamingResponseComponent content={streamingResponse} />\n        <ThinkingIndicator \n          isThinking={isThinking} \n          onStop={handleStopResponse}\n        />\n        <div ref={messagesEndRef} />\n      </MessageList>\n\n      <ChatFooter>\n        <InputContainer\n          onDragOver={(e) => {\n            e.preventDefault();\n            e.currentTarget.style.backgroundColor = 'rgba(25, 118, 210, 0.1)';\n            e.dataTransfer.dropEffect = 'copy';\n          }}\n          onDragLeave={(e) => {\n            e.preventDefault();\n            e.currentTarget.style.backgroundColor = '';\n          }}\n          onDrop={(e) => {\n            e.preventDefault();\n            e.currentTarget.style.backgroundColor = '';\n            const text = e.dataTransfer.getData('text/plain');\n            if (text) {\n              setInputValue(prev => {\n                const textarea = document.querySelector('textarea');\n                const cursorPosition = textarea?.selectionStart || prev.length;\n                return prev.slice(0, cursorPosition) + text + prev.slice(cursorPosition);\n              });\n              // Focus and scroll to end\n              const textarea = document.querySelector('textarea');\n              if (textarea) {\n                textarea.focus();\n                textarea.scrollTop = textarea.scrollHeight;\n              }\n            }\n          }}\n          sx={{\n            transition: 'all 0.2s ease',\n            '&:hover': {\n              '&[data-dragging=\"true\"]': {\n                backgroundColor: 'rgba(25, 118, 210, 0.1)',\n              }\n            }\n          }}\n        >\n          <IconButton \n            size=\"small\" \n            onClick={(e) => setEmojiAnchor(e.currentTarget)}\n          >\n            <EmojiIcon />\n          </IconButton>\n          <Popover\n            open={Boolean(emojiAnchor)}\n            anchorEl={emojiAnchor}\n            onClose={() => setEmojiAnchor(null)}\n            anchorOrigin={{\n              vertical: 'top',\n              horizontal: 'left',\n            }}\n            transformOrigin={{\n              vertical: 'bottom',\n              horizontal: 'left',\n            }}\n          >\n            <Box sx={{ \n              '.EmojiPickerReact': {\n                '--epr-bg-color': 'rgba(18, 18, 18, 0.95)',\n                '--epr-category-label-bg-color': 'rgba(18, 18, 18, 0.95)',\n                '--epr-hover-bg-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-focus-bg-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-highlight-color': 'rgba(255, 255, 255, 0.2)',\n                '--epr-search-border-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-border-color': 'rgba(255, 255, 255, 0.1)',\n                '--epr-text-color': '#fff',\n                border: 'none',\n                boxShadow: '0 4px 20px rgba(0, 0, 0, 0.3)',\n              }\n            }}>\n              <EmojiPicker\n                onEmojiClick={handleEmojiClick}\n                autoFocusSearch={false}\n                theme=\"dark\"\n                searchPlaceHolder=\"Search emojis...\"\n                width={320}\n                height={400}\n                previewConfig={{\n                  showPreview: false\n                }}\n              />\n            </Box>\n          </Popover>\n          <input\n            type=\"file\"\n            ref={fileInputRef}\n            style={{ display: 'none' }}\n            onChange={handleFileUpload}\n            accept=\"image/*,.pdf,.txt,.doc,.docx\"\n          />\n          <Tooltip title={\n            !selectedModel ? \"Please select a model first\" :\n            !supportsFileUpload() ? \"This model doesn't support file uploads\" :\n            \"Upload a file\"\n          }>\n            <span>\n              <IconButton \n                size=\"small\"\n                disabled={!supportsFileUpload()}\n                onClick={() => fileInputRef.current?.click()}\n              >\n                <ImageIcon sx={{ \n                  color: theme => !supportsFileUpload() ? \n                    theme.palette.action.disabled : \n                    'inherit'\n                }} />\n              </IconButton>\n            </span>\n          </Tooltip>\n          <TextField\n            fullWidth\n            multiline\n            maxRows={4}\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyPress={handleKeyPress}\n            placeholder=\"Type your message...\"\n            variant=\"standard\"\n            InputProps={{\n              disableUnderline: true,\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    onClick={() => handleSendMessage()}\n                    disabled={!inputValue.trim() || !selectedModel}\n                    color=\"primary\"\n                  >\n                    <SendIcon />\n                  </IconButton>\n                </InputAdornment>\n              ),\n            }}\n          />\n        </InputContainer>\n        {uploadError && (\n          <Typography \n            variant=\"caption\" \n            color=\"error\" \n            sx={{ mt: 1, display: 'block' }}\n            onClick={() => setUploadError('')}\n          >\n            {uploadError}\n          </Typography>\n        )}\n      </ChatFooter>\n\n      <Menu\n        anchorEl={menuAnchor}\n        open={Boolean(menuAnchor)}\n        onClose={() => setMenuAnchor(null)}\n      >\n        <MenuItem onClick={() => handleMenuAction('new')}>\n          New Conversation\n        </MenuItem>\n        <MenuItem onClick={() => handleMenuAction('clear')}>\n          Clear Current Conversation\n        </MenuItem>\n        <MenuItem onClick={() => handleMenuAction('delete')}>\n          Delete Current Conversation\n        </MenuItem>\n        <MenuItem onClick={() => setHealthChecksEnabled(prev => !prev)}>\n          {healthChecksEnabled ? '✓ ' : ''} Health Checks Enabled\n        </MenuItem>\n        <Divider />\n        <MenuItem \n          onClick={() => handleModelAction('unload')}\n          disabled={!selectedModel || isModelSwitching}\n        >\n          Unload Current Model\n        </MenuItem>\n        <MenuItem \n          onClick={() => handleModelAction('refresh')}\n          disabled={!selectedModel || isModelSwitching}\n        >\n          Refresh Current Model\n        </MenuItem>\n      </Menu>\n    </StyledPaper>\n  );\n}\n\nexport default ChatWindow; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}