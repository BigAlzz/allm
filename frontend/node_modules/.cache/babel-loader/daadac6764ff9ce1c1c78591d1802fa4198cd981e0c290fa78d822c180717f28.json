{"ast":null,"code":"// Remove React testing imports as we're testing API directly\nconst testServerUrl = 'http://192.168.56.1:1234';\n\n// Enhanced network diagnostics\nasync function runNetworkDiagnostics() {\n  const diagnostics = {\n    serverReachable: false,\n    modelsEndpoint: false,\n    chatEndpoint: false,\n    streamingSupport: false,\n    details: [],\n    errors: []\n  };\n  try {\n    // Basic connection test\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 5000);\n    try {\n      const response = await fetch(`${testServerUrl}/v1/models`, {\n        signal: controller.signal\n      });\n      diagnostics.serverReachable = response.ok;\n      diagnostics.details.push(`Server connection: ${response.ok ? 'Success' : 'Failed'}`);\n      diagnostics.details.push(`Response status: ${response.status} ${response.statusText}`);\n    } catch (error) {\n      diagnostics.errors.push(`Connection error: ${error.message}`);\n    } finally {\n      clearTimeout(timeoutId);\n    }\n\n    // Test models endpoint\n    try {\n      var _modelData$models, _modelData$models2, _modelData$models3;\n      const modelResponse = await fetch(`${testServerUrl}/v1/models`);\n      const modelData = await modelResponse.json();\n      diagnostics.modelsEndpoint = modelResponse.ok && ((_modelData$models = modelData.models) === null || _modelData$models === void 0 ? void 0 : _modelData$models.length) > 0;\n      diagnostics.details.push(`Models available: ${((_modelData$models2 = modelData.models) === null || _modelData$models2 === void 0 ? void 0 : _modelData$models2.length) || 0}`);\n      if (((_modelData$models3 = modelData.models) === null || _modelData$models3 === void 0 ? void 0 : _modelData$models3.length) > 0) {\n        diagnostics.details.push(`Available models: ${modelData.models.join(', ')}`);\n      }\n    } catch (error) {\n      diagnostics.errors.push(`Models endpoint error: ${error.message}`);\n    }\n\n    // Test chat endpoint\n    if (diagnostics.modelsEndpoint) {\n      try {\n        const modelResponse = await fetch(`${testServerUrl}/v1/models`);\n        const modelData = await modelResponse.json();\n        const model = modelData.models[0];\n        const chatResponse = await fetch(`${testServerUrl}/v1/chat/completions`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            model,\n            messages: [{\n              role: 'user',\n              content: 'Test'\n            }],\n            stream: false\n          })\n        });\n        diagnostics.chatEndpoint = chatResponse.ok;\n        diagnostics.details.push(`Chat endpoint: ${chatResponse.ok ? 'Success' : 'Failed'}`);\n      } catch (error) {\n        diagnostics.errors.push(`Chat endpoint error: ${error.message}`);\n      }\n    }\n\n    // Test streaming support\n    if (diagnostics.chatEndpoint) {\n      try {\n        const modelResponse = await fetch(`${testServerUrl}/v1/models`);\n        const modelData = await modelResponse.json();\n        const model = modelData.models[0];\n        const streamResponse = await fetch(`${testServerUrl}/v1/chat/completions`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            model,\n            messages: [{\n              role: 'user',\n              content: 'Test'\n            }],\n            stream: true\n          })\n        });\n        diagnostics.streamingSupport = streamResponse.ok;\n        diagnostics.details.push(`Streaming support: ${streamResponse.ok ? 'Available' : 'Not available'}`);\n      } catch (error) {\n        diagnostics.errors.push(`Streaming test error: ${error.message}`);\n      }\n    }\n  } catch (error) {\n    diagnostics.errors.push(`General error: ${error.message}`);\n  }\n  return diagnostics;\n}\n\n// Helper function to run all tests and log results\nexport async function runConnectionTests() {\n  console.log('Starting LM Studio connection tests...');\n  try {\n    var _chatData$choices$, _chatData$choices$$me;\n    // Run network diagnostics first\n    console.log('\\nRunning network diagnostics...');\n    const diagnostics = await runNetworkDiagnostics();\n    if (!diagnostics.serverReachable) {\n      throw new Error(`Unable to connect to LM Studio server at ${testServerUrl}. Please check that:\\n1. LM Studio is running\\n2. Local Server is started\\n3. The server address is correct\\n\\nDiagnostics:\\n${diagnostics.details.join('\\n')}\\n\\nErrors:\\n${diagnostics.errors.join('\\n')}`);\n    }\n\n    // Test 1: Basic Connection & Models List\n    console.log('\\nTesting models endpoint...');\n    const modelResponse = await fetch(`${testServerUrl}/v1/models`);\n    if (!modelResponse.ok) throw new Error(`Server returned ${modelResponse.status}`);\n    const modelData = await modelResponse.json();\n    console.log('Available models:', modelData.models);\n    if (!modelData.models || !modelData.models.length) {\n      throw new Error('No models available. Please load a model in LM Studio first.');\n    }\n    console.log('✅ Models endpoint test passed');\n\n    // Test 2: Simple Chat Request\n    console.log('\\nTesting chat completion...');\n    const chatResponse = await fetch(`${testServerUrl}/v1/chat/completions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        model: modelData.models[0],\n        // Use first available model\n        messages: [{\n          role: 'user',\n          content: 'Hello'\n        }],\n        stream: false\n      })\n    });\n    if (!chatResponse.ok) {\n      const errorData = await chatResponse.text();\n      throw new Error(`Chat request failed: ${chatResponse.status}\\nResponse: ${errorData}`);\n    }\n    const chatData = await chatResponse.json();\n    if (!chatData.choices || !chatData.choices.length) {\n      throw new Error('Chat response missing choices');\n    }\n    console.log('✅ Chat completion test passed');\n    console.log('Response:', (_chatData$choices$ = chatData.choices[0]) === null || _chatData$choices$ === void 0 ? void 0 : (_chatData$choices$$me = _chatData$choices$.message) === null || _chatData$choices$$me === void 0 ? void 0 : _chatData$choices$$me.content);\n\n    // Test 3: Streaming\n    console.log('\\nTesting streaming response...');\n    const streamResponse = await fetch(`${testServerUrl}/v1/chat/completions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        model: modelData.models[0],\n        // Use first available model\n        messages: [{\n          role: 'user',\n          content: 'Hi'\n        }],\n        stream: true\n      })\n    });\n    if (!streamResponse.ok) {\n      const errorData = await streamResponse.text();\n      throw new Error(`Streaming request failed: ${streamResponse.status}\\nResponse: ${errorData}`);\n    }\n    console.log('Reading stream...');\n    const reader = streamResponse.body.getReader();\n    const decoder = new TextDecoder();\n    let streamContent = '';\n    while (true) {\n      const {\n        done,\n        value\n      } = await reader.read();\n      if (done) break;\n      const chunk = decoder.decode(value);\n      const lines = chunk.split('\\n');\n      for (const line of lines) {\n        if (line.trim() && !line.includes('[DONE]')) {\n          try {\n            var _data$choices, _data$choices$, _data$choices$$delta;\n            const jsonStr = line.replace(/^data: /, '');\n            const data = JSON.parse(jsonStr);\n            if ((_data$choices = data.choices) !== null && _data$choices !== void 0 && (_data$choices$ = _data$choices[0]) !== null && _data$choices$ !== void 0 && (_data$choices$$delta = _data$choices$.delta) !== null && _data$choices$$delta !== void 0 && _data$choices$$delta.content) {\n              streamContent += data.choices[0].delta.content;\n              process.stdout.write(data.choices[0].delta.content);\n            }\n          } catch (e) {\n            // Ignore parse errors for non-data lines\n          }\n        }\n      }\n    }\n    console.log('\\n✅ Streaming test passed');\n    console.log('\\n✅ All tests passed successfully!');\n    return true;\n  } catch (error) {\n    console.error('\\n❌ Test failed:', error.message);\n    console.error('Error details:', error);\n    return false;\n  }\n}\n\n// Export diagnostics function for UI\nexport { runNetworkDiagnostics };","map":{"version":3,"names":["testServerUrl","runNetworkDiagnostics","diagnostics","serverReachable","modelsEndpoint","chatEndpoint","streamingSupport","details","errors","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","signal","ok","push","status","statusText","error","message","clearTimeout","_modelData$models","_modelData$models2","_modelData$models3","modelResponse","modelData","json","models","length","join","model","chatResponse","method","headers","body","JSON","stringify","messages","role","content","stream","streamResponse","runConnectionTests","console","log","_chatData$choices$","_chatData$choices$$me","Error","errorData","text","chatData","choices","reader","getReader","decoder","TextDecoder","streamContent","done","value","read","chunk","decode","lines","split","line","trim","includes","_data$choices","_data$choices$","_data$choices$$delta","jsonStr","replace","data","parse","delta","process","stdout","write","e"],"sources":["E:/Cline/allm/frontend/src/tests/ChatConnection.test.js"],"sourcesContent":["// Remove React testing imports as we're testing API directly\r\nconst testServerUrl = 'http://192.168.56.1:1234';\r\n\r\n// Enhanced network diagnostics\r\nasync function runNetworkDiagnostics() {\r\n  const diagnostics = {\r\n    serverReachable: false,\r\n    modelsEndpoint: false,\r\n    chatEndpoint: false,\r\n    streamingSupport: false,\r\n    details: [],\r\n    errors: []\r\n  };\r\n\r\n  try {\r\n    // Basic connection test\r\n    const controller = new AbortController();\r\n    const timeoutId = setTimeout(() => controller.abort(), 5000);\r\n    \r\n    try {\r\n      const response = await fetch(`${testServerUrl}/v1/models`, {\r\n        signal: controller.signal\r\n      });\r\n      diagnostics.serverReachable = response.ok;\r\n      diagnostics.details.push(`Server connection: ${response.ok ? 'Success' : 'Failed'}`);\r\n      diagnostics.details.push(`Response status: ${response.status} ${response.statusText}`);\r\n    } catch (error) {\r\n      diagnostics.errors.push(`Connection error: ${error.message}`);\r\n    } finally {\r\n      clearTimeout(timeoutId);\r\n    }\r\n\r\n    // Test models endpoint\r\n    try {\r\n      const modelResponse = await fetch(`${testServerUrl}/v1/models`);\r\n      const modelData = await modelResponse.json();\r\n      diagnostics.modelsEndpoint = modelResponse.ok && modelData.models?.length > 0;\r\n      diagnostics.details.push(`Models available: ${modelData.models?.length || 0}`);\r\n      if (modelData.models?.length > 0) {\r\n        diagnostics.details.push(`Available models: ${modelData.models.join(', ')}`);\r\n      }\r\n    } catch (error) {\r\n      diagnostics.errors.push(`Models endpoint error: ${error.message}`);\r\n    }\r\n\r\n    // Test chat endpoint\r\n    if (diagnostics.modelsEndpoint) {\r\n      try {\r\n        const modelResponse = await fetch(`${testServerUrl}/v1/models`);\r\n        const modelData = await modelResponse.json();\r\n        const model = modelData.models[0];\r\n        \r\n        const chatResponse = await fetch(`${testServerUrl}/v1/chat/completions`, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({\r\n            model,\r\n            messages: [{ role: 'user', content: 'Test' }],\r\n            stream: false\r\n          })\r\n        });\r\n        \r\n        diagnostics.chatEndpoint = chatResponse.ok;\r\n        diagnostics.details.push(`Chat endpoint: ${chatResponse.ok ? 'Success' : 'Failed'}`);\r\n      } catch (error) {\r\n        diagnostics.errors.push(`Chat endpoint error: ${error.message}`);\r\n      }\r\n    }\r\n\r\n    // Test streaming support\r\n    if (diagnostics.chatEndpoint) {\r\n      try {\r\n        const modelResponse = await fetch(`${testServerUrl}/v1/models`);\r\n        const modelData = await modelResponse.json();\r\n        const model = modelData.models[0];\r\n        \r\n        const streamResponse = await fetch(`${testServerUrl}/v1/chat/completions`, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({\r\n            model,\r\n            messages: [{ role: 'user', content: 'Test' }],\r\n            stream: true\r\n          })\r\n        });\r\n        \r\n        diagnostics.streamingSupport = streamResponse.ok;\r\n        diagnostics.details.push(`Streaming support: ${streamResponse.ok ? 'Available' : 'Not available'}`);\r\n      } catch (error) {\r\n        diagnostics.errors.push(`Streaming test error: ${error.message}`);\r\n      }\r\n    }\r\n  } catch (error) {\r\n    diagnostics.errors.push(`General error: ${error.message}`);\r\n  }\r\n\r\n  return diagnostics;\r\n}\r\n\r\n// Helper function to run all tests and log results\r\nexport async function runConnectionTests() {\r\n  console.log('Starting LM Studio connection tests...');\r\n  \r\n  try {\r\n    // Run network diagnostics first\r\n    console.log('\\nRunning network diagnostics...');\r\n    const diagnostics = await runNetworkDiagnostics();\r\n    \r\n    if (!diagnostics.serverReachable) {\r\n      throw new Error(`Unable to connect to LM Studio server at ${testServerUrl}. Please check that:\\n1. LM Studio is running\\n2. Local Server is started\\n3. The server address is correct\\n\\nDiagnostics:\\n${diagnostics.details.join('\\n')}\\n\\nErrors:\\n${diagnostics.errors.join('\\n')}`);\r\n    }\r\n    \r\n    // Test 1: Basic Connection & Models List\r\n    console.log('\\nTesting models endpoint...');\r\n    const modelResponse = await fetch(`${testServerUrl}/v1/models`);\r\n    if (!modelResponse.ok) throw new Error(`Server returned ${modelResponse.status}`);\r\n    const modelData = await modelResponse.json();\r\n    console.log('Available models:', modelData.models);\r\n    if (!modelData.models || !modelData.models.length) {\r\n      throw new Error('No models available. Please load a model in LM Studio first.');\r\n    }\r\n    console.log('✅ Models endpoint test passed');\r\n\r\n    // Test 2: Simple Chat Request\r\n    console.log('\\nTesting chat completion...');\r\n    const chatResponse = await fetch(`${testServerUrl}/v1/chat/completions`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        model: modelData.models[0], // Use first available model\r\n        messages: [{ role: 'user', content: 'Hello' }],\r\n        stream: false\r\n      })\r\n    });\r\n    \r\n    if (!chatResponse.ok) {\r\n      const errorData = await chatResponse.text();\r\n      throw new Error(`Chat request failed: ${chatResponse.status}\\nResponse: ${errorData}`);\r\n    }\r\n    \r\n    const chatData = await chatResponse.json();\r\n    if (!chatData.choices || !chatData.choices.length) {\r\n      throw new Error('Chat response missing choices');\r\n    }\r\n    console.log('✅ Chat completion test passed');\r\n    console.log('Response:', chatData.choices[0]?.message?.content);\r\n\r\n    // Test 3: Streaming\r\n    console.log('\\nTesting streaming response...');\r\n    const streamResponse = await fetch(`${testServerUrl}/v1/chat/completions`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        model: modelData.models[0], // Use first available model\r\n        messages: [{ role: 'user', content: 'Hi' }],\r\n        stream: true\r\n      })\r\n    });\r\n\r\n    if (!streamResponse.ok) {\r\n      const errorData = await streamResponse.text();\r\n      throw new Error(`Streaming request failed: ${streamResponse.status}\\nResponse: ${errorData}`);\r\n    }\r\n\r\n    console.log('Reading stream...');\r\n    const reader = streamResponse.body.getReader();\r\n    const decoder = new TextDecoder();\r\n    let streamContent = '';\r\n\r\n    while (true) {\r\n      const { done, value } = await reader.read();\r\n      if (done) break;\r\n      \r\n      const chunk = decoder.decode(value);\r\n      const lines = chunk.split('\\n');\r\n      \r\n      for (const line of lines) {\r\n        if (line.trim() && !line.includes('[DONE]')) {\r\n          try {\r\n            const jsonStr = line.replace(/^data: /, '');\r\n            const data = JSON.parse(jsonStr);\r\n            if (data.choices?.[0]?.delta?.content) {\r\n              streamContent += data.choices[0].delta.content;\r\n              process.stdout.write(data.choices[0].delta.content);\r\n            }\r\n          } catch (e) {\r\n            // Ignore parse errors for non-data lines\r\n          }\r\n        }\r\n      }\r\n    }\r\n    console.log('\\n✅ Streaming test passed');\r\n\r\n    console.log('\\n✅ All tests passed successfully!');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('\\n❌ Test failed:', error.message);\r\n    console.error('Error details:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Export diagnostics function for UI\r\nexport { runNetworkDiagnostics }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}